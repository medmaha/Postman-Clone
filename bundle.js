/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";


/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
module.exports = function (cssWithMappingToString) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = "";
      var needLayer = typeof item[5] !== "undefined";
      if (item[4]) {
        content += "@supports (".concat(item[4], ") {");
      }
      if (item[2]) {
        content += "@media ".concat(item[2], " {");
      }
      if (needLayer) {
        content += "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {");
      }
      content += cssWithMappingToString(item);
      if (needLayer) {
        content += "}";
      }
      if (item[2]) {
        content += "}";
      }
      if (item[4]) {
        content += "}";
      }
      return content;
    }).join("");
  }; // import a list of modules into the list

  list.i = function i(modules, media, dedupe, supports, layer) {
    if (typeof modules === "string") {
      modules = [[null, modules, undefined]];
    }
    var alreadyImportedModules = {};
    if (dedupe) {
      for (var k = 0; k < this.length; k++) {
        var id = this[k][0];
        if (id != null) {
          alreadyImportedModules[id] = true;
        }
      }
    }
    for (var _k = 0; _k < modules.length; _k++) {
      var item = [].concat(modules[_k]);
      if (dedupe && alreadyImportedModules[item[0]]) {
        continue;
      }
      if (typeof layer !== "undefined") {
        if (typeof item[5] === "undefined") {
          item[5] = layer;
        } else {
          item[1] = "@layer".concat(item[5].length > 0 ? " ".concat(item[5]) : "", " {").concat(item[1], "}");
          item[5] = layer;
        }
      }
      if (media) {
        if (!item[2]) {
          item[2] = media;
        } else {
          item[1] = "@media ".concat(item[2], " {").concat(item[1], "}");
          item[2] = media;
        }
      }
      if (supports) {
        if (!item[4]) {
          item[4] = "".concat(supports);
        } else {
          item[1] = "@supports (".concat(item[4], ") {").concat(item[1], "}");
          item[4] = supports;
        }
      }
      list.push(item);
    }
  };
  return list;
};

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/sourceMaps.js":
/*!************************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/sourceMaps.js ***!
  \************************************************************/
/***/ ((module) => {

"use strict";


module.exports = function (item) {
  var content = item[1];
  var cssMapping = item[3];
  if (!cssMapping) {
    return content;
  }
  if (typeof btoa === "function") {
    var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(cssMapping))));
    var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);
    var sourceMapping = "/*# ".concat(data, " */");
    var sourceURLs = cssMapping.sources.map(function (source) {
      return "/*# sourceURL=".concat(cssMapping.sourceRoot || "").concat(source, " */");
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join("\n");
  }
  return [content].join("\n");
};

/***/ }),

/***/ "./node_modules/form-data/lib/browser.js":
/*!***********************************************!*\
  !*** ./node_modules/form-data/lib/browser.js ***!
  \***********************************************/
/***/ ((module) => {

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
/* eslint-env browser */
module.exports = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' ? self.FormData : window.FormData;

/***/ }),

/***/ "./src/api/index.js":
/*!**************************!*\
  !*** ./src/api/index.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ "./node_modules/axios/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var BaseApiSetup = /*#__PURE__*/function () {
  function BaseApiSetup() {
    _classCallCheck(this, BaseApiSetup);
    this.axiosApi = axios__WEBPACK_IMPORTED_MODULE_0__["default"];
    this.config = {
      url: undefined,
      method: undefined,
      data: undefined,
      params: undefined,
      headers: undefined
    };

    // this.init()
  }
  _createClass(BaseApiSetup, [{
    key: "init",
    value: function init() {
      this.axiosApi.interceptors.request.use(function (request) {
        request.customData = request.duration || {};
        request.customData['startTime'] = new Date().getTime();
        return request;
      });
      this.axiosApi.interceptors.response.use(function (response) {
        response.customData = response.customData || {};
        response.customData['timeDuration'] = new Date().getTime() - response.config.customData.startTime;
        return response;
      }, function (error) {
        return Promise.reject(error);
      });
    }
  }, {
    key: "act",
    value: function () {
      var _act = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(callback) {
        var response;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                response = {};
                _context.next = 3;
                return this.axiosApi(this.config).then(function (res) {
                  response = res;
                })["catch"](function (error) {
                  response = error.response;
                });
              case 3:
                callback(response);
              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));
      function act(_x) {
        return _act.apply(this, arguments);
      }
      return act;
    }()
  }, {
    key: "reset",
    value: function reset() {
      this.config = {
        url: undefined,
        method: undefined,
        data: undefined,
        params: undefined,
        headers: undefined
      };
    }
  }]);
  return BaseApiSetup;
}();
var ApiRequests = /*#__PURE__*/function () {
  function ApiRequests() {
    _classCallCheck(this, ApiRequests);
    this.api = new BaseApiSetup();
    this.allowedMethod = ['get', 'post', 'put', 'get'];
  }
  _createClass(ApiRequests, [{
    key: "send",
    value: function send() {
      var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var callback = arguments.length > 1 ? arguments[1] : undefined;
      var options = _objectSpread({
        url: '',
        method: 'get',
        body: null,
        config: {
          headers: {},
          urlParams: [],
          queryParams: {}
        }
      }, init);
      if (options.url.length < 10) return false;
      if (!options.method in this.allowedMethod) return false;
      if (options.method !== 'get' && !options.body) return false;
      var href = this.setUrl(options.url);
      this.api.config = {
        url: href,
        method: options.method,
        params: options.config.queryParams,
        data: options.body,
        headers: options.config.headers
      };
      this.perform(callback);
      return href + this.setQueryParameters(options.config.queryParams);
    }
  }, {
    key: "perform",
    value: function () {
      var _perform = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(cb) {
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.api.act(function (response) {
                  cb(response);
                });
              case 2:
                this.api.reset();
              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));
      function perform(_x2) {
        return _perform.apply(this, arguments);
      }
      return perform;
    }()
  }, {
    key: "setUrl",
    value: function setUrl(url) {
      if (url.split('?').length > 1) {
        url = url.split('?')[0];
      }
      return new URL(url.trim()).href;
    }
  }, {
    key: "setQueryParameters",
    value: function setQueryParameters(query) {
      var urlValue = '';
      if (Object.keys(query).length) {
        urlValue = '?';
        for (var key in query) {
          urlValue = urlValue + "".concat(key.trim(), "=").concat(query[key], "&");
        }
      }
      urlValue = urlValue.split('');
      urlValue.pop();
      return urlValue.join('').trim();
    }
  }]);
  return ApiRequests;
}();
var API = new ApiRequests();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (API);

/***/ }),

/***/ "./src/editor/index.js":
/*!*****************************!*\
  !*** ./src/editor/index.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ setupEditors)
/* harmony export */ });
/* harmony import */ var _codemirror_basic_setup__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/basic-setup */ "./node_modules/@codemirror/basic-setup/dist/index.js");
/* harmony import */ var _codemirror_basic_setup__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/basic-setup */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_commands__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/commands */ "./node_modules/@codemirror/commands/dist/index.js");
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");




var baseTheme = _codemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView.baseTheme({
  '.cm-o-replacement': {
    display: 'inline-block',
    width: '.5em',
    height: '.5em',
    borderRadius: '.25em'
  },
  '&light .cm-o-replacement': {
    backgroundColor: '#04c'
  },
  '&dark .cm-o-replacement': {
    backgroundColor: '#5bf'
  }
});
function setupEditors() {
  var jsonRequestBody = document.getElementById('requestEditor');
  var jsonResponseBody = document.getElementById('responseEditor');
  var basicExtensions = [_codemirror_basic_setup__WEBPACK_IMPORTED_MODULE_1__.basicSetup, _codemirror_view__WEBPACK_IMPORTED_MODULE_0__.keymap.of([_codemirror_commands__WEBPACK_IMPORTED_MODULE_2__.defaultTabBinding]), _codemirror_basic_setup__WEBPACK_IMPORTED_MODULE_3__.EditorState.tabSize.of(4), baseTheme];
  var requestEditorHeight = _codemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView.theme({
    '&': {
      minHeight: '100px',
      maxHeight: '150px',
      backgroundColor: '#fff',
      color: '#333'
    },
    '.cm-scroller': {
      overflow: 'auto'
    }
  });
  var requestEditor = new _codemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView({
    state: _codemirror_basic_setup__WEBPACK_IMPORTED_MODULE_3__.EditorState.create({
      doc: '{\n\t\n}',
      extensions: [].concat(basicExtensions, [requestEditorHeight])
    }),
    parent: jsonRequestBody,
    viewport: {
      from: 0,
      to: 300
    }
  });
  var responseEditorHeight = _codemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView.theme({
    '&': {
      maxHeight: '350px',
      minHeight: '200px',
      color: '#333',
      backgroundColor: 'rgb(226 232 240)'
    },
    '.cm-scroller': {
      overflow: 'auto'
    }
  });
  var responseEditor = new _codemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView({
    state: _codemirror_basic_setup__WEBPACK_IMPORTED_MODULE_3__.EditorState.create({
      doc: '...',
      extensions: [].concat(basicExtensions, [_codemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView.editable.of(false), responseEditorHeight])
    }),
    parent: jsonResponseBody
  });
  function updateResponseEditor(value) {
    responseEditor.dispatch({
      changes: {
        from: 0,
        to: responseEditor.state.doc.length,
        insert: JSON.stringify(value, null, 2)
      }
    });
  }
  return {
    requestEditor: requestEditor,
    updateResponseEditor: updateResponseEditor
  };
}

/***/ }),

/***/ "./src/main.js":
/*!*********************!*\
  !*** ./src/main.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "data": () => (/* binding */ data),
/* harmony export */   "getFormData": () => (/* binding */ getFormData),
/* harmony export */   "getHeaders": () => (/* binding */ getHeaders),
/* harmony export */   "getQueryParams": () => (/* binding */ getQueryParams)
/* harmony export */ });
var currentTab = document.querySelector('[data-tab].active');
var addNewFieldButtons = document.querySelectorAll('[data-tab] .tab-content [data-add-field]');
var tabsButtons = document.querySelectorAll('[data-tab] .title');
var data = {
  url: '',
  method: '',
  config: {
    headers: {},
    urlParams: [],
    queryParams: {}
  }
};
tabsButtons.forEach(function (tab) {
  tab.addEventListener('click', function () {
    currentTab = tab;
    tabsButtons.forEach(function (_tab) {
      _tab.closest('[data-tab]').classList.remove('active');
    });
    currentTab.closest('[data-tab]').classList.add('active');
  });
});
addNewFieldButtons.forEach(function (button) {
  button.addEventListener('click', function () {
    var template = document.querySelector('template[data-field');
    var keyValuePair = template.content.cloneNode(true);
    var content = button.closest('.tab-content').querySelector('.fields');
    content.appendChild(keyValuePair);
    content.scrollBy({
      top: 100
    });
    fieldRemoveEvent();
  });
});
function getHeaders() {
  var headers = {};
  var headerTab = document.getElementById('headerTab');
  headerTab.querySelectorAll('.tab-content .fields [data-key-value-pair]').forEach(function (fields) {
    if (fields.querySelector('[data-key]').value && fields.querySelector('[data-value]').value) {
      headers[fields.querySelector('[data-key]').value.trim()] = fields.querySelector('[data-value]').value.trim();
    }
  });
  return headers;
}
function getFormData(headers) {
  var form = new FormData();
  var json = {};
  var paramTab = document.getElementById('formData');
  paramTab.querySelectorAll('.tab-content .fields [data-key-value-pair]').forEach(function (fields) {
    if (fields.querySelector('[data-key]').value && fields.querySelector('[data-key]').value) {
      json[fields.querySelector('[data-key').value.trim()] = fields.querySelector('[data-value').value.trim();
      form.append(fields.querySelector('[data-key]').value.trim(), fields.querySelector('[data-value]').value.trim());
    }
  });
  var value;
  for (var key in headers) {
    if (headers[key].toLowerCase().includes('application/json')) {
      value = json;
      break;
    }
  }
  if (value) return json;
  return form;
}
function getQueryParams() {
  var params = {};
  var paramTab = document.getElementById('paramTab');
  paramTab.querySelectorAll('.tab-content .fields [data-key-value-pair]').forEach(function (fields) {
    if (fields.querySelector('[data-key]').value && fields.querySelector('[data-key]').value) {
      params[fields.querySelector('[data-key]').value.trim()] = fields.querySelector('[data-value]').value.trim();
    }
  });
  return params;
}
function fieldRemoveEvent() {
  var removeFieldButtons = document.querySelectorAll('[data-tab] .tab-content [data-key-value-pair] span');
  removeFieldButtons.forEach(function (removeBtn) {
    removeBtn.addEventListener('click', function () {
      var _removeBtn$closest;
      if (((_removeBtn$closest = removeBtn.closest('.tab-content')) === null || _removeBtn$closest === void 0 ? void 0 : _removeBtn$closest.querySelectorAll('[data-key-value-pair]').length) === 1) {
        return;
      }
      removeBtn.parentNode.parentNode.remove();
    });
  });
}
fieldRemoveEvent();


/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/main.scss":
/*!********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/main.scss ***!
  \********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/sourceMaps.js */ "./node_modules/css-loader/dist/runtime/sourceMaps.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");
/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);
// Imports


var ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_sourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));
// Module
___CSS_LOADER_EXPORT___.push([module.id, "/*\n! tailwindcss v3.1.8 | MIT License | https://tailwindcss.com\n*/\n/*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n*,\n::before,\n::after {\n  box-sizing: border-box;\n  /* 1 */\n  border-width: 0;\n  /* 2 */\n  border-style: solid;\n  /* 2 */\n  border-color: #e5e7eb;\n  /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: \"\";\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n*/\nhtml {\n  line-height: 1.5;\n  /* 1 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */\n  -moz-tab-size: 4;\n  /* 3 */\n  -o-tab-size: 4;\n  tab-size: 4;\n  /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  /* 4 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\nbody {\n  margin: 0;\n  /* 1 */\n  line-height: inherit;\n  /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\nhr {\n  height: 0;\n  /* 1 */\n  color: inherit;\n  /* 2 */\n  border-top-width: 1px;\n  /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n  text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n  /* 1 */\n  font-size: 1em;\n  /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\ntable {\n  text-indent: 0;\n  /* 1 */\n  border-color: inherit;\n  /* 2 */\n  border-collapse: collapse;\n  /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n  /* 1 */\n  font-size: 100%;\n  /* 1 */\n  font-weight: inherit;\n  /* 1 */\n  line-height: inherit;\n  /* 1 */\n  color: inherit;\n  /* 1 */\n  margin: 0;\n  /* 2 */\n  padding: 0;\n  /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\nbutton,\n[type=button],\n[type=reset],\n[type=submit] {\n  -webkit-appearance: button;\n  /* 1 */\n  background-color: transparent;\n  /* 2 */\n  background-image: none;\n  /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n[type=search] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  outline-offset: -2px;\n  /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\nbutton,\n[role=button] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block;\n  /* 1 */\n  vertical-align: middle;\n  /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n}\n\n::-webkit-backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n}\n\n.container {\n  width: 100%;\n}\n\n@media (min-width: 640px) {\n  .container {\n    max-width: 640px;\n  }\n}\n@media (min-width: 768px) {\n  .container {\n    max-width: 768px;\n  }\n}\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1024px;\n  }\n}\n@media (min-width: 1280px) {\n  .container {\n    max-width: 1280px;\n  }\n}\n@media (min-width: 1536px) {\n  .container {\n    max-width: 1536px;\n  }\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.absolute {\n  position: absolute;\n}\n\n.relative {\n  position: relative;\n}\n\n.inset-y-0 {\n  top: 0px;\n  bottom: 0px;\n}\n\n.left-0 {\n  left: 0px;\n}\n\n.right-0 {\n  right: 0px;\n}\n\n.top-0 {\n  top: 0px;\n}\n\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.mx-3 {\n  margin-left: 0.75rem;\n  margin-right: 0.75rem;\n}\n\n.mt-4 {\n  margin-top: 1rem;\n}\n\n.mt-\\[2rem\\] {\n  margin-top: 2rem;\n}\n\n.mt-2 {\n  margin-top: 0.5rem;\n}\n\n.mt-3 {\n  margin-top: 0.75rem;\n}\n\n.mt-\\[250px\\] {\n  margin-top: 250px;\n}\n\n.mt-\\[300px\\] {\n  margin-top: 300px;\n}\n\n.mt-\\[150px\\] {\n  margin-top: 150px;\n}\n\n.mt-\\[180px\\] {\n  margin-top: 180px;\n}\n\n.mt-\\[200px\\] {\n  margin-top: 200px;\n}\n\n.mt-\\[1rem\\] {\n  margin-top: 1rem;\n}\n\n.mb-\\[1rem\\] {\n  margin-bottom: 1rem;\n}\n\n.block {\n  display: block;\n}\n\n.inline-block {\n  display: inline-block;\n}\n\n.flex {\n  display: flex;\n}\n\n.inline-flex {\n  display: inline-flex;\n}\n\n.h-full {\n  height: 100%;\n}\n\n.h-5 {\n  height: 1.25rem;\n}\n\n.h-\\[1\\.5rem\\] {\n  height: 1.5rem;\n}\n\n.h-\\[2rem\\] {\n  height: 2rem;\n}\n\n.min-h-\\[400px\\] {\n  min-height: 400px;\n}\n\n.min-h-\\[250px\\] {\n  min-height: 250px;\n}\n\n.min-h-\\[150px\\] {\n  min-height: 150px;\n}\n\n.min-h-\\[200px\\] {\n  min-height: 200px;\n}\n\n.min-h-fit {\n  min-height: -webkit-fit-content;\n  min-height: -moz-fit-content;\n  min-height: fit-content;\n}\n\n.w-full {\n  width: 100%;\n}\n\n.w-5 {\n  width: 1.25rem;\n}\n\n.w-\\[1\\.5rem\\] {\n  width: 1.5rem;\n}\n\n.max-w-\\[800px\\] {\n  max-width: 800px;\n}\n\n.max-w-\\[400px\\] {\n  max-width: 400px;\n}\n\n.max-w-\\[700px\\] {\n  max-width: 700px;\n}\n\n.flex-1 {\n  flex: 1 1 0%;\n}\n\n.cursor-pointer {\n  cursor: pointer;\n}\n\n.flex-col {\n  flex-direction: column;\n}\n\n.flex-wrap {\n  flex-wrap: wrap;\n}\n\n.items-center {\n  align-items: center;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.justify-evenly {\n  justify-content: space-evenly;\n}\n\n.gap-1 {\n  gap: 0.25rem;\n}\n\n.gap-2 {\n  gap: 0.5rem;\n}\n\n.gap-\\[2px\\] {\n  gap: 2px;\n}\n\n.gap-\\[1\\.5rem\\] {\n  gap: 1.5rem;\n}\n\n.gap-\\[2rem\\] {\n  gap: 2rem;\n}\n\n.gap-3 {\n  gap: 0.75rem;\n}\n\n.gap-\\[\\.5rem\\] {\n  gap: 0.5rem;\n}\n\n.gap-\\[1rem\\] {\n  gap: 1rem;\n}\n\n.gap-\\[3rem\\] {\n  gap: 3rem;\n}\n\n.gap-\\[10px\\] {\n  gap: 10px;\n}\n\n.self-start {\n  align-self: flex-start;\n}\n\n.justify-self-start {\n  justify-self: start;\n}\n\n.overflow-hidden {\n  overflow: hidden;\n}\n\n.rounded-md {\n  border-radius: 0.375rem;\n}\n\n.rounded-sm {\n  border-radius: 0.125rem;\n}\n\n.rounded-full {\n  border-radius: 9999px;\n}\n\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n\n.rounded-xl {\n  border-radius: 0.75rem;\n}\n\n.border {\n  border-width: 1px;\n}\n\n.border-t {\n  border-top-width: 1px;\n}\n\n.border-t-2 {\n  border-top-width: 2px;\n}\n\n.border-none {\n  border-style: none;\n}\n\n.border-slate-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(203 213 225/var(--tw-border-opacity));\n}\n\n.border-slate-400 {\n  --tw-border-opacity: 1;\n  border-color: rgb(148 163 184/var(--tw-border-opacity));\n}\n\n.border-cyan-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(8 145 178/var(--tw-border-opacity));\n}\n\n.bg-slate-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(71 85 105/var(--tw-bg-opacity));\n}\n\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255/var(--tw-bg-opacity));\n}\n\n.bg-slate-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(30 41 59/var(--tw-bg-opacity));\n}\n\n.bg-slate-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(148 163 184/var(--tw-bg-opacity));\n}\n\n.bg-red-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(248 113 113/var(--tw-bg-opacity));\n}\n\n.bg-gray-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(107 114 128/var(--tw-bg-opacity));\n}\n\n.bg-slate-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(51 65 85/var(--tw-bg-opacity));\n}\n\n.bg-slate-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(100 116 139/var(--tw-bg-opacity));\n}\n\n.bg-red-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(239 68 68/var(--tw-bg-opacity));\n}\n\n.bg-gray-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99/var(--tw-bg-opacity));\n}\n\n.bg-red-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(254 202 202/var(--tw-bg-opacity));\n}\n\n.bg-blue-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(96 165 250/var(--tw-bg-opacity));\n}\n\n.bg-blue-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(191 219 254/var(--tw-bg-opacity));\n}\n\n.bg-slate-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(226 232 240/var(--tw-bg-opacity));\n}\n\n.bg-slate-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(241 245 249/var(--tw-bg-opacity));\n}\n\n.fill-slate-300 {\n  fill: #cbd5e1;\n}\n\n.p-3 {\n  padding: 0.75rem;\n}\n\n.p-\\[1rem\\] {\n  padding: 1rem;\n}\n\n.p-1 {\n  padding: 0.25rem;\n}\n\n.p-2 {\n  padding: 0.5rem;\n}\n\n.px-\\[10px\\] {\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n.px-1 {\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}\n\n.px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n\n.px-\\[1rem\\] {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n.px-\\[\\.5rem\\] {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.py-\\[\\.15rem\\] {\n  padding-top: 0.15rem;\n  padding-bottom: 0.15rem;\n}\n\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n\n.py-\\[\\.25rem\\] {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.py-3 {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\n\n.py-\\[2px\\] {\n  padding-top: 2px;\n  padding-bottom: 2px;\n}\n\n.py-\\[6px\\] {\n  padding-top: 6px;\n  padding-bottom: 6px;\n}\n\n.pl-2 {\n  padding-left: 0.5rem;\n}\n\n.pl-9 {\n  padding-left: 2.25rem;\n}\n\n.pr-3 {\n  padding-right: 0.75rem;\n}\n\n.pt-3 {\n  padding-top: 0.75rem;\n}\n\n.pt-2 {\n  padding-top: 0.5rem;\n}\n\n.pb-\\[4rem\\] {\n  padding-bottom: 4rem;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-3xl {\n  font-size: 1.875rem;\n  line-height: 2.25rem;\n}\n\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n\n.font-bold {\n  font-weight: 700;\n}\n\n.font-semibold {\n  font-weight: 600;\n}\n\n.uppercase {\n  text-transform: uppercase;\n}\n\n.capitalize {\n  text-transform: capitalize;\n}\n\n.tracking-wide {\n  letter-spacing: 0.025em;\n}\n\n.tracking-wider {\n  letter-spacing: 0.05em;\n}\n\n.text-slate-200 {\n  --tw-text-opacity: 1;\n  color: rgb(226 232 240/var(--tw-text-opacity));\n}\n\n.text-slate-800 {\n  --tw-text-opacity: 1;\n  color: rgb(30 41 59/var(--tw-text-opacity));\n}\n\n.text-green-200 {\n  --tw-text-opacity: 1;\n  color: rgb(187 247 208/var(--tw-text-opacity));\n}\n\n.text-green-400 {\n  --tw-text-opacity: 1;\n  color: rgb(74 222 128/var(--tw-text-opacity));\n}\n\n.text-green-300 {\n  --tw-text-opacity: 1;\n  color: rgb(134 239 172/var(--tw-text-opacity));\n}\n\n.text-orange-300 {\n  --tw-text-opacity: 1;\n  color: rgb(253 186 116/var(--tw-text-opacity));\n}\n\n.text-orange-400 {\n  --tw-text-opacity: 1;\n  color: rgb(251 146 60/var(--tw-text-opacity));\n}\n\n.text-blue-300 {\n  --tw-text-opacity: 1;\n  color: rgb(147 197 253/var(--tw-text-opacity));\n}\n\n.text-orange-500 {\n  --tw-text-opacity: 1;\n  color: rgb(249 115 22/var(--tw-text-opacity));\n}\n\n.text-blue-500 {\n  --tw-text-opacity: 1;\n  color: rgb(59 130 246/var(--tw-text-opacity));\n}\n\n.text-yellow-500 {\n  --tw-text-opacity: 1;\n  color: rgb(234 179 8/var(--tw-text-opacity));\n}\n\n.text-slate-100 {\n  --tw-text-opacity: 1;\n  color: rgb(241 245 249/var(--tw-text-opacity));\n}\n\n.shadow-sm {\n  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 rgba(0, 0, 0, 0)), var(--tw-ring-shadow, 0 0 rgba(0, 0, 0, 0)), var(--tw-shadow);\n}\n\n.outline-2 {\n  outline-width: 2px;\n}\n\n.outline-1 {\n  outline-width: 1px;\n}\n\n.outline-offset-0 {\n  outline-offset: 0px;\n}\n\n.outline-offset-1 {\n  outline-offset: 1px;\n}\n\n.outline-offset-2 {\n  outline-offset: 2px;\n}\n\n.outline-blue-500 {\n  outline-color: #3b82f6;\n}\n\n.outline-cyan-600 {\n  outline-color: #0891b2;\n}\n\n.placeholder\\:capitalize::-moz-placeholder {\n  text-transform: capitalize;\n}\n\n.placeholder\\:capitalize::placeholder {\n  text-transform: capitalize;\n}\n\n.placeholder\\:italic::-moz-placeholder {\n  font-style: italic;\n}\n\n.placeholder\\:italic::placeholder {\n  font-style: italic;\n}\n\n.placeholder\\:text-slate-400::-moz-placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(148 163 184/var(--tw-text-opacity));\n}\n\n.placeholder\\:text-slate-400::placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(148 163 184/var(--tw-text-opacity));\n}\n\n.placeholder\\:text-slate-800::-moz-placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(30 41 59/var(--tw-text-opacity));\n}\n\n.placeholder\\:text-slate-800::placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(30 41 59/var(--tw-text-opacity));\n}\n\n.hover\\:bg-slate-500:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(100 116 139/var(--tw-bg-opacity));\n}\n\n.hover\\:bg-red-500:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(239 68 68/var(--tw-bg-opacity));\n}\n\n.hover\\:bg-blue-500:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(59 130 246/var(--tw-bg-opacity));\n}\n\n.focus\\:border-none:focus {\n  border-style: none;\n}\n\n.focus\\:border-sky-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(14 165 233/var(--tw-border-opacity));\n}\n\n.focus\\:border-blue-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(59 130 246/var(--tw-border-opacity));\n}\n\n.focus\\:border-blue-400:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(96 165 250/var(--tw-border-opacity));\n}\n\n.focus\\:border-slate-400:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(148 163 184/var(--tw-border-opacity));\n}\n\n.focus\\:border-slate-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(100 116 139/var(--tw-border-opacity));\n}\n\n.focus\\:outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n.focus\\:outline:focus {\n  outline-style: solid;\n}\n\n.focus\\:outline-1:focus {\n  outline-width: 1px;\n}\n\n.focus\\:outline-\\[1px\\]:focus {\n  outline-width: 1px;\n}\n\n.focus\\:outline-slate-600:focus {\n  outline-color: #475569;\n}\n\n.focus\\:ring-1:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 rgba(0, 0, 0, 0));\n}\n\n.focus\\:ring:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 rgba(0, 0, 0, 0));\n}\n\n.focus\\:ring-sky-500:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(14 165 233 / var(--tw-ring-opacity));\n}\n\n@media (min-width: 640px) {\n  .sm\\:gap-\\[2rem\\] {\n    gap: 2rem;\n  }\n  .sm\\:p-0 {\n    padding: 0px;\n  }\n  .sm\\:px-0 {\n    padding-left: 0px;\n    padding-right: 0px;\n  }\n  .sm\\:text-sm {\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n}\n@media (min-width: 768px) {\n  .md\\:w-\\[600px\\] {\n    width: 600px;\n  }\n}\n@media (min-width: 1024px) {\n  .lg\\:w-\\[75px\\] {\n    width: 75px;\n  }\n  .lg\\:w-\\[750px\\] {\n    width: 750px;\n  }\n  .lg\\:w-\\[800px\\] {\n    width: 800px;\n  }\n  .lg\\:w-\\[8000px\\] {\n    width: 8000px;\n  }\n  .lg\\:w-\\[500px\\] {\n    width: 500px;\n  }\n  .lg\\:justify-evenly {\n    justify-content: space-evenly;\n  }\n}\n[data-tab] .tab-content {\n  display: none;\n  position: absolute;\n  left: 0;\n  top: 85%;\n  width: 100%;\n  padding: 1rem;\n  z-index: 1;\n}\n[data-tab] .tab-content .fields {\n  width: 100%;\n  max-height: 120px;\n  overflow: hidden;\n  overflow-y: auto;\n  box-shadow: 0 4 7px rgba(50, 64, 94, 0.2);\n}\n[data-tab] .tab-content .fields span:focus {\n  outline: 1px solid red;\n}\n@media (min-width: 720px) {\n  [data-tab] .tab-content .fields {\n    padding-right: 100px;\n  }\n}\n[data-tab] .tab-content .fields [data-key-value-pair] {\n  margin: 0.5rem 0;\n}\n[data-tab] .tab-content .fields [data-key-value-pair] input {\n  width: 50%;\n}\n\n#root:has(#bodyTab.active) .response-class {\n  margin-top: 180px;\n}\n\n[data-response-tabs] {\n  color: rgb(234, 234, 234);\n  letter-spacing: 1px;\n}\n[data-response-tabs] > * {\n  opacity: 0.85;\n  transition: transform 200ms ease-in-out;\n}\n[data-response-tabs] > *:hover {\n  opacity: 0.95;\n}\n[data-response-tabs] .active {\n  opacity: 1;\n  border-bottom: 2px solid rgb(48, 48, 68);\n  color: rgb(234, 250, 255);\n}\n[data-response-tabs] .active:hover {\n  color: rgb(246, 251, 252);\n}\n\n[data-tab] .title {\n  padding: 0 1rem;\n  border-radius: 3px;\n  cursor: pointer;\n  transition: color 250ms ease-in-out;\n}\n[data-tab] .title:hover {\n  color: #fff;\n}\n@media (max-width: 600px) {\n  [data-tab] .title {\n    padding: 0;\n  }\n}\n\n[data-tab].active .title {\n  border-bottom: 2px solid rgb(201, 199, 199);\n  color: #fff;\n}\n[data-tab].active .tab-content {\n  display: block;\n}\n\n.cm-gutters {\n  min-height: 250px;\n}", "",{"version":3,"sources":["webpack://./src/css/index.css","webpack://./src/css/main.scss"],"names":[],"mappings":"AAAA;;CAAA;AAIA;;;CAAA;AAKA;;;EAGE,sBAAA;EACA,MAAA;EACA,eAAA;EACA,MAAA;EACA,mBAAA;EACA,MAAA;EACA,qBAAA;EACA,MAAA;ACDF;;ADIA;;EAEE,gBAAA;ACDF;;ADIA;;;;;CAAA;AAOA;EACE,gBAAA;EACA,MAAA;EACA,8BAAA;EACA,MAAA;EACA,gBAAA;EACA,MAAA;EACA,cAAA;EACG,WAAA;EACH,MAAA;EACA,4NAAA;EACA,MAAA;ACFF;;ADKA;;;CAAA;AAKA;EACE,SAAA;EACA,MAAA;EACA,oBAAA;EACA,MAAA;ACHF;;ADMA;;;;CAAA;AAMA;EACE,SAAA;EACA,MAAA;EACA,cAAA;EACA,MAAA;EACA,qBAAA;EACA,MAAA;ACJF;;ADOA;;CAAA;AAIA;EACE,yCAAA;EACQ,iCAAA;ACLV;;ADQA;;CAAA;AAIA;;;;;;EAME,kBAAA;EACA,oBAAA;ACNF;;ADSA;;CAAA;AAIA;EACE,cAAA;EACA,wBAAA;ACPF;;ADUA;;CAAA;AAIA;;EAEE,mBAAA;ACRF;;ADWA;;;CAAA;AAKA;;;;EAIE,+GAAA;EACA,MAAA;EACA,cAAA;EACA,MAAA;ACTF;;ADYA;;CAAA;AAIA;EACE,cAAA;ACVF;;ADaA;;CAAA;AAIA;;EAEE,cAAA;EACA,cAAA;EACA,kBAAA;EACA,wBAAA;ACXF;;ADcA;EACE,eAAA;ACXF;;ADcA;EACE,WAAA;ACXF;;ADcA;;;;CAAA;AAMA;EACE,cAAA;EACA,MAAA;EACA,qBAAA;EACA,MAAA;EACA,yBAAA;EACA,MAAA;ACZF;;ADeA;;;;CAAA;AAMA;;;;;EAKE,oBAAA;EACA,MAAA;EACA,eAAA;EACA,MAAA;EACA,oBAAA;EACA,MAAA;EACA,oBAAA;EACA,MAAA;EACA,cAAA;EACA,MAAA;EACA,SAAA;EACA,MAAA;EACA,UAAA;EACA,MAAA;ACbF;;ADgBA;;CAAA;AAIA;;EAEE,oBAAA;ACdF;;ADiBA;;;CAAA;AAKA;;;;EAIE,0BAAA;EACA,MAAA;EACA,6BAAA;EACA,MAAA;EACA,sBAAA;EACA,MAAA;ACfF;;ADkBA;;CAAA;AAIA;EACE,aAAA;AChBF;;ADmBA;;CAAA;AAIA;EACE,gBAAA;ACjBF;;ADoBA;;CAAA;AAIA;EACE,wBAAA;AClBF;;ADqBA;;CAAA;AAIA;;EAEE,YAAA;ACnBF;;ADsBA;;;CAAA;AAKA;EACE,6BAAA;EACA,MAAA;EACA,oBAAA;EACA,MAAA;ACpBF;;ADuBA;;CAAA;AAIA;EACE,wBAAA;ACrBF;;ADwBA;;;CAAA;AAKA;EACE,0BAAA;EACA,MAAA;EACA,aAAA;EACA,MAAA;ACtBF;;ADyBA;;CAAA;AAIA;EACE,kBAAA;ACvBF;;AD0BA;;CAAA;AAIA;;;;;;;;;;;;;EAaE,SAAA;ACxBF;;AD2BA;EACE,SAAA;EACA,UAAA;ACxBF;;AD2BA;EACE,UAAA;ACxBF;;AD2BA;;;EAGE,gBAAA;EACA,SAAA;EACA,UAAA;ACxBF;;AD2BA;;CAAA;AAIA;EACE,gBAAA;ACzBF;;AD4BA;;;CAAA;AAKA;EACE,UAAA;EACA,MAAA;EACA,cAAA;EACA,MAAA;AC1BF;;AD6BA;;EAEE,UAAA;EACA,MAAA;EACA,cAAA;EACA,MAAA;AC1BF;;AD6BA;;CAAA;AAIA;;EAEE,eAAA;AC3BF;;AD8BA;;CAAA;AAIA;EACE,eAAA;AC5BF;;AD+BA;;;;CAAA;AAMA;;;;;;;;EAQE,cAAA;EACA,MAAA;EACA,sBAAA;EACA,MAAA;AC7BF;;ADgCA;;CAAA;AAIA;;EAEE,eAAA;EACA,YAAA;AC9BF;;ADiCA;EACE,wBAAA;EACA,wBAAA;EACA,mBAAA;EACA,mBAAA;EACA,cAAA;EACA,cAAA;EACA,cAAA;EACA,eAAA;EACA,eAAA;EACA,YAAA;EACA,YAAA;EACA,iBAAA;EACA,sCAAA;EACA,cAAA;EACA,mBAAA;EACA,qBAAA;EACA,sBAAA;EACA,uBAAA;EACA,iBAAA;EACA,2BAAA;EACA,4BAAA;EACA,sCAAA;EACA,kCAAA;EACA,2BAAA;EACA,sBAAA;EACA,8BAAA;EACA,WAAA;EACA,iBAAA;EACA,eAAA;EACA,gBAAA;EACA,iBAAA;EACA,aAAA;EACA,eAAA;EACA,YAAA;EACA,kBAAA;EACA,oBAAA;EACA,0BAAA;EACA,wBAAA;EACA,yBAAA;EACA,0BAAA;EACA,sBAAA;EACA,uBAAA;EACA,wBAAA;EACA,qBAAA;AC9BF;;ADiCA;EACE,wBAAA;EACA,wBAAA;EACA,mBAAA;EACA,mBAAA;EACA,cAAA;EACA,cAAA;EACA,cAAA;EACA,eAAA;EACA,eAAA;EACA,YAAA;EACA,YAAA;EACA,iBAAA;EACA,sCAAA;EACA,cAAA;EACA,mBAAA;EACA,qBAAA;EACA,sBAAA;EACA,uBAAA;EACA,iBAAA;EACA,2BAAA;EACA,4BAAA;EACA,sCAAA;EACA,kCAAA;EACA,2BAAA;EACA,sBAAA;EACA,8BAAA;EACA,WAAA;EACA,iBAAA;EACA,eAAA;EACA,gBAAA;EACA,iBAAA;EACA,aAAA;EACA,eAAA;EACA,YAAA;EACA,kBAAA;EACA,oBAAA;EACA,0BAAA;EACA,wBAAA;EACA,yBAAA;EACA,0BAAA;EACA,sBAAA;EACA,uBAAA;EACA,wBAAA;EACA,qBAAA;AC9BF;;ADiCA;EACE,wBAAA;EACA,wBAAA;EACA,mBAAA;EACA,mBAAA;EACA,cAAA;EACA,cAAA;EACA,cAAA;EACA,eAAA;EACA,eAAA;EACA,YAAA;EACA,YAAA;EACA,iBAAA;EACA,sCAAA;EACA,cAAA;EACA,mBAAA;EACA,qBAAA;EACA,sBAAA;EACA,uBAAA;EACA,iBAAA;EACA,2BAAA;EACA,4BAAA;EACA,sCAAA;EACA,kCAAA;EACA,2BAAA;EACA,sBAAA;EACA,8BAAA;EACA,WAAA;EACA,iBAAA;EACA,eAAA;EACA,gBAAA;EACA,iBAAA;EACA,aAAA;EACA,eAAA;EACA,YAAA;EACA,kBAAA;EACA,oBAAA;EACA,0BAAA;EACA,wBAAA;EACA,yBAAA;EACA,0BAAA;EACA,sBAAA;EACA,uBAAA;EACA,wBAAA;EACA,qBAAA;AC9BF;;ADiCA;EACE,WAAA;AC9BF;;ADiCA;EACE;IACE,gBAAA;EC9BF;AACF;ADiCA;EACE;IACE,gBAAA;EC/BF;AACF;ADkCA;EACE;IACE,iBAAA;EChCF;AACF;ADmCA;EACE;IACE,iBAAA;ECjCF;AACF;ADoCA;EACE;IACE,iBAAA;EClCF;AACF;ADqCA;EACE,kBAAA;EACA,UAAA;EACA,WAAA;EACA,UAAA;EACA,YAAA;EACA,gBAAA;EACA,sBAAA;EACA,mBAAA;EACA,eAAA;ACnCF;;ADsCA;EACE,kBAAA;ACnCF;;ADsCA;EACE,kBAAA;ACnCF;;ADsCA;EACE,QAAA;EACA,WAAA;ACnCF;;ADsCA;EACE,SAAA;ACnCF;;ADsCA;EACE,UAAA;ACnCF;;ADsCA;EACE,QAAA;ACnCF;;ADsCA;EACE,iBAAA;EACA,kBAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,qBAAA;ACnCF;;ADsCA;EACE,gBAAA;ACnCF;;ADsCA;EACE,gBAAA;ACnCF;;ADsCA;EACE,kBAAA;ACnCF;;ADsCA;EACE,mBAAA;ACnCF;;ADsCA;EACE,iBAAA;ACnCF;;ADsCA;EACE,iBAAA;ACnCF;;ADsCA;EACE,iBAAA;ACnCF;;ADsCA;EACE,iBAAA;ACnCF;;ADsCA;EACE,iBAAA;ACnCF;;ADsCA;EACE,gBAAA;ACnCF;;ADsCA;EACE,mBAAA;ACnCF;;ADsCA;EACE,cAAA;ACnCF;;ADsCA;EACE,qBAAA;ACnCF;;ADsCA;EACE,aAAA;ACnCF;;ADsCA;EACE,oBAAA;ACnCF;;ADsCA;EACE,YAAA;ACnCF;;ADsCA;EACE,eAAA;ACnCF;;ADsCA;EACE,cAAA;ACnCF;;ADsCA;EACE,YAAA;ACnCF;;ADsCA;EACE,iBAAA;ACnCF;;ADsCA;EACE,iBAAA;ACnCF;;ADsCA;EACE,iBAAA;ACnCF;;ADsCA;EACE,iBAAA;ACnCF;;ADsCA;EACE,+BAAA;EACA,4BAAA;EACA,uBAAA;ACnCF;;ADsCA;EACE,WAAA;ACnCF;;ADsCA;EACE,cAAA;ACnCF;;ADsCA;EACE,aAAA;ACnCF;;ADsCA;EACE,gBAAA;ACnCF;;ADsCA;EACE,gBAAA;ACnCF;;ADsCA;EACE,gBAAA;ACnCF;;ADsCA;EACE,YAAA;ACnCF;;ADsCA;EACE,eAAA;ACnCF;;ADsCA;EACE,sBAAA;ACnCF;;ADsCA;EACE,eAAA;ACnCF;;ADsCA;EACE,mBAAA;ACnCF;;ADsCA;EACE,uBAAA;ACnCF;;ADsCA;EACE,6BAAA;ACnCF;;ADsCA;EACE,YAAA;ACnCF;;ADsCA;EACE,WAAA;ACnCF;;ADsCA;EACE,QAAA;ACnCF;;ADsCA;EACE,WAAA;ACnCF;;ADsCA;EACE,SAAA;ACnCF;;ADsCA;EACE,YAAA;ACnCF;;ADsCA;EACE,WAAA;ACnCF;;ADsCA;EACE,SAAA;ACnCF;;ADsCA;EACE,SAAA;ACnCF;;ADsCA;EACE,SAAA;ACnCF;;ADsCA;EACE,sBAAA;ACnCF;;ADsCA;EACE,mBAAA;ACnCF;;ADsCA;EACE,gBAAA;ACnCF;;ADsCA;EACE,uBAAA;ACnCF;;ADsCA;EACE,uBAAA;ACnCF;;ADsCA;EACE,qBAAA;ACnCF;;ADsCA;EACE,qBAAA;ACnCF;;ADsCA;EACE,sBAAA;ACnCF;;ADsCA;EACE,iBAAA;ACnCF;;ADsCA;EACE,qBAAA;ACnCF;;ADsCA;EACE,qBAAA;ACnCF;;ADsCA;EACE,kBAAA;ACnCF;;ADsCA;EACE,sBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,sBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,sBAAA;EACA,qDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,qDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,oDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,oDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,qDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,oDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,sDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,aAAA;ACnCF;;ADsCA;EACE,gBAAA;ACnCF;;ADsCA;EACE,aAAA;ACnCF;;ADsCA;EACE,gBAAA;ACnCF;;ADsCA;EACE,eAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,mBAAA;ACnCF;;ADsCA;EACE,qBAAA;EACA,sBAAA;ACnCF;;ADsCA;EACE,qBAAA;EACA,sBAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,mBAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,qBAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,uBAAA;ACnCF;;ADsCA;EACE,mBAAA;EACA,sBAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,uBAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,uBAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,qBAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,uBAAA;ACnCF;;ADsCA;EACE,gBAAA;EACA,mBAAA;ACnCF;;ADsCA;EACE,gBAAA;EACA,mBAAA;ACnCF;;ADsCA;EACE,oBAAA;ACnCF;;ADsCA;EACE,qBAAA;ACnCF;;ADsCA;EACE,sBAAA;ACnCF;;ADsCA;EACE,oBAAA;ACnCF;;ADsCA;EACE,mBAAA;ACnCF;;ADsCA;EACE,oBAAA;ACnCF;;ADsCA;EACE,kBAAA;ACnCF;;ADsCA;EACE,mBAAA;EACA,oBAAA;ACnCF;;ADsCA;EACE,mBAAA;EACA,oBAAA;ACnCF;;ADsCA;EACE,mBAAA;EACA,oBAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,iBAAA;ACnCF;;ADsCA;EACE,gBAAA;ACnCF;;ADsCA;EACE,gBAAA;ACnCF;;ADsCA;EACE,yBAAA;ACnCF;;ADsCA;EACE,0BAAA;ACnCF;;ADsCA;EACE,uBAAA;ACnCF;;ADsCA;EACE,sBAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,8CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,2CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,8CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,6CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,8CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,8CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,6CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,8CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,6CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,6CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,4CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,8CAAA;ACnCF;;ADsCA;EACE,0CAAA;EACA,uDAAA;EACA,6HAAA;ACnCF;;ADsCA;EACE,kBAAA;ACnCF;;ADsCA;EACE,kBAAA;ACnCF;;ADsCA;EACE,mBAAA;ACnCF;;ADsCA;EACE,mBAAA;ACnCF;;ADsCA;EACE,mBAAA;ACnCF;;ADsCA;EACE,sBAAA;ACnCF;;ADsCA;EACE,sBAAA;ACnCF;;ADsCA;EACE,0BAAA;ACnCF;;ADsCA;EACE,0BAAA;ACnCF;;ADsCA;EACE,kBAAA;ACnCF;;ADsCA;EACE,kBAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,8CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,8CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,2CAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,2CAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,qDAAA;ACnCF;;ADsCA;EACE,kBAAA;EACA,sDAAA;ACnCF;;ADsCA;EACE,kBAAA;ACnCF;;ADsCA;EACE,sBAAA;EACA,sDAAA;ACnCF;;ADsCA;EACE,sBAAA;EACA,sDAAA;ACnCF;;ADsCA;EACE,sBAAA;EACA,sDAAA;ACnCF;;ADsCA;EACE,sBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,sBAAA;EACA,uDAAA;ACnCF;;ADsCA;EACE,8BAAA;EACA,mBAAA;ACnCF;;ADsCA;EACE,oBAAA;ACnCF;;ADsCA;EACE,kBAAA;ACnCF;;ADsCA;EACE,kBAAA;ACnCF;;ADsCA;EACE,sBAAA;ACnCF;;ADsCA;EACE,2GAAA;EACA,yGAAA;EACA,uGAAA;ACnCF;;ADsCA;EACE,2GAAA;EACA,yGAAA;EACA,uGAAA;ACnCF;;ADsCA;EACE,oBAAA;EACA,yDAAA;ACnCF;;ADsCA;EACE;IACE,SAAA;ECnCF;EDsCA;IACE,YAAA;ECpCF;EDuCA;IACE,iBAAA;IACA,kBAAA;ECrCF;EDwCA;IACE,mBAAA;IACA,oBAAA;ECtCF;AACF;ADyCA;EACE;IACE,YAAA;ECvCF;AACF;AD0CA;EACE;IACE,WAAA;ECxCF;ED2CA;IACE,YAAA;ECzCF;ED4CA;IACE,YAAA;EC1CF;ED6CA;IACE,aAAA;EC3CF;ED8CA;IACE,YAAA;EC5CF;ED+CA;IACE,6BAAA;EC7CF;AACF;AApzCI;EACI,aAAA;EACA,kBAAA;EACA,OAAA;EACA,QAAA;EACA,WAAA;EACA,aAAA;EACA,UAAA;AAszCR;AArzCQ;EACI,WAAA;EACA,iBAAA;EACA,gBAAA;EACA,gBAAA;EACA,yCAAA;AAuzCZ;AAtzCY;EACI,sBAAA;AAwzChB;AArzCY;EAVJ;IAWQ,oBAAA;EAwzCd;AACF;AAvzCY;EACI,gBAAA;AAyzChB;AAtzCgB;EACI,UAAA;AAwzCpB;;AA5xCA;EACI,iBAAA;AA+xCJ;;AA5xCA;EACI,yBAAA;EACA,mBAAA;AA+xCJ;AA7xCI;EACI,aAAA;EACA,uCAAA;AA+xCR;AA7xCQ;EACI,aAAA;AA+xCZ;AA3xCI;EAEI,UAAA;EACA,wCAAA;EACA,yBAAA;AA4xCR;AA1xCQ;EACI,yBAAA;AA4xCZ;;AAtxCI;EACI,eAAA;EACA,kBAAA;EACA,eAAA;EACA,mCAAA;AAyxCR;AAvxCQ;EACI,WAAA;AAyxCZ;AAtxCQ;EAVJ;IAWQ,UAAA;EAyxCV;AACF;;AArxCI;EACI,2CAAA;EACA,WAAA;AAwxCR;AArxCI;EACI,cAAA;AAuxCR;;AAnxCA;EACI,iBAAA;AAsxCJ","sourcesContent":["/*\n! tailwindcss v3.1.8 | MIT License | https://tailwindcss.com\n*/\n\n/*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box;\n  /* 1 */\n  border-width: 0;\n  /* 2 */\n  border-style: solid;\n  /* 2 */\n  border-color: #e5e7eb;\n  /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n*/\n\nhtml {\n  line-height: 1.5;\n  /* 1 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */\n  -moz-tab-size: 4;\n  /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4;\n  /* 3 */\n  font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  /* 4 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0;\n  /* 1 */\n  line-height: inherit;\n  /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0;\n  /* 1 */\n  color: inherit;\n  /* 2 */\n  border-top-width: 1px;\n  /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font family by default.\n2. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n  /* 1 */\n  font-size: 1em;\n  /* 2 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0;\n  /* 1 */\n  border-color: inherit;\n  /* 2 */\n  border-collapse: collapse;\n  /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n  /* 1 */\n  font-size: 100%;\n  /* 1 */\n  font-weight: inherit;\n  /* 1 */\n  line-height: inherit;\n  /* 1 */\n  color: inherit;\n  /* 1 */\n  margin: 0;\n  /* 2 */\n  padding: 0;\n  /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  -webkit-appearance: button;\n  /* 1 */\n  background-color: transparent;\n  /* 2 */\n  background-image: none;\n  /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  outline-offset: -2px;\n  /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block;\n  /* 1 */\n  vertical-align: middle;\n  /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::-webkit-backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n::backdrop {\n  --tw-border-spacing-x: 0;\n  --tw-border-spacing-y: 0;\n  --tw-translate-x: 0;\n  --tw-translate-y: 0;\n  --tw-rotate: 0;\n  --tw-skew-x: 0;\n  --tw-skew-y: 0;\n  --tw-scale-x: 1;\n  --tw-scale-y: 1;\n  --tw-pan-x:  ;\n  --tw-pan-y:  ;\n  --tw-pinch-zoom:  ;\n  --tw-scroll-snap-strictness: proximity;\n  --tw-ordinal:  ;\n  --tw-slashed-zero:  ;\n  --tw-numeric-figure:  ;\n  --tw-numeric-spacing:  ;\n  --tw-numeric-fraction:  ;\n  --tw-ring-inset:  ;\n  --tw-ring-offset-width: 0px;\n  --tw-ring-offset-color: #fff;\n  --tw-ring-color: rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow: 0 0 #0000;\n  --tw-ring-shadow: 0 0 #0000;\n  --tw-shadow: 0 0 #0000;\n  --tw-shadow-colored: 0 0 #0000;\n  --tw-blur:  ;\n  --tw-brightness:  ;\n  --tw-contrast:  ;\n  --tw-grayscale:  ;\n  --tw-hue-rotate:  ;\n  --tw-invert:  ;\n  --tw-saturate:  ;\n  --tw-sepia:  ;\n  --tw-drop-shadow:  ;\n  --tw-backdrop-blur:  ;\n  --tw-backdrop-brightness:  ;\n  --tw-backdrop-contrast:  ;\n  --tw-backdrop-grayscale:  ;\n  --tw-backdrop-hue-rotate:  ;\n  --tw-backdrop-invert:  ;\n  --tw-backdrop-opacity:  ;\n  --tw-backdrop-saturate:  ;\n  --tw-backdrop-sepia:  ;\n}\n\n.container {\n  width: 100%;\n}\n\n@media (min-width: 640px) {\n  .container {\n    max-width: 640px;\n  }\n}\n\n@media (min-width: 768px) {\n  .container {\n    max-width: 768px;\n  }\n}\n\n@media (min-width: 1024px) {\n  .container {\n    max-width: 1024px;\n  }\n}\n\n@media (min-width: 1280px) {\n  .container {\n    max-width: 1280px;\n  }\n}\n\n@media (min-width: 1536px) {\n  .container {\n    max-width: 1536px;\n  }\n}\n\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n}\n\n.absolute {\n  position: absolute;\n}\n\n.relative {\n  position: relative;\n}\n\n.inset-y-0 {\n  top: 0px;\n  bottom: 0px;\n}\n\n.left-0 {\n  left: 0px;\n}\n\n.right-0 {\n  right: 0px;\n}\n\n.top-0 {\n  top: 0px;\n}\n\n.mx-auto {\n  margin-left: auto;\n  margin-right: auto;\n}\n\n.mx-3 {\n  margin-left: 0.75rem;\n  margin-right: 0.75rem;\n}\n\n.mt-4 {\n  margin-top: 1rem;\n}\n\n.mt-\\[2rem\\] {\n  margin-top: 2rem;\n}\n\n.mt-2 {\n  margin-top: 0.5rem;\n}\n\n.mt-3 {\n  margin-top: 0.75rem;\n}\n\n.mt-\\[250px\\] {\n  margin-top: 250px;\n}\n\n.mt-\\[300px\\] {\n  margin-top: 300px;\n}\n\n.mt-\\[150px\\] {\n  margin-top: 150px;\n}\n\n.mt-\\[180px\\] {\n  margin-top: 180px;\n}\n\n.mt-\\[200px\\] {\n  margin-top: 200px;\n}\n\n.mt-\\[1rem\\] {\n  margin-top: 1rem;\n}\n\n.mb-\\[1rem\\] {\n  margin-bottom: 1rem;\n}\n\n.block {\n  display: block;\n}\n\n.inline-block {\n  display: inline-block;\n}\n\n.flex {\n  display: flex;\n}\n\n.inline-flex {\n  display: inline-flex;\n}\n\n.h-full {\n  height: 100%;\n}\n\n.h-5 {\n  height: 1.25rem;\n}\n\n.h-\\[1\\.5rem\\] {\n  height: 1.5rem;\n}\n\n.h-\\[2rem\\] {\n  height: 2rem;\n}\n\n.min-h-\\[400px\\] {\n  min-height: 400px;\n}\n\n.min-h-\\[250px\\] {\n  min-height: 250px;\n}\n\n.min-h-\\[150px\\] {\n  min-height: 150px;\n}\n\n.min-h-\\[200px\\] {\n  min-height: 200px;\n}\n\n.min-h-fit {\n  min-height: -webkit-fit-content;\n  min-height: -moz-fit-content;\n  min-height: fit-content;\n}\n\n.w-full {\n  width: 100%;\n}\n\n.w-5 {\n  width: 1.25rem;\n}\n\n.w-\\[1\\.5rem\\] {\n  width: 1.5rem;\n}\n\n.max-w-\\[800px\\] {\n  max-width: 800px;\n}\n\n.max-w-\\[400px\\] {\n  max-width: 400px;\n}\n\n.max-w-\\[700px\\] {\n  max-width: 700px;\n}\n\n.flex-1 {\n  flex: 1 1 0%;\n}\n\n.cursor-pointer {\n  cursor: pointer;\n}\n\n.flex-col {\n  flex-direction: column;\n}\n\n.flex-wrap {\n  flex-wrap: wrap;\n}\n\n.items-center {\n  align-items: center;\n}\n\n.justify-center {\n  justify-content: center;\n}\n\n.justify-evenly {\n  justify-content: space-evenly;\n}\n\n.gap-1 {\n  gap: 0.25rem;\n}\n\n.gap-2 {\n  gap: 0.5rem;\n}\n\n.gap-\\[2px\\] {\n  gap: 2px;\n}\n\n.gap-\\[1\\.5rem\\] {\n  gap: 1.5rem;\n}\n\n.gap-\\[2rem\\] {\n  gap: 2rem;\n}\n\n.gap-3 {\n  gap: 0.75rem;\n}\n\n.gap-\\[\\.5rem\\] {\n  gap: .5rem;\n}\n\n.gap-\\[1rem\\] {\n  gap: 1rem;\n}\n\n.gap-\\[3rem\\] {\n  gap: 3rem;\n}\n\n.gap-\\[10px\\] {\n  gap: 10px;\n}\n\n.self-start {\n  align-self: flex-start;\n}\n\n.justify-self-start {\n  justify-self: start;\n}\n\n.overflow-hidden {\n  overflow: hidden;\n}\n\n.rounded-md {\n  border-radius: 0.375rem;\n}\n\n.rounded-sm {\n  border-radius: 0.125rem;\n}\n\n.rounded-full {\n  border-radius: 9999px;\n}\n\n.rounded-lg {\n  border-radius: 0.5rem;\n}\n\n.rounded-xl {\n  border-radius: 0.75rem;\n}\n\n.border {\n  border-width: 1px;\n}\n\n.border-t {\n  border-top-width: 1px;\n}\n\n.border-t-2 {\n  border-top-width: 2px;\n}\n\n.border-none {\n  border-style: none;\n}\n\n.border-slate-300 {\n  --tw-border-opacity: 1;\n  border-color: rgb(203 213 225 / var(--tw-border-opacity));\n}\n\n.border-slate-400 {\n  --tw-border-opacity: 1;\n  border-color: rgb(148 163 184 / var(--tw-border-opacity));\n}\n\n.border-cyan-600 {\n  --tw-border-opacity: 1;\n  border-color: rgb(8 145 178 / var(--tw-border-opacity));\n}\n\n.bg-slate-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(71 85 105 / var(--tw-bg-opacity));\n}\n\n.bg-white {\n  --tw-bg-opacity: 1;\n  background-color: rgb(255 255 255 / var(--tw-bg-opacity));\n}\n\n.bg-slate-800 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(30 41 59 / var(--tw-bg-opacity));\n}\n\n.bg-slate-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(148 163 184 / var(--tw-bg-opacity));\n}\n\n.bg-red-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(248 113 113 / var(--tw-bg-opacity));\n}\n\n.bg-gray-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(107 114 128 / var(--tw-bg-opacity));\n}\n\n.bg-slate-700 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(51 65 85 / var(--tw-bg-opacity));\n}\n\n.bg-slate-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(100 116 139 / var(--tw-bg-opacity));\n}\n\n.bg-red-500 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n}\n\n.bg-gray-600 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(75 85 99 / var(--tw-bg-opacity));\n}\n\n.bg-red-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(254 202 202 / var(--tw-bg-opacity));\n}\n\n.bg-blue-400 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(96 165 250 / var(--tw-bg-opacity));\n}\n\n.bg-blue-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(191 219 254 / var(--tw-bg-opacity));\n}\n\n.bg-slate-200 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(226 232 240 / var(--tw-bg-opacity));\n}\n\n.bg-slate-100 {\n  --tw-bg-opacity: 1;\n  background-color: rgb(241 245 249 / var(--tw-bg-opacity));\n}\n\n.fill-slate-300 {\n  fill: #cbd5e1;\n}\n\n.p-3 {\n  padding: 0.75rem;\n}\n\n.p-\\[1rem\\] {\n  padding: 1rem;\n}\n\n.p-1 {\n  padding: 0.25rem;\n}\n\n.p-2 {\n  padding: 0.5rem;\n}\n\n.px-\\[10px\\] {\n  padding-left: 10px;\n  padding-right: 10px;\n}\n\n.px-1 {\n  padding-left: 0.25rem;\n  padding-right: 0.25rem;\n}\n\n.px-3 {\n  padding-left: 0.75rem;\n  padding-right: 0.75rem;\n}\n\n.px-\\[1rem\\] {\n  padding-left: 1rem;\n  padding-right: 1rem;\n}\n\n.px-\\[\\.5rem\\] {\n  padding-left: .5rem;\n  padding-right: .5rem;\n}\n\n.py-\\[\\.15rem\\] {\n  padding-top: .15rem;\n  padding-bottom: .15rem;\n}\n\n.py-2 {\n  padding-top: 0.5rem;\n  padding-bottom: 0.5rem;\n}\n\n.py-\\[\\.25rem\\] {\n  padding-top: .25rem;\n  padding-bottom: .25rem;\n}\n\n.py-1 {\n  padding-top: 0.25rem;\n  padding-bottom: 0.25rem;\n}\n\n.px-2 {\n  padding-left: 0.5rem;\n  padding-right: 0.5rem;\n}\n\n.py-3 {\n  padding-top: 0.75rem;\n  padding-bottom: 0.75rem;\n}\n\n.py-\\[2px\\] {\n  padding-top: 2px;\n  padding-bottom: 2px;\n}\n\n.py-\\[6px\\] {\n  padding-top: 6px;\n  padding-bottom: 6px;\n}\n\n.pl-2 {\n  padding-left: 0.5rem;\n}\n\n.pl-9 {\n  padding-left: 2.25rem;\n}\n\n.pr-3 {\n  padding-right: 0.75rem;\n}\n\n.pt-3 {\n  padding-top: 0.75rem;\n}\n\n.pt-2 {\n  padding-top: 0.5rem;\n}\n\n.pb-\\[4rem\\] {\n  padding-bottom: 4rem;\n}\n\n.text-center {\n  text-align: center;\n}\n\n.text-3xl {\n  font-size: 1.875rem;\n  line-height: 2.25rem;\n}\n\n.text-lg {\n  font-size: 1.125rem;\n  line-height: 1.75rem;\n}\n\n.text-sm {\n  font-size: 0.875rem;\n  line-height: 1.25rem;\n}\n\n.text-xs {\n  font-size: 0.75rem;\n  line-height: 1rem;\n}\n\n.font-bold {\n  font-weight: 700;\n}\n\n.font-semibold {\n  font-weight: 600;\n}\n\n.uppercase {\n  text-transform: uppercase;\n}\n\n.capitalize {\n  text-transform: capitalize;\n}\n\n.tracking-wide {\n  letter-spacing: 0.025em;\n}\n\n.tracking-wider {\n  letter-spacing: 0.05em;\n}\n\n.text-slate-200 {\n  --tw-text-opacity: 1;\n  color: rgb(226 232 240 / var(--tw-text-opacity));\n}\n\n.text-slate-800 {\n  --tw-text-opacity: 1;\n  color: rgb(30 41 59 / var(--tw-text-opacity));\n}\n\n.text-green-200 {\n  --tw-text-opacity: 1;\n  color: rgb(187 247 208 / var(--tw-text-opacity));\n}\n\n.text-green-400 {\n  --tw-text-opacity: 1;\n  color: rgb(74 222 128 / var(--tw-text-opacity));\n}\n\n.text-green-300 {\n  --tw-text-opacity: 1;\n  color: rgb(134 239 172 / var(--tw-text-opacity));\n}\n\n.text-orange-300 {\n  --tw-text-opacity: 1;\n  color: rgb(253 186 116 / var(--tw-text-opacity));\n}\n\n.text-orange-400 {\n  --tw-text-opacity: 1;\n  color: rgb(251 146 60 / var(--tw-text-opacity));\n}\n\n.text-blue-300 {\n  --tw-text-opacity: 1;\n  color: rgb(147 197 253 / var(--tw-text-opacity));\n}\n\n.text-orange-500 {\n  --tw-text-opacity: 1;\n  color: rgb(249 115 22 / var(--tw-text-opacity));\n}\n\n.text-blue-500 {\n  --tw-text-opacity: 1;\n  color: rgb(59 130 246 / var(--tw-text-opacity));\n}\n\n.text-yellow-500 {\n  --tw-text-opacity: 1;\n  color: rgb(234 179 8 / var(--tw-text-opacity));\n}\n\n.text-slate-100 {\n  --tw-text-opacity: 1;\n  color: rgb(241 245 249 / var(--tw-text-opacity));\n}\n\n.shadow-sm {\n  --tw-shadow: 0 1px 2px 0 rgb(0 0 0 / 0.05);\n  --tw-shadow-colored: 0 1px 2px 0 var(--tw-shadow-color);\n  box-shadow: var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}\n\n.outline-2 {\n  outline-width: 2px;\n}\n\n.outline-1 {\n  outline-width: 1px;\n}\n\n.outline-offset-0 {\n  outline-offset: 0px;\n}\n\n.outline-offset-1 {\n  outline-offset: 1px;\n}\n\n.outline-offset-2 {\n  outline-offset: 2px;\n}\n\n.outline-blue-500 {\n  outline-color: #3b82f6;\n}\n\n.outline-cyan-600 {\n  outline-color: #0891b2;\n}\n\n.placeholder\\:capitalize::-moz-placeholder {\n  text-transform: capitalize;\n}\n\n.placeholder\\:capitalize::placeholder {\n  text-transform: capitalize;\n}\n\n.placeholder\\:italic::-moz-placeholder {\n  font-style: italic;\n}\n\n.placeholder\\:italic::placeholder {\n  font-style: italic;\n}\n\n.placeholder\\:text-slate-400::-moz-placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(148 163 184 / var(--tw-text-opacity));\n}\n\n.placeholder\\:text-slate-400::placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(148 163 184 / var(--tw-text-opacity));\n}\n\n.placeholder\\:text-slate-800::-moz-placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(30 41 59 / var(--tw-text-opacity));\n}\n\n.placeholder\\:text-slate-800::placeholder {\n  --tw-text-opacity: 1;\n  color: rgb(30 41 59 / var(--tw-text-opacity));\n}\n\n.hover\\:bg-slate-500:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(100 116 139 / var(--tw-bg-opacity));\n}\n\n.hover\\:bg-red-500:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(239 68 68 / var(--tw-bg-opacity));\n}\n\n.hover\\:bg-blue-500:hover {\n  --tw-bg-opacity: 1;\n  background-color: rgb(59 130 246 / var(--tw-bg-opacity));\n}\n\n.focus\\:border-none:focus {\n  border-style: none;\n}\n\n.focus\\:border-sky-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(14 165 233 / var(--tw-border-opacity));\n}\n\n.focus\\:border-blue-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(59 130 246 / var(--tw-border-opacity));\n}\n\n.focus\\:border-blue-400:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(96 165 250 / var(--tw-border-opacity));\n}\n\n.focus\\:border-slate-400:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(148 163 184 / var(--tw-border-opacity));\n}\n\n.focus\\:border-slate-500:focus {\n  --tw-border-opacity: 1;\n  border-color: rgb(100 116 139 / var(--tw-border-opacity));\n}\n\n.focus\\:outline-none:focus {\n  outline: 2px solid transparent;\n  outline-offset: 2px;\n}\n\n.focus\\:outline:focus {\n  outline-style: solid;\n}\n\n.focus\\:outline-1:focus {\n  outline-width: 1px;\n}\n\n.focus\\:outline-\\[1px\\]:focus {\n  outline-width: 1px;\n}\n\n.focus\\:outline-slate-600:focus {\n  outline-color: #475569;\n}\n\n.focus\\:ring-1:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(1px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\n\n.focus\\:ring:focus {\n  --tw-ring-offset-shadow: var(--tw-ring-inset) 0 0 0 var(--tw-ring-offset-width) var(--tw-ring-offset-color);\n  --tw-ring-shadow: var(--tw-ring-inset) 0 0 0 calc(3px + var(--tw-ring-offset-width)) var(--tw-ring-color);\n  box-shadow: var(--tw-ring-offset-shadow), var(--tw-ring-shadow), var(--tw-shadow, 0 0 #0000);\n}\n\n.focus\\:ring-sky-500:focus {\n  --tw-ring-opacity: 1;\n  --tw-ring-color: rgb(14 165 233 / var(--tw-ring-opacity));\n}\n\n@media (min-width: 640px) {\n  .sm\\:gap-\\[2rem\\] {\n    gap: 2rem;\n  }\n\n  .sm\\:p-0 {\n    padding: 0px;\n  }\n\n  .sm\\:px-0 {\n    padding-left: 0px;\n    padding-right: 0px;\n  }\n\n  .sm\\:text-sm {\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n  }\n}\n\n@media (min-width: 768px) {\n  .md\\:w-\\[600px\\] {\n    width: 600px;\n  }\n}\n\n@media (min-width: 1024px) {\n  .lg\\:w-\\[75px\\] {\n    width: 75px;\n  }\n\n  .lg\\:w-\\[750px\\] {\n    width: 750px;\n  }\n\n  .lg\\:w-\\[800px\\] {\n    width: 800px;\n  }\n\n  .lg\\:w-\\[8000px\\] {\n    width: 8000px;\n  }\n\n  .lg\\:w-\\[500px\\] {\n    width: 500px;\n  }\n\n  .lg\\:justify-evenly {\n    justify-content: space-evenly;\n  }\n}\r\n","@use './index.css';\r\n\r\n[data-tab] {\r\n    .tab-content {\r\n        display: none;\r\n        position: absolute;\r\n        left: 0;\r\n        top: 85%;\r\n        width: 100%;\r\n        padding: 1rem;\r\n        z-index: 1;\r\n        .fields {\r\n            width: 100%;\r\n            max-height: 120px;\r\n            overflow: hidden;\r\n            overflow-y: auto;\r\n            box-shadow: 0 4 7px rgba(50, 64, 94, 0.2);\r\n            span:focus {\r\n                outline: 1px solid red;\r\n            }\r\n\r\n            @media (min-width: 720px) {\r\n                padding-right: 100px;\r\n            }\r\n            [data-key-value-pair] {\r\n                margin: 0.5rem 0;\r\n                // width: 100%;\r\n\r\n                input {\r\n                    width: 50%;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // .tab-content::before {\r\n    //     position: absolute;\r\n    //     left: -2.5%;\r\n    //     width: 100%;\r\n    //     height: 100%;\r\n    //     content: '';\r\n    //     background-color: inherit;\r\n    //     top: 0;\r\n    //     z-index: -1;\r\n    // }\r\n    // .tab-content::after {\r\n    //     position: absolute;\r\n    //     right: -57%;\r\n    //     width: 100%;\r\n    //     height: 100%;\r\n    //     content: '';\r\n    //     background-color: inherit;\r\n    //     top: 0;\r\n    //     z-index: -1;\r\n    // }\r\n}\r\n\r\n#root:has(#bodyTab.active) .response-class {\r\n    margin-top: 180px;\r\n}\r\n\r\n[data-response-tabs] {\r\n    color: rgb(234, 234, 234);\r\n    letter-spacing: 1px;\r\n\r\n    > * {\r\n        opacity: 0.85;\r\n        transition: transform 200ms ease-in-out;\r\n\r\n        &:hover {\r\n            opacity: 0.95;\r\n        }\r\n    }\r\n\r\n    .active {\r\n        // color: ;\r\n        opacity: 1;\r\n        border-bottom: 2px solid rgb(48, 48, 68);\r\n        color: rgb(234, 250, 255);\r\n\r\n        &:hover {\r\n            color: rgb(246, 251, 252);\r\n        }\r\n    }\r\n}\r\n\r\n[data-tab] {\r\n    .title {\r\n        padding: 0 1rem;\r\n        border-radius: 3px;\r\n        cursor: pointer;\r\n        transition: color 250ms ease-in-out;\r\n\r\n        &:hover {\r\n            color: #fff;\r\n        }\r\n\r\n        @media (max-width: 600px) {\r\n            padding: 0;\r\n        }\r\n    }\r\n}\r\n[data-tab].active {\r\n    .title {\r\n        border-bottom: 2px solid rgb(201, 199, 199);\r\n        color: #fff;\r\n    }\r\n\r\n    .tab-content {\r\n        display: block;\r\n    }\r\n}\r\n\r\n.cm-gutters {\r\n    min-height: 250px;\r\n}\r\n"],"sourceRoot":""}]);
// Exports
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);


/***/ }),

/***/ "./src/css/main.scss":
/*!***************************!*\
  !*** ./src/css/main.scss ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleDomAPI.js */ "./node_modules/style-loader/dist/runtime/styleDomAPI.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertBySelector.js */ "./node_modules/style-loader/dist/runtime/insertBySelector.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js */ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/insertStyleElement.js */ "./node_modules/style-loader/dist/runtime/insertStyleElement.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4__);
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/styleTagTransform.js */ "./node_modules/style-loader/dist/runtime/styleTagTransform.js");
/* harmony import */ var _node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./main.scss */ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/css/main.scss");

      
      
      
      
      
      
      
      
      

var options = {};

options.styleTagTransform = (_node_modules_style_loader_dist_runtime_styleTagTransform_js__WEBPACK_IMPORTED_MODULE_5___default());
options.setAttributes = (_node_modules_style_loader_dist_runtime_setAttributesWithoutAttributes_js__WEBPACK_IMPORTED_MODULE_3___default());

      options.insert = _node_modules_style_loader_dist_runtime_insertBySelector_js__WEBPACK_IMPORTED_MODULE_2___default().bind(null, "head");
    
options.domAPI = (_node_modules_style_loader_dist_runtime_styleDomAPI_js__WEBPACK_IMPORTED_MODULE_1___default());
options.insertStyleElement = (_node_modules_style_loader_dist_runtime_insertStyleElement_js__WEBPACK_IMPORTED_MODULE_4___default());

var update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_6__["default"], options);




       /* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_6__["default"] && _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals ? _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_6__["default"].locals : undefined);


/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module) => {

"use strict";


var stylesInDOM = [];

function getIndexByIdentifier(identifier) {
  var result = -1;

  for (var i = 0; i < stylesInDOM.length; i++) {
    if (stylesInDOM[i].identifier === identifier) {
      result = i;
      break;
    }
  }

  return result;
}

function modulesToDom(list, options) {
  var idCountMap = {};
  var identifiers = [];

  for (var i = 0; i < list.length; i++) {
    var item = list[i];
    var id = options.base ? item[0] + options.base : item[0];
    var count = idCountMap[id] || 0;
    var identifier = "".concat(id, " ").concat(count);
    idCountMap[id] = count + 1;
    var indexByIdentifier = getIndexByIdentifier(identifier);
    var obj = {
      css: item[1],
      media: item[2],
      sourceMap: item[3],
      supports: item[4],
      layer: item[5]
    };

    if (indexByIdentifier !== -1) {
      stylesInDOM[indexByIdentifier].references++;
      stylesInDOM[indexByIdentifier].updater(obj);
    } else {
      var updater = addElementStyle(obj, options);
      options.byIndex = i;
      stylesInDOM.splice(i, 0, {
        identifier: identifier,
        updater: updater,
        references: 1
      });
    }

    identifiers.push(identifier);
  }

  return identifiers;
}

function addElementStyle(obj, options) {
  var api = options.domAPI(options);
  api.update(obj);

  var updater = function updater(newObj) {
    if (newObj) {
      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap && newObj.supports === obj.supports && newObj.layer === obj.layer) {
        return;
      }

      api.update(obj = newObj);
    } else {
      api.remove();
    }
  };

  return updater;
}

module.exports = function (list, options) {
  options = options || {};
  list = list || [];
  var lastIdentifiers = modulesToDom(list, options);
  return function update(newList) {
    newList = newList || [];

    for (var i = 0; i < lastIdentifiers.length; i++) {
      var identifier = lastIdentifiers[i];
      var index = getIndexByIdentifier(identifier);
      stylesInDOM[index].references--;
    }

    var newLastIdentifiers = modulesToDom(newList, options);

    for (var _i = 0; _i < lastIdentifiers.length; _i++) {
      var _identifier = lastIdentifiers[_i];

      var _index = getIndexByIdentifier(_identifier);

      if (stylesInDOM[_index].references === 0) {
        stylesInDOM[_index].updater();

        stylesInDOM.splice(_index, 1);
      }
    }

    lastIdentifiers = newLastIdentifiers;
  };
};

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertBySelector.js":
/*!********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertBySelector.js ***!
  \********************************************************************/
/***/ ((module) => {

"use strict";


var memo = {};
/* istanbul ignore next  */

function getTarget(target) {
  if (typeof memo[target] === "undefined") {
    var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself

    if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
      try {
        // This will throw an exception if access to iframe is blocked
        // due to cross-origin restrictions
        styleTarget = styleTarget.contentDocument.head;
      } catch (e) {
        // istanbul ignore next
        styleTarget = null;
      }
    }

    memo[target] = styleTarget;
  }

  return memo[target];
}
/* istanbul ignore next  */


function insertBySelector(insert, style) {
  var target = getTarget(insert);

  if (!target) {
    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");
  }

  target.appendChild(style);
}

module.exports = insertBySelector;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/insertStyleElement.js":
/*!**********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/insertStyleElement.js ***!
  \**********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function insertStyleElement(options) {
  var element = document.createElement("style");
  options.setAttributes(element, options.attributes);
  options.insert(element, options.options);
  return element;
}

module.exports = insertStyleElement;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js ***!
  \**********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


/* istanbul ignore next  */
function setAttributesWithoutAttributes(styleElement) {
  var nonce =  true ? __webpack_require__.nc : 0;

  if (nonce) {
    styleElement.setAttribute("nonce", nonce);
  }
}

module.exports = setAttributesWithoutAttributes;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleDomAPI.js":
/*!***************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleDomAPI.js ***!
  \***************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function apply(styleElement, options, obj) {
  var css = "";

  if (obj.supports) {
    css += "@supports (".concat(obj.supports, ") {");
  }

  if (obj.media) {
    css += "@media ".concat(obj.media, " {");
  }

  var needLayer = typeof obj.layer !== "undefined";

  if (needLayer) {
    css += "@layer".concat(obj.layer.length > 0 ? " ".concat(obj.layer) : "", " {");
  }

  css += obj.css;

  if (needLayer) {
    css += "}";
  }

  if (obj.media) {
    css += "}";
  }

  if (obj.supports) {
    css += "}";
  }

  var sourceMap = obj.sourceMap;

  if (sourceMap && typeof btoa !== "undefined") {
    css += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), " */");
  } // For old IE

  /* istanbul ignore if  */


  options.styleTagTransform(css, styleElement, options.options);
}

function removeStyleElement(styleElement) {
  // istanbul ignore if
  if (styleElement.parentNode === null) {
    return false;
  }

  styleElement.parentNode.removeChild(styleElement);
}
/* istanbul ignore next  */


function domAPI(options) {
  var styleElement = options.insertStyleElement(options);
  return {
    update: function update(obj) {
      apply(styleElement, options, obj);
    },
    remove: function remove() {
      removeStyleElement(styleElement);
    }
  };
}

module.exports = domAPI;

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/styleTagTransform.js":
/*!*********************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/styleTagTransform.js ***!
  \*********************************************************************/
/***/ ((module) => {

"use strict";


/* istanbul ignore next  */
function styleTagTransform(css, styleElement) {
  if (styleElement.styleSheet) {
    styleElement.styleSheet.cssText = css;
  } else {
    while (styleElement.firstChild) {
      styleElement.removeChild(styleElement.firstChild);
    }

    styleElement.appendChild(document.createTextNode(css));
  }
}

module.exports = styleTagTransform;

/***/ }),

/***/ "./node_modules/@codemirror/autocomplete/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@codemirror/autocomplete/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CompletionContext": () => (/* binding */ CompletionContext),
/* harmony export */   "acceptCompletion": () => (/* binding */ acceptCompletion),
/* harmony export */   "autocompletion": () => (/* binding */ autocompletion),
/* harmony export */   "clearSnippet": () => (/* binding */ clearSnippet),
/* harmony export */   "closeCompletion": () => (/* binding */ closeCompletion),
/* harmony export */   "completeAnyWord": () => (/* binding */ completeAnyWord),
/* harmony export */   "completeFromList": () => (/* binding */ completeFromList),
/* harmony export */   "completionKeymap": () => (/* binding */ completionKeymap),
/* harmony export */   "completionStatus": () => (/* binding */ completionStatus),
/* harmony export */   "currentCompletions": () => (/* binding */ currentCompletions),
/* harmony export */   "ifIn": () => (/* binding */ ifIn),
/* harmony export */   "ifNotIn": () => (/* binding */ ifNotIn),
/* harmony export */   "moveCompletionSelection": () => (/* binding */ moveCompletionSelection),
/* harmony export */   "nextSnippetField": () => (/* binding */ nextSnippetField),
/* harmony export */   "prevSnippetField": () => (/* binding */ prevSnippetField),
/* harmony export */   "snippet": () => (/* binding */ snippet),
/* harmony export */   "snippetCompletion": () => (/* binding */ snippetCompletion),
/* harmony export */   "snippetKeymap": () => (/* binding */ snippetKeymap),
/* harmony export */   "startCompletion": () => (/* binding */ startCompletion)
/* harmony export */ });
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/text */ "./node_modules/@codemirror/text/dist/index.js");
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var _codemirror_tooltip__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/tooltip */ "./node_modules/@codemirror/tooltip/dist/index.js");
/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/language */ "./node_modules/@codemirror/language/dist/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e3) { throw _e3; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e4) { didErr = true; err = _e4; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }






/**
An instance of this is passed to completion source functions.
*/
var CompletionContext = /*#__PURE__*/function () {
  /**
  Create a new completion context. (Mostly useful for testing
  completion sources—in the editor, the extension will create
  these for you.)
  */
  function CompletionContext(
  /**
  The editor state that the completion happens in.
  */
  state,
  /**
  The position at which the completion is happening.
  */
  pos,
  /**
  Indicates whether completion was activated explicitly, or
  implicitly by typing. The usual way to respond to this is to
  only return completions when either there is part of a
  completable entity before the cursor, or `explicit` is true.
  */
  explicit) {
    _classCallCheck(this, CompletionContext);
    this.state = state;
    this.pos = pos;
    this.explicit = explicit;
    /**
    @internal
    */
    this.abortListeners = [];
  }
  /**
  Get the extent, content, and (if there is a token) type of the
  token before `this.pos`.
  */
  _createClass(CompletionContext, [{
    key: "tokenBefore",
    value: function tokenBefore(types) {
      var token = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(this.state).resolve(this.pos, -1);
      while (token && types.indexOf(token.name) < 0) {
        token = token.parent;
      }
      return token ? {
        from: token.from,
        to: this.pos,
        text: this.state.sliceDoc(token.from, this.pos),
        type: token.type
      } : null;
    }
    /**
    Get the match of the given expression directly before the
    cursor.
    */
  }, {
    key: "matchBefore",
    value: function matchBefore(expr) {
      var line = this.state.doc.lineAt(this.pos);
      var start = Math.max(line.from, this.pos - 250);
      var str = line.text.slice(start - line.from, this.pos - line.from);
      var found = str.search(ensureAnchor(expr, false));
      return found < 0 ? null : {
        from: start + found,
        to: this.pos,
        text: str.slice(found)
      };
    }
    /**
    Yields true when the query has been aborted. Can be useful in
    asynchronous queries to avoid doing work that will be ignored.
    */
  }, {
    key: "aborted",
    get: function get() {
      return this.abortListeners == null;
    }
    /**
    Allows you to register abort handlers, which will be called when
    the query is
    [aborted](https://codemirror.net/6/docs/ref/#autocomplete.CompletionContext.aborted).
    */
  }, {
    key: "addEventListener",
    value: function addEventListener(type, listener) {
      if (type == "abort" && this.abortListeners) this.abortListeners.push(listener);
    }
  }]);
  return CompletionContext;
}();
function toSet(chars) {
  var flat = Object.keys(chars).join("");
  var words = /\w/.test(flat);
  if (words) flat = flat.replace(/\w/g, "");
  return "[".concat(words ? "\\w" : "").concat(flat.replace(/[^\w\s]/g, "\\$&"), "]");
}
function prefixMatch(options) {
  var first = Object.create(null),
    rest = Object.create(null);
  var _iterator = _createForOfIteratorHelper(options),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var label = _step.value.label;
      first[label[0]] = true;
      for (var i = 1; i < label.length; i++) {
        rest[label[i]] = true;
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var source = toSet(first) + toSet(rest) + "*$";
  return [new RegExp("^" + source), new RegExp(source)];
}
/**
Given a a fixed array of options, return an autocompleter that
completes them.
*/
function completeFromList(list) {
  var options = list.map(function (o) {
    return typeof o == "string" ? {
      label: o
    } : o;
  });
  var _ref = options.every(function (o) {
      return /^\w+$/.test(o.label);
    }) ? [/\w*$/, /\w+$/] : prefixMatch(options),
    _ref2 = _slicedToArray(_ref, 2),
    span = _ref2[0],
    match = _ref2[1];
  return function (context) {
    var token = context.matchBefore(match);
    return token || context.explicit ? {
      from: token ? token.from : context.pos,
      options: options,
      span: span
    } : null;
  };
}
/**
Wrap the given completion source so that it will only fire when the
cursor is in a syntax node with one of the given names.
*/
function ifIn(nodes, source) {
  return function (context) {
    for (var pos = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(context.state).resolve(context.pos, -1); pos; pos = pos.parent) {
      if (nodes.indexOf(pos.name) > -1) return source(context);
    }
    return null;
  };
}
/**
Wrap the given completion source so that it will not fire when the
cursor is in a syntax node with one of the given names.
*/
function ifNotIn(nodes, source) {
  return function (context) {
    for (var pos = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.syntaxTree)(context.state).resolve(context.pos, -1); pos; pos = pos.parent) {
      if (nodes.indexOf(pos.name) > -1) return null;
    }
    return source(context);
  };
}
var Option = /*#__PURE__*/_createClass(function Option(completion, source, match) {
  _classCallCheck(this, Option);
  this.completion = completion;
  this.source = source;
  this.match = match;
});
function cur(state) {
  return state.selection.main.head;
}
// Make sure the given regexp has a $ at its end and, if `start` is
// true, a ^ at its start.
function ensureAnchor(expr, start) {
  var _a;
  var source = expr.source;
  var addStart = start && source[0] != "^",
    addEnd = source[source.length - 1] != "$";
  if (!addStart && !addEnd) return expr;
  return new RegExp("".concat(addStart ? "^" : "", "(?:").concat(source, ")").concat(addEnd ? "$" : ""), (_a = expr.flags) !== null && _a !== void 0 ? _a : expr.ignoreCase ? "i" : "");
}
function applyCompletion(view, option) {
  var apply = option.completion.apply || option.completion.label;
  var result = option.source;
  if (typeof apply == "string") {
    view.dispatch({
      changes: {
        from: result.from,
        to: result.to,
        insert: apply
      },
      selection: {
        anchor: result.from + apply.length
      }
    });
  } else {
    apply(view, option.completion, result.from, result.to);
  }
}
var SourceCache = /*@__PURE__*/new WeakMap();
function asSource(source) {
  if (!Array.isArray(source)) return source;
  var known = SourceCache.get(source);
  if (!known) SourceCache.set(source, known = completeFromList(source));
  return known;
}

// A pattern matcher for fuzzy completion matching. Create an instance
// once for a pattern, and then use that to match any number of
// completions.
var FuzzyMatcher = /*#__PURE__*/function () {
  function FuzzyMatcher(pattern) {
    _classCallCheck(this, FuzzyMatcher);
    this.pattern = pattern;
    this.chars = [];
    this.folded = [];
    // Buffers reused by calls to `match` to track matched character
    // positions.
    this.any = [];
    this.precise = [];
    this.byWord = [];
    for (var p = 0; p < pattern.length;) {
      var _char = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(pattern, p),
        size = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(_char);
      this.chars.push(_char);
      var part = pattern.slice(p, p + size),
        upper = part.toUpperCase();
      this.folded.push((0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(upper == part ? part.toLowerCase() : upper, 0));
      p += size;
    }
    this.astral = pattern.length != this.chars.length;
  }
  // Matches a given word (completion) against the pattern (input).
  // Will return null for no match, and otherwise an array that starts
  // with the match score, followed by any number of `from, to` pairs
  // indicating the matched parts of `word`.
  //
  // The score is a number that is more negative the worse the match
  // is. See `Penalty` above.
  _createClass(FuzzyMatcher, [{
    key: "match",
    value: function match(word) {
      if (this.pattern.length == 0) return [0];
      if (word.length < this.pattern.length) return null;
      var chars = this.chars,
        folded = this.folded,
        any = this.any,
        precise = this.precise,
        byWord = this.byWord;
      // For single-character queries, only match when they occur right
      // at the start
      if (chars.length == 1) {
        var first = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(word, 0);
        return first == chars[0] ? [0, 0, (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(first)] : first == folded[0] ? [-200 /* CaseFold */, 0, (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(first)] : null;
      }
      var direct = word.indexOf(this.pattern);
      if (direct == 0) return [0, 0, this.pattern.length];
      var len = chars.length,
        anyTo = 0;
      if (direct < 0) {
        for (var i = 0, e = Math.min(word.length, 200); i < e && anyTo < len;) {
          var next = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(word, i);
          if (next == chars[anyTo] || next == folded[anyTo]) any[anyTo++] = i;
          i += (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(next);
        }
        // No match, exit immediately
        if (anyTo < len) return null;
      }
      // This tracks the extent of the precise (non-folded, not
      // necessarily adjacent) match
      var preciseTo = 0;
      // Tracks whether there is a match that hits only characters that
      // appear to be starting words. `byWordFolded` is set to true when
      // a case folded character is encountered in such a match
      var byWordTo = 0,
        byWordFolded = false;
      // If we've found a partial adjacent match, these track its state
      var adjacentTo = 0,
        adjacentStart = -1,
        adjacentEnd = -1;
      var hasLower = /[a-z]/.test(word);
      // Go over the option's text, scanning for the various kinds of matches
      for (var _i2 = 0, _e2 = Math.min(word.length, 200), prevType = 0 /* NonWord */; _i2 < _e2 && byWordTo < len;) {
        var _next = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(word, _i2);
        if (direct < 0) {
          if (preciseTo < len && _next == chars[preciseTo]) precise[preciseTo++] = _i2;
          if (adjacentTo < len) {
            if (_next == chars[adjacentTo] || _next == folded[adjacentTo]) {
              if (adjacentTo == 0) adjacentStart = _i2;
              adjacentEnd = _i2;
              adjacentTo++;
            } else {
              adjacentTo = 0;
            }
          }
        }
        var ch = void 0,
          type = _next < 0xff ? _next >= 48 && _next <= 57 || _next >= 97 && _next <= 122 ? 2 /* Lower */ : _next >= 65 && _next <= 90 ? 1 /* Upper */ : 0 /* NonWord */ : (ch = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.fromCodePoint)(_next)) != ch.toLowerCase() ? 1 /* Upper */ : ch != ch.toUpperCase() ? 2 /* Lower */ : 0 /* NonWord */;
        if ((type == 1 /* Upper */ && hasLower || prevType == 0 /* NonWord */ && type != 0 /* NonWord */) && (chars[byWordTo] == _next || folded[byWordTo] == _next && (byWordFolded = true))) byWord[byWordTo++] = _i2;
        prevType = type;
        _i2 += (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(_next);
      }
      if (byWordTo == len && byWord[0] == 0) return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0), byWord, word);
      if (adjacentTo == len && adjacentStart == 0) return [-200 /* CaseFold */, 0, adjacentEnd];
      if (direct > -1) return [-700 /* NotStart */, direct, direct + this.pattern.length];
      if (adjacentTo == len) return [-200 /* CaseFold */ + -700 /* NotStart */, adjacentStart, adjacentEnd];
      if (byWordTo == len) return this.result(-100 /* ByWord */ + (byWordFolded ? -200 /* CaseFold */ : 0) + -700 /* NotStart */, byWord, word);
      return chars.length == 2 ? null : this.result((any[0] ? -700 /* NotStart */ : 0) + -200 /* CaseFold */ + -1100 /* Gap */, any, word);
    }
  }, {
    key: "result",
    value: function result(score, positions, word) {
      var result = [score],
        i = 1;
      var _iterator2 = _createForOfIteratorHelper(positions),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var pos = _step2.value;
          var to = pos + (this.astral ? (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointSize)((0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(word, pos)) : 1);
          if (i > 1 && result[i - 1] == pos) result[i - 1] = to;else {
            result[i++] = pos;
            result[i++] = to;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return result;
    }
  }]);
  return FuzzyMatcher;
}();
var completionConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({
  combine: function combine(configs) {
    return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.combineConfig)(configs, {
      activateOnTyping: true,
      override: null,
      maxRenderedOptions: 100,
      defaultKeymap: true
    }, {
      defaultKeymap: function defaultKeymap(a, b) {
        return a && b;
      }
    });
  }
});
var MaxInfoWidth = 300;
var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.EditorView.baseTheme({
  ".cm-tooltip.cm-tooltip-autocomplete": {
    "& > ul": {
      fontFamily: "monospace",
      whiteSpace: "nowrap",
      overflow: "auto",
      maxWidth_fallback: "700px",
      maxWidth: "min(700px, 95vw)",
      maxHeight: "10em",
      listStyle: "none",
      margin: 0,
      padding: 0,
      "& > li": {
        cursor: "pointer",
        padding: "1px 1em 1px 3px",
        lineHeight: 1.2
      },
      "& > li[aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      }
    }
  },
  ".cm-completionListIncompleteTop:before, .cm-completionListIncompleteBottom:after": {
    content: '"···"',
    opacity: 0.5,
    display: "block",
    textAlign: "center"
  },
  ".cm-tooltip.cm-completionInfo": {
    position: "absolute",
    padding: "3px 9px",
    width: "max-content",
    maxWidth: MaxInfoWidth + "px"
  },
  ".cm-completionInfo.cm-completionInfo-left": {
    right: "100%"
  },
  ".cm-completionInfo.cm-completionInfo-right": {
    left: "100%"
  },
  "&light .cm-snippetField": {
    backgroundColor: "#00000022"
  },
  "&dark .cm-snippetField": {
    backgroundColor: "#ffffff22"
  },
  ".cm-snippetFieldPosition": {
    verticalAlign: "text-top",
    width: 0,
    height: "1.15em",
    margin: "0 -0.7px -.7em",
    borderLeft: "1.4px dotted #888"
  },
  ".cm-completionMatchedText": {
    textDecoration: "underline"
  },
  ".cm-completionDetail": {
    marginLeft: "0.5em",
    fontStyle: "italic"
  },
  ".cm-completionIcon": {
    fontSize: "90%",
    width: ".8em",
    display: "inline-block",
    textAlign: "center",
    paddingRight: ".6em",
    opacity: "0.6"
  },
  ".cm-completionIcon-function, .cm-completionIcon-method": {
    "&:after": {
      content: "'ƒ'"
    }
  },
  ".cm-completionIcon-class": {
    "&:after": {
      content: "'○'"
    }
  },
  ".cm-completionIcon-interface": {
    "&:after": {
      content: "'◌'"
    }
  },
  ".cm-completionIcon-variable": {
    "&:after": {
      content: "'𝑥'"
    }
  },
  ".cm-completionIcon-constant": {
    "&:after": {
      content: "'𝐶'"
    }
  },
  ".cm-completionIcon-type": {
    "&:after": {
      content: "'𝑡'"
    }
  },
  ".cm-completionIcon-enum": {
    "&:after": {
      content: "'∪'"
    }
  },
  ".cm-completionIcon-property": {
    "&:after": {
      content: "'□'"
    }
  },
  ".cm-completionIcon-keyword": {
    "&:after": {
      content: "'\uD83D\uDD11\uFE0E'"
    } // Disable emoji rendering
  },

  ".cm-completionIcon-namespace": {
    "&:after": {
      content: "'▢'"
    }
  },
  ".cm-completionIcon-text": {
    "&:after": {
      content: "'abc'",
      fontSize: "50%",
      verticalAlign: "middle"
    }
  }
});
function createListBox(options, id, range) {
  var ul = document.createElement("ul");
  ul.id = id;
  ul.setAttribute("role", "listbox");
  ul.setAttribute("aria-expanded", "true");
  for (var i = range.from; i < range.to; i++) {
    var _icon$classList;
    var _options$i = options[i],
      completion = _options$i.completion,
      match = _options$i.match;
    var li = ul.appendChild(document.createElement("li"));
    li.id = id + "-" + i;
    var icon = li.appendChild(document.createElement("div"));
    icon.classList.add("cm-completionIcon");
    if (completion.type) (_icon$classList = icon.classList).add.apply(_icon$classList, _toConsumableArray(completion.type.split(/\s+/g).map(function (cls) {
      return "cm-completionIcon-" + cls;
    })));
    icon.setAttribute("aria-hidden", "true");
    var labelElt = li.appendChild(document.createElement("span"));
    labelElt.className = "cm-completionLabel";
    var label = completion.label,
      detail = completion.detail,
      off = 0;
    for (var j = 1; j < match.length;) {
      var from = match[j++],
        to = match[j++];
      if (from > off) labelElt.appendChild(document.createTextNode(label.slice(off, from)));
      var span = labelElt.appendChild(document.createElement("span"));
      span.appendChild(document.createTextNode(label.slice(from, to)));
      span.className = "cm-completionMatchedText";
      off = to;
    }
    if (off < label.length) labelElt.appendChild(document.createTextNode(label.slice(off)));
    if (detail) {
      var detailElt = li.appendChild(document.createElement("span"));
      detailElt.className = "cm-completionDetail";
      detailElt.textContent = detail;
    }
    li.setAttribute("role", "option");
  }
  if (range.from) ul.classList.add("cm-completionListIncompleteTop");
  if (range.to < options.length) ul.classList.add("cm-completionListIncompleteBottom");
  return ul;
}
function createInfoDialog(option, view) {
  var dom = document.createElement("div");
  dom.className = "cm-tooltip cm-completionInfo";
  var info = option.completion.info;
  if (typeof info == "string") {
    dom.textContent = info;
  } else {
    var content = info(option.completion);
    if (content.then) content.then(function (node) {
      return dom.appendChild(node);
    }, function (e) {
      return (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.logException)(view.state, e, "completion info");
    });else dom.appendChild(content);
  }
  return dom;
}
function rangeAroundSelected(total, selected, max) {
  if (total <= max) return {
    from: 0,
    to: total
  };
  if (selected <= total >> 1) {
    var _off = Math.floor(selected / max);
    return {
      from: _off * max,
      to: (_off + 1) * max
    };
  }
  var off = Math.floor((total - selected) / max);
  return {
    from: total - (off + 1) * max,
    to: total - off * max
  };
}
var CompletionTooltip = /*#__PURE__*/function () {
  function CompletionTooltip(view, stateField) {
    var _this = this;
    _classCallCheck(this, CompletionTooltip);
    this.view = view;
    this.stateField = stateField;
    this.info = null;
    this.placeInfo = {
      read: function read() {
        return _this.measureInfo();
      },
      write: function write(pos) {
        return _this.positionInfo(pos);
      },
      key: this
    };
    var cState = view.state.field(stateField);
    var _cState$open = cState.open,
      options = _cState$open.options,
      selected = _cState$open.selected;
    var config = view.state.facet(completionConfig);
    this.range = rangeAroundSelected(options.length, selected, config.maxRenderedOptions);
    this.dom = document.createElement("div");
    this.dom.className = "cm-tooltip-autocomplete";
    this.dom.addEventListener("mousedown", function (e) {
      for (var dom = e.target, match; dom && dom != _this.dom; dom = dom.parentNode) {
        if (dom.nodeName == "LI" && (match = /-(\d+)$/.exec(dom.id)) && +match[1] < options.length) {
          applyCompletion(view, options[+match[1]]);
          e.preventDefault();
          return;
        }
      }
    });
    this.list = this.dom.appendChild(createListBox(options, cState.id, this.range));
    this.list.addEventListener("scroll", function () {
      if (_this.info) _this.view.requestMeasure(_this.placeInfo);
    });
  }
  _createClass(CompletionTooltip, [{
    key: "mount",
    value: function mount() {
      this.updateSel();
    }
  }, {
    key: "update",
    value: function update(_update) {
      if (_update.state.field(this.stateField) != _update.startState.field(this.stateField)) this.updateSel();
    }
  }, {
    key: "positioned",
    value: function positioned() {
      if (this.info) this.view.requestMeasure(this.placeInfo);
    }
  }, {
    key: "updateSel",
    value: function updateSel() {
      var _this2 = this;
      var cState = this.view.state.field(this.stateField),
        open = cState.open;
      if (open.selected < this.range.from || open.selected >= this.range.to) {
        this.range = rangeAroundSelected(open.options.length, open.selected, this.view.state.facet(completionConfig).maxRenderedOptions);
        this.list.remove();
        this.list = this.dom.appendChild(createListBox(open.options, cState.id, this.range));
        this.list.addEventListener("scroll", function () {
          if (_this2.info) _this2.view.requestMeasure(_this2.placeInfo);
        });
      }
      if (this.updateSelectedOption(open.selected)) {
        if (this.info) {
          this.info.remove();
          this.info = null;
        }
        var option = open.options[open.selected];
        if (option.completion.info) {
          this.info = this.dom.appendChild(createInfoDialog(option, this.view));
          this.view.requestMeasure(this.placeInfo);
        }
      }
    }
  }, {
    key: "updateSelectedOption",
    value: function updateSelectedOption(selected) {
      var set = null;
      for (var opt = this.list.firstChild, i = this.range.from; opt; opt = opt.nextSibling, i++) {
        if (i == selected) {
          if (!opt.hasAttribute("aria-selected")) {
            opt.setAttribute("aria-selected", "true");
            set = opt;
          }
        } else {
          if (opt.hasAttribute("aria-selected")) opt.removeAttribute("aria-selected");
        }
      }
      if (set) scrollIntoView(this.list, set);
      return set;
    }
  }, {
    key: "measureInfo",
    value: function measureInfo() {
      var sel = this.dom.querySelector("[aria-selected]");
      if (!sel) return null;
      var rect = this.dom.getBoundingClientRect();
      var top = sel.getBoundingClientRect().top - rect.top;
      if (top < 0 || top > this.list.clientHeight - 10) return null;
      var left = this.view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_3__.Direction.RTL;
      var spaceLeft = rect.left,
        spaceRight = innerWidth - rect.right;
      if (left && spaceLeft < Math.min(MaxInfoWidth, spaceRight)) left = false;else if (!left && spaceRight < Math.min(MaxInfoWidth, spaceLeft)) left = true;
      return {
        top: top,
        left: left
      };
    }
  }, {
    key: "positionInfo",
    value: function positionInfo(pos) {
      if (this.info && pos) {
        this.info.style.top = pos.top + "px";
        this.info.classList.toggle("cm-completionInfo-left", pos.left);
        this.info.classList.toggle("cm-completionInfo-right", !pos.left);
      }
    }
  }]);
  return CompletionTooltip;
}(); // We allocate a new function instance every time the completion
// changes to force redrawing/repositioning of the tooltip
function completionTooltip(stateField) {
  return function (view) {
    return new CompletionTooltip(view, stateField);
  };
}
function scrollIntoView(container, element) {
  var parent = container.getBoundingClientRect();
  var self = element.getBoundingClientRect();
  if (self.top < parent.top) container.scrollTop -= parent.top - self.top;else if (self.bottom > parent.bottom) container.scrollTop += self.bottom - parent.bottom;
}
var MaxOptions = 300;
// Used to pick a preferred option when two options with the same
// label occur in the result.
function score(option) {
  return (option.boost || 0) * 100 + (option.apply ? 10 : 0) + (option.info ? 5 : 0) + (option.type ? 1 : 0);
}
function sortOptions(active, state) {
  var options = [],
    i = 0;
  var _iterator3 = _createForOfIteratorHelper(active),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var a = _step3.value;
      if (a.hasResult()) {
        if (a.result.filter === false) {
          var _iterator5 = _createForOfIteratorHelper(a.result.options),
            _step5;
          try {
            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
              var option = _step5.value;
              options.push(new Option(option, a, [1e9 - i++]));
            }
          } catch (err) {
            _iterator5.e(err);
          } finally {
            _iterator5.f();
          }
        } else {
          var matcher = new FuzzyMatcher(state.sliceDoc(a.from, a.to)),
            match = void 0;
          var _iterator6 = _createForOfIteratorHelper(a.result.options),
            _step6;
          try {
            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
              var _option = _step6.value;
              if (match = matcher.match(_option.label)) {
                if (_option.boost != null) match[0] += _option.boost;
                options.push(new Option(_option, a, match));
              }
            }
          } catch (err) {
            _iterator6.e(err);
          } finally {
            _iterator6.f();
          }
        }
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  options.sort(cmpOption);
  var result = [],
    prev = null;
  var _iterator4 = _createForOfIteratorHelper(options.sort(cmpOption)),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var opt = _step4.value;
      if (result.length == MaxOptions) break;
      if (!prev || prev.label != opt.completion.label || prev.detail != opt.completion.detail) result.push(opt);else if (score(opt.completion) > score(prev)) result[result.length - 1] = opt;
      prev = opt.completion;
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  return result;
}
var CompletionDialog = /*#__PURE__*/function () {
  function CompletionDialog(options, attrs, tooltip, timestamp, selected) {
    _classCallCheck(this, CompletionDialog);
    this.options = options;
    this.attrs = attrs;
    this.tooltip = tooltip;
    this.timestamp = timestamp;
    this.selected = selected;
  }
  _createClass(CompletionDialog, [{
    key: "setSelected",
    value: function setSelected(selected, id) {
      return selected == this.selected || selected >= this.options.length ? this : new CompletionDialog(this.options, makeAttrs(id, selected), this.tooltip, this.timestamp, selected);
    }
  }, {
    key: "map",
    value: function map(changes) {
      return new CompletionDialog(this.options, this.attrs, Object.assign(Object.assign({}, this.tooltip), {
        pos: changes.mapPos(this.tooltip.pos)
      }), this.timestamp, this.selected);
    }
  }], [{
    key: "build",
    value: function build(active, state, id, prev) {
      var options = sortOptions(active, state);
      if (!options.length) return null;
      var selected = 0;
      if (prev && prev.selected) {
        var selectedValue = prev.options[prev.selected].completion;
        for (var i = 0; i < options.length && !selected; i++) {
          if (options[i].completion == selectedValue) selected = i;
        }
      }
      return new CompletionDialog(options, makeAttrs(id, selected), {
        pos: active.reduce(function (a, b) {
          return b.hasResult() ? Math.min(a, b.from) : a;
        }, 1e8),
        create: completionTooltip(completionState)
      }, prev ? prev.timestamp : Date.now(), selected);
    }
  }]);
  return CompletionDialog;
}();
var CompletionState = /*#__PURE__*/function () {
  function CompletionState(active, id, open) {
    _classCallCheck(this, CompletionState);
    this.active = active;
    this.id = id;
    this.open = open;
  }
  _createClass(CompletionState, [{
    key: "update",
    value: function update(tr) {
      var _this3 = this;
      var state = tr.state,
        conf = state.facet(completionConfig);
      var sources = conf.override || state.languageDataAt("autocomplete", cur(state)).map(asSource);
      var active = sources.map(function (source) {
        var value = _this3.active.find(function (s) {
          return s.source == source;
        }) || new ActiveSource(source, _this3.active.some(function (a) {
          return a.state != 0;
        } /* Inactive */) ? 1 /* Pending */ : 0 /* Inactive */);
        return value.update(tr, conf);
      });
      if (active.length == this.active.length && active.every(function (a, i) {
        return a == _this3.active[i];
      })) active = this.active;
      var open = tr.selection || active.some(function (a) {
        return a.hasResult() && tr.changes.touchesRange(a.from, a.to);
      }) || !sameResults(active, this.active) ? CompletionDialog.build(active, state, this.id, this.open) : this.open && tr.docChanged ? this.open.map(tr.changes) : this.open;
      if (!open && active.every(function (a) {
        return a.state != 1;
      } /* Pending */) && active.some(function (a) {
        return a.hasResult();
      })) active = active.map(function (a) {
        return a.hasResult() ? new ActiveSource(a.source, 0 /* Inactive */) : a;
      });
      var _iterator7 = _createForOfIteratorHelper(tr.effects),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var effect = _step7.value;
          if (effect.is(setSelectedEffect)) open = open && open.setSelected(effect.value, this.id);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      return active == this.active && open == this.open ? this : new CompletionState(active, this.id, open);
    }
  }, {
    key: "tooltip",
    get: function get() {
      return this.open ? this.open.tooltip : null;
    }
  }, {
    key: "attrs",
    get: function get() {
      return this.open ? this.open.attrs : baseAttrs;
    }
  }], [{
    key: "start",
    value: function start() {
      return new CompletionState(none, "cm-ac-" + Math.floor(Math.random() * 2e6).toString(36), null);
    }
  }]);
  return CompletionState;
}();
function sameResults(a, b) {
  if (a == b) return true;
  for (var iA = 0, iB = 0;;) {
    while (iA < a.length && !a[iA].hasResult) {
      iA++;
    }
    while (iB < b.length && !b[iB].hasResult) {
      iB++;
    }
    var endA = iA == a.length,
      endB = iB == b.length;
    if (endA || endB) return endA == endB;
    if (a[iA++].result != b[iB++].result) return false;
  }
}
function makeAttrs(id, selected) {
  return {
    "aria-autocomplete": "list",
    "aria-activedescendant": id + "-" + selected,
    "aria-owns": id
  };
}
var baseAttrs = {
    "aria-autocomplete": "list"
  },
  none = [];
function cmpOption(a, b) {
  var dScore = b.match[0] - a.match[0];
  if (dScore) return dScore;
  var lA = a.completion.label,
    lB = b.completion.label;
  return lA < lB ? -1 : lA == lB ? 0 : 1;
}
var ActiveSource = /*#__PURE__*/function () {
  function ActiveSource(source, state) {
    var explicitPos = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
    _classCallCheck(this, ActiveSource);
    this.source = source;
    this.state = state;
    this.explicitPos = explicitPos;
  }
  _createClass(ActiveSource, [{
    key: "hasResult",
    value: function hasResult() {
      return false;
    }
  }, {
    key: "update",
    value: function update(tr, conf) {
      var event = tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Transaction.userEvent),
        value = this;
      if (event == "input" || event == "delete") value = value.handleUserEvent(tr, event, conf);else if (tr.docChanged) value = value.handleChange(tr);else if (tr.selection && value.state != 0 /* Inactive */) value = new ActiveSource(value.source, 0 /* Inactive */);
      var _iterator8 = _createForOfIteratorHelper(tr.effects),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var effect = _step8.value;
          if (effect.is(startCompletionEffect)) value = new ActiveSource(value.source, 1 /* Pending */, effect.value ? cur(tr.state) : -1);else if (effect.is(closeCompletionEffect)) value = new ActiveSource(value.source, 0 /* Inactive */);else if (effect.is(setActiveEffect)) {
            var _iterator9 = _createForOfIteratorHelper(effect.value),
              _step9;
            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var active = _step9.value;
                if (active.source == value.source) value = active;
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }
          }
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      return value;
    }
  }, {
    key: "handleUserEvent",
    value: function handleUserEvent(tr, type, conf) {
      return type == "delete" || !conf.activateOnTyping ? this.map(tr.changes) : new ActiveSource(this.source, 1 /* Pending */);
    }
  }, {
    key: "handleChange",
    value: function handleChange(tr) {
      return tr.changes.touchesRange(cur(tr.startState)) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);
    }
  }, {
    key: "map",
    value: function map(changes) {
      return changes.empty || this.explicitPos < 0 ? this : new ActiveSource(this.source, this.state, changes.mapPos(this.explicitPos));
    }
  }]);
  return ActiveSource;
}();
var ActiveResult = /*#__PURE__*/function (_ActiveSource) {
  _inherits(ActiveResult, _ActiveSource);
  var _super = _createSuper(ActiveResult);
  function ActiveResult(source, explicitPos, result, from, to, span) {
    var _this4;
    _classCallCheck(this, ActiveResult);
    _this4 = _super.call(this, source, 2 /* Result */, explicitPos);
    _this4.result = result;
    _this4.from = from;
    _this4.to = to;
    _this4.span = span;
    return _this4;
  }
  _createClass(ActiveResult, [{
    key: "hasResult",
    value: function hasResult() {
      return true;
    }
  }, {
    key: "handleUserEvent",
    value: function handleUserEvent(tr, type, conf) {
      var from = tr.changes.mapPos(this.from),
        to = tr.changes.mapPos(this.to, 1);
      var pos = cur(tr.state);
      if ((this.explicitPos > -1 ? pos < from : pos <= from) || pos > to) return new ActiveSource(this.source, type == "input" && conf.activateOnTyping ? 1 /* Pending */ : 0 /* Inactive */);
      var explicitPos = this.explicitPos < 0 ? -1 : tr.changes.mapPos(this.explicitPos);
      if (this.span && (from == to || this.span.test(tr.state.sliceDoc(from, to)))) return new ActiveResult(this.source, explicitPos, this.result, from, to, this.span);
      return new ActiveSource(this.source, 1 /* Pending */, explicitPos);
    }
  }, {
    key: "handleChange",
    value: function handleChange(tr) {
      return tr.changes.touchesRange(this.from, this.to) ? new ActiveSource(this.source, 0 /* Inactive */) : this.map(tr.changes);
    }
  }, {
    key: "map",
    value: function map(mapping) {
      return mapping.empty ? this : new ActiveResult(this.source, this.explicitPos < 0 ? -1 : mapping.mapPos(this.explicitPos), this.result, mapping.mapPos(this.from), mapping.mapPos(this.to, 1), this.span);
    }
  }]);
  return ActiveResult;
}(ActiveSource);
var startCompletionEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();
var closeCompletionEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();
var setActiveEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define({
  map: function map(sources, mapping) {
    return sources.map(function (s) {
      return s.map(mapping);
    });
  }
});
var setSelectedEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();
var completionState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateField.define({
  create: function create() {
    return CompletionState.start();
  },
  update: function update(value, tr) {
    return value.update(tr);
  },
  provide: function provide(f) {
    return [_codemirror_tooltip__WEBPACK_IMPORTED_MODULE_4__.showTooltip.from(f, function (val) {
      return val.tooltip;
    }), _codemirror_view__WEBPACK_IMPORTED_MODULE_3__.EditorView.contentAttributes.from(f, function (state) {
      return state.attrs;
    })];
  }
});
var CompletionInteractMargin = 75;
/**
Returns a command that moves the completion selection forward or
backward by the given amount.
*/
function moveCompletionSelection(forward) {
  var by = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "option";
  return function (view) {
    var cState = view.state.field(completionState, false);
    if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin) return false;
    var step = 1,
      tooltip;
    if (by == "page" && (tooltip = view.dom.querySelector(".cm-tooltip-autocomplete"))) step = Math.max(2, Math.floor(tooltip.offsetHeight / tooltip.firstChild.offsetHeight));
    var selected = cState.open.selected + step * (forward ? 1 : -1),
      length = cState.open.options.length;
    if (selected < 0) selected = by == "page" ? 0 : length - 1;else if (selected >= length) selected = by == "page" ? length - 1 : 0;
    view.dispatch({
      effects: setSelectedEffect.of(selected)
    });
    return true;
  };
}
/**
Accept the current completion.
*/
var acceptCompletion = function acceptCompletion(view) {
  var cState = view.state.field(completionState, false);
  if (!cState || !cState.open || Date.now() - cState.open.timestamp < CompletionInteractMargin) return false;
  applyCompletion(view, cState.open.options[cState.open.selected]);
  return true;
};
/**
Explicitly start autocompletion.
*/
var startCompletion = function startCompletion(view) {
  var cState = view.state.field(completionState, false);
  if (!cState) return false;
  view.dispatch({
    effects: startCompletionEffect.of(true)
  });
  return true;
};
/**
Close the currently active completion.
*/
var closeCompletion = function closeCompletion(view) {
  var cState = view.state.field(completionState, false);
  if (!cState || !cState.active.some(function (a) {
    return a.state != 0;
  } /* Inactive */)) return false;
  view.dispatch({
    effects: closeCompletionEffect.of(null)
  });
  return true;
};
var RunningQuery = /*#__PURE__*/_createClass(function RunningQuery(active, context) {
  _classCallCheck(this, RunningQuery);
  this.active = active;
  this.context = context;
  this.time = Date.now();
  this.updates = [];
  // Note that 'undefined' means 'not done yet', whereas 'null' means
  // 'query returned null'.
  this.done = undefined;
});
var DebounceTime = 50,
  MaxUpdateCount = 50,
  MinAbortTime = 1000;
var completionPlugin = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    _classCallCheck(this, _class);
    this.view = view;
    this.debounceUpdate = -1;
    this.running = [];
    this.debounceAccept = -1;
    this.composing = 0 /* None */;
    var _iterator10 = _createForOfIteratorHelper(view.state.field(completionState).active),
      _step10;
    try {
      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
        var active = _step10.value;
        if (active.state == 1 /* Pending */) this.startQuery(active);
      }
    } catch (err) {
      _iterator10.e(err);
    } finally {
      _iterator10.f();
    }
  }
  _createClass(_class, [{
    key: "update",
    value: function update(_update2) {
      var _this5 = this;
      var cState = _update2.state.field(completionState);
      if (!_update2.selectionSet && !_update2.docChanged && _update2.startState.field(completionState) == cState) return;
      var doesReset = _update2.transactions.some(function (tr) {
        var event = tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Transaction.userEvent);
        return (tr.selection || tr.docChanged) && event != "input" && event != "delete";
      });
      for (var i = 0; i < this.running.length; i++) {
        var query = this.running[i];
        if (doesReset || query.updates.length + _update2.transactions.length > MaxUpdateCount && query.time - Date.now() > MinAbortTime) {
          var _iterator11 = _createForOfIteratorHelper(query.context.abortListeners),
            _step11;
          try {
            for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
              var handler = _step11.value;
              try {
                handler();
              } catch (e) {
                (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.logException)(this.view.state, e);
              }
            }
          } catch (err) {
            _iterator11.e(err);
          } finally {
            _iterator11.f();
          }
          query.context.abortListeners = null;
          this.running.splice(i--, 1);
        } else {
          var _query$updates;
          (_query$updates = query.updates).push.apply(_query$updates, _toConsumableArray(_update2.transactions));
        }
      }
      if (this.debounceUpdate > -1) clearTimeout(this.debounceUpdate);
      this.debounceUpdate = cState.active.some(function (a) {
        return a.state == 1 /* Pending */ && !_this5.running.some(function (q) {
          return q.active.source == a.source;
        });
      }) ? setTimeout(function () {
        return _this5.startUpdate();
      }, DebounceTime) : -1;
      if (this.composing != 0 /* None */) {
        var _iterator12 = _createForOfIteratorHelper(_update2.transactions),
          _step12;
        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var tr = _step12.value;
            if (tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Transaction.userEvent) == "input") this.composing = 2 /* Changed */;else if (this.composing == 2 /* Changed */ && tr.selection) this.composing = 3 /* ChangedAndMoved */;
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
      }
    }
  }, {
    key: "startUpdate",
    value: function startUpdate() {
      var _this6 = this;
      this.debounceUpdate = -1;
      var state = this.view.state,
        cState = state.field(completionState);
      var _iterator13 = _createForOfIteratorHelper(cState.active),
        _step13;
      try {
        var _loop = function _loop() {
          var active = _step13.value;
          if (active.state == 1 /* Pending */ && !_this6.running.some(function (r) {
            return r.active.source == active.source;
          })) _this6.startQuery(active);
        };
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          _loop();
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
    }
  }, {
    key: "startQuery",
    value: function startQuery(active) {
      var _this7 = this;
      var state = this.view.state,
        pos = cur(state);
      var context = new CompletionContext(state, pos, active.explicitPos == pos);
      var pending = new RunningQuery(active, context);
      this.running.push(pending);
      Promise.resolve(active.source(context)).then(function (result) {
        if (!pending.context.aborted) {
          pending.done = result || null;
          _this7.scheduleAccept();
        }
      }, function (err) {
        _this7.view.dispatch({
          effects: closeCompletionEffect.of(null)
        });
        (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.logException)(_this7.view.state, err);
      });
    }
  }, {
    key: "scheduleAccept",
    value: function scheduleAccept() {
      var _this8 = this;
      if (this.running.every(function (q) {
        return q.done !== undefined;
      })) this.accept();else if (this.debounceAccept < 0) this.debounceAccept = setTimeout(function () {
        return _this8.accept();
      }, DebounceTime);
    }
    // For each finished query in this.running, try to create a result
    // or, if appropriate, restart the query.
  }, {
    key: "accept",
    value: function accept() {
      var _this9 = this;
      var _a;
      if (this.debounceAccept > -1) clearTimeout(this.debounceAccept);
      this.debounceAccept = -1;
      var updated = [];
      var conf = this.view.state.facet(completionConfig);
      var _loop2 = function _loop2(_i3) {
        var query = _this9.running[_i3];
        if (query.done === undefined) {
          i = _i3;
          return "continue";
        }
        _this9.running.splice(_i3--, 1);
        if (query.done) {
          var active = new ActiveResult(query.active.source, query.active.explicitPos, query.done, query.done.from, (_a = query.done.to) !== null && _a !== void 0 ? _a : cur(query.updates.length ? query.updates[0].startState : _this9.view.state), query.done.span && query.done.filter !== false ? ensureAnchor(query.done.span, true) : null);
          // Replay the transactions that happened since the start of
          // the request and see if that preserves the result
          var _iterator14 = _createForOfIteratorHelper(query.updates),
            _step14;
          try {
            for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
              var tr = _step14.value;
              active = active.update(tr, conf);
            }
          } catch (err) {
            _iterator14.e(err);
          } finally {
            _iterator14.f();
          }
          if (active.hasResult()) {
            updated.push(active);
            i = _i3;
            return "continue";
          }
        }
        var current = _this9.view.state.field(completionState).active.find(function (a) {
          return a.source == query.active.source;
        });
        if (current && current.state == 1 /* Pending */) {
          if (query.done == null) {
            // Explicitly failed. Should clear the pending status if it
            // hasn't been re-set in the meantime.
            var _active = new ActiveSource(query.active.source, 0 /* Inactive */);
            var _iterator15 = _createForOfIteratorHelper(query.updates),
              _step15;
            try {
              for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
                var _tr = _step15.value;
                _active = _active.update(_tr, conf);
              }
            } catch (err) {
              _iterator15.e(err);
            } finally {
              _iterator15.f();
            }
            if (_active.state != 1 /* Pending */) updated.push(_active);
          } else {
            // Cleared by subsequent transactions. Restart.
            _this9.startQuery(current);
          }
        }
        i = _i3;
      };
      for (var i = 0; i < this.running.length; i++) {
        var _ret = _loop2(i);
        if (_ret === "continue") continue;
      }
      if (updated.length) this.view.dispatch({
        effects: setActiveEffect.of(updated)
      });
    }
  }]);
  return _class;
}(), {
  eventHandlers: {
    compositionstart: function compositionstart() {
      this.composing = 1 /* Started */;
    },
    compositionend: function compositionend() {
      var _this10 = this;
      if (this.composing == 3 /* ChangedAndMoved */) {
        // Safari fires compositionend events synchronously, possibly
        // from inside an update, so dispatch asynchronously to avoid reentrancy
        setTimeout(function () {
          return _this10.view.dispatch({
            effects: startCompletionEffect.of(false)
          });
        }, 20);
      }
      this.composing = 0 /* None */;
    }
  }
});
var FieldPos = /*#__PURE__*/_createClass(function FieldPos(field, line, from, to) {
  _classCallCheck(this, FieldPos);
  this.field = field;
  this.line = line;
  this.from = from;
  this.to = to;
});
var FieldRange = /*#__PURE__*/function () {
  function FieldRange(field, from, to) {
    _classCallCheck(this, FieldRange);
    this.field = field;
    this.from = from;
    this.to = to;
  }
  _createClass(FieldRange, [{
    key: "map",
    value: function map(changes) {
      return new FieldRange(this.field, changes.mapPos(this.from, -1), changes.mapPos(this.to, 1));
    }
  }]);
  return FieldRange;
}();
var Snippet = /*#__PURE__*/function () {
  function Snippet(lines, fieldPositions) {
    _classCallCheck(this, Snippet);
    this.lines = lines;
    this.fieldPositions = fieldPositions;
  }
  _createClass(Snippet, [{
    key: "instantiate",
    value: function instantiate(state, pos) {
      var text = [],
        lineStart = [pos];
      var lineObj = state.doc.lineAt(pos),
        baseIndent = /^\s*/.exec(lineObj.text)[0];
      var _iterator16 = _createForOfIteratorHelper(this.lines),
        _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var line = _step16.value;
          if (text.length) {
            var indent = baseIndent,
              tabs = /^\t*/.exec(line)[0].length;
            for (var _i4 = 0; _i4 < tabs; _i4++) {
              indent += state.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_0__.indentUnit);
            }
            lineStart.push(pos + indent.length - tabs);
            line = indent + line.slice(tabs);
          }
          text.push(line);
          pos += line.length + 1;
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
      var ranges = this.fieldPositions.map(function (pos) {
        return new FieldRange(pos.field, lineStart[pos.line] + pos.from, lineStart[pos.line] + pos.to);
      });
      return {
        text: text,
        ranges: ranges
      };
    }
  }], [{
    key: "parse",
    value: function parse(template) {
      var fields = [];
      var lines = [],
        positions = [],
        m;
      var _iterator17 = _createForOfIteratorHelper(template.split(/\r\n?|\n/)),
        _step17;
      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          var line = _step17.value;
          while (m = /[#$]\{(?:(\d+)(?::([^}]*))?|([^}]*))\}/.exec(line)) {
            var seq = m[1] ? +m[1] : null,
              name = m[2] || m[3],
              found = -1;
            for (var _i5 = 0; _i5 < fields.length; _i5++) {
              if (seq != null ? fields[_i5].seq == seq : name ? fields[_i5].name == name : false) found = _i5;
            }
            if (found < 0) {
              var _i6 = 0;
              while (_i6 < fields.length && (seq == null || fields[_i6].seq != null && fields[_i6].seq < seq)) {
                _i6++;
              }
              fields.splice(_i6, 0, {
                seq: seq,
                name: name || null
              });
              found = _i6;
              var _iterator18 = _createForOfIteratorHelper(positions),
                _step18;
              try {
                for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
                  var pos = _step18.value;
                  if (pos.field >= found) pos.field++;
                }
              } catch (err) {
                _iterator18.e(err);
              } finally {
                _iterator18.f();
              }
            }
            positions.push(new FieldPos(found, lines.length, m.index, m.index + name.length));
            line = line.slice(0, m.index) + name + line.slice(m.index + m[0].length);
          }
          lines.push(line);
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }
      return new Snippet(lines, positions);
    }
  }]);
  return Snippet;
}();
var fieldMarker = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.Decoration.widget({
  widget: /*@__PURE__*/new ( /*#__PURE__*/function (_WidgetType) {
    _inherits(_class2, _WidgetType);
    var _super2 = _createSuper(_class2);
    function _class2() {
      _classCallCheck(this, _class2);
      return _super2.apply(this, arguments);
    }
    _createClass(_class2, [{
      key: "toDOM",
      value: function toDOM() {
        var span = document.createElement("span");
        span.className = "cm-snippetFieldPosition";
        return span;
      }
    }, {
      key: "ignoreEvent",
      value: function ignoreEvent() {
        return false;
      }
    }]);
    return _class2;
  }(_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.WidgetType))()
});
var fieldRange = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.Decoration.mark({
  "class": "cm-snippetField"
});
var ActiveSnippet = /*#__PURE__*/function () {
  function ActiveSnippet(ranges, active) {
    _classCallCheck(this, ActiveSnippet);
    this.ranges = ranges;
    this.active = active;
    this.deco = _codemirror_view__WEBPACK_IMPORTED_MODULE_3__.Decoration.set(ranges.map(function (r) {
      return (r.from == r.to ? fieldMarker : fieldRange).range(r.from, r.to);
    }));
  }
  _createClass(ActiveSnippet, [{
    key: "map",
    value: function map(changes) {
      return new ActiveSnippet(this.ranges.map(function (r) {
        return r.map(changes);
      }), this.active);
    }
  }, {
    key: "selectionInsideField",
    value: function selectionInsideField(sel) {
      var _this11 = this;
      return sel.ranges.every(function (range) {
        return _this11.ranges.some(function (r) {
          return r.field == _this11.active && r.from <= range.from && r.to >= range.to;
        });
      });
    }
  }]);
  return ActiveSnippet;
}();
var setActive = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define({
  map: function map(value, changes) {
    return value && value.map(changes);
  }
});
var moveToField = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();
var snippetState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateField.define({
  create: function create() {
    return null;
  },
  update: function update(value, tr) {
    var _iterator19 = _createForOfIteratorHelper(tr.effects),
      _step19;
    try {
      for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
        var effect = _step19.value;
        if (effect.is(setActive)) return effect.value;
        if (effect.is(moveToField) && value) return new ActiveSnippet(value.ranges, effect.value);
      }
    } catch (err) {
      _iterator19.e(err);
    } finally {
      _iterator19.f();
    }
    if (value && tr.docChanged) value = value.map(tr.changes);
    if (value && tr.selection && !value.selectionInsideField(tr.selection)) value = null;
    return value;
  },
  provide: function provide(f) {
    return _codemirror_view__WEBPACK_IMPORTED_MODULE_3__.EditorView.decorations.from(f, function (val) {
      return val ? val.deco : _codemirror_view__WEBPACK_IMPORTED_MODULE_3__.Decoration.none;
    });
  }
});
function fieldSelection(ranges, field) {
  return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create(ranges.filter(function (r) {
    return r.field == field;
  }).map(function (r) {
    return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(r.from, r.to);
  }));
}
/**
Convert a snippet template to a function that can apply it.
Snippets are written using syntax like this:

    "for (let ${index} = 0; ${index} < ${end}; ${index}++) {\n\t${}\n}"

Each `${}` placeholder (you may also use `#{}`) indicates a field
that the user can fill in. Its name, if any, will be the default
content for the field.

When the snippet is activated by calling the returned function,
the code is inserted at the given position. Newlines in the
template are indented by the indentation of the start line, plus
one [indent unit](https://codemirror.net/6/docs/ref/#language.indentUnit) per tab character after
the newline.

On activation, (all instances of) the first field are selected.
The user can move between fields with Tab and Shift-Tab as long as
the fields are active. Moving to the last field or moving the
cursor out of the current field deactivates the fields.

The order of fields defaults to textual order, but you can add
numbers to placeholders (`${1}` or `${1:defaultText}`) to provide
a custom order.
*/
function snippet(template) {
  var snippet = Snippet.parse(template);
  return function (editor, _completion, from, to) {
    var _snippet$instantiate = snippet.instantiate(editor.state, from),
      text = _snippet$instantiate.text,
      ranges = _snippet$instantiate.ranges;
    var spec = {
      changes: {
        from: from,
        to: to,
        insert: _codemirror_text__WEBPACK_IMPORTED_MODULE_1__.Text.of(text)
      }
    };
    if (ranges.length) spec.selection = fieldSelection(ranges, 0);
    if (ranges.length > 1) {
      var active = new ActiveSnippet(ranges, 0);
      var effects = spec.effects = [setActive.of(active)];
      if (editor.state.field(snippetState, false) === undefined) effects.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.appendConfig.of([snippetState.init(function () {
        return active;
      }), addSnippetKeymap, snippetPointerHandler, baseTheme]));
    }
    editor.dispatch(editor.state.update(spec));
  };
}
function moveField(dir) {
  return function (_ref3) {
    var state = _ref3.state,
      dispatch = _ref3.dispatch;
    var active = state.field(snippetState, false);
    if (!active || dir < 0 && active.active == 0) return false;
    var next = active.active + dir,
      last = dir > 0 && !active.ranges.some(function (r) {
        return r.field == next + dir;
      });
    dispatch(state.update({
      selection: fieldSelection(active.ranges, next),
      effects: setActive.of(last ? null : new ActiveSnippet(active.ranges, next))
    }));
    return true;
  };
}
/**
A command that clears the active snippet, if any.
*/
var clearSnippet = function clearSnippet(_ref4) {
  var state = _ref4.state,
    dispatch = _ref4.dispatch;
  var active = state.field(snippetState, false);
  if (!active) return false;
  dispatch(state.update({
    effects: setActive.of(null)
  }));
  return true;
};
/**
Move to the next snippet field, if available.
*/
var nextSnippetField = /*@__PURE__*/moveField(1);
/**
Move to the previous snippet field, if available.
*/
var prevSnippetField = /*@__PURE__*/moveField(-1);
var defaultSnippetKeymap = [{
  key: "Tab",
  run: nextSnippetField,
  shift: prevSnippetField
}, {
  key: "Escape",
  run: clearSnippet
}];
/**
A facet that can be used to configure the key bindings used by
snippets. The default binds Tab to
[`nextSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.nextSnippetField), Shift-Tab to
[`prevSnippetField`](https://codemirror.net/6/docs/ref/#autocomplete.prevSnippetField), and Escape
to [`clearSnippet`](https://codemirror.net/6/docs/ref/#autocomplete.clearSnippet).
*/
var snippetKeymap = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({
  combine: function combine(maps) {
    return maps.length ? maps[0] : defaultSnippetKeymap;
  }
});
var addSnippetKeymap = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Prec.override( /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.keymap.compute([snippetKeymap], function (state) {
  return state.facet(snippetKeymap);
}));
/**
Create a completion from a snippet. Returns an object with the
properties from `completion`, plus an `apply` function that
applies the snippet.
*/
function snippetCompletion(template, completion) {
  return Object.assign(Object.assign({}, completion), {
    apply: snippet(template)
  });
}
var snippetPointerHandler = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.EditorView.domEventHandlers({
  mousedown: function mousedown(event, view) {
    var active = view.state.field(snippetState, false),
      pos;
    if (!active || (pos = view.posAtCoords({
      x: event.clientX,
      y: event.clientY
    })) == null) return false;
    var match = active.ranges.find(function (r) {
      return r.from <= pos && r.to >= pos;
    });
    if (!match || match.field == active.active) return false;
    view.dispatch({
      selection: fieldSelection(active.ranges, match.field),
      effects: setActive.of(active.ranges.some(function (r) {
        return r.field > match.field;
      }) ? new ActiveSnippet(active.ranges, match.field) : null)
    });
    return true;
  }
});

/**
A completion source that will scan the document for words (using a
[character categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer)), and
return those as completions.
*/
var completeAnyWord = function completeAnyWord(context) {
  var options = [],
    seen = Object.create(null);
  var cat = context.state.charCategorizer(context.pos);
  var start = Math.max(0, context.pos - 50000 /* Range */),
    end = Math.min(context.state.doc.length, start + 50000 /* Range */ * 2);
  var from = context.pos;
  for (var _cur = context.state.doc.iterRange(start, end), pos = start; !_cur.next().done;) {
    var value = _cur.value,
      _start = -1;
    for (var _i7 = 0;; _i7++) {
      if (_i7 < value.length && cat(value[_i7]) == _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.CharCategory.Word) {
        if (_start < 0) _start = _i7;
      } else if (_start > -1) {
        if (pos + _start <= context.pos && pos + _i7 >= context.pos) {
          from = pos + _start;
        } else {
          var word = value.slice(_start, _i7);
          if (!seen[word]) {
            options.push({
              type: "text",
              label: word
            });
            seen[word] = true;
          }
        }
        _start = -1;
      }
      if (_i7 == value.length) break;
    }
    pos += value.length;
  }
  return {
    from: from,
    options: options,
    span: /^\w*/
  };
};

/**
Returns an extension that enables autocompletion.
*/
function autocompletion() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [completionState, completionConfig.of(config), completionPlugin, completionKeymapExt, baseTheme];
}
/**
Basic keybindings for autocompletion.

 - Ctrl-Space: [`startCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.startCompletion)
 - Escape: [`closeCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.closeCompletion)
 - ArrowDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true)`
 - ArrowUp: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(false)`
 - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
 - PageDown: [`moveCompletionSelection`](https://codemirror.net/6/docs/ref/#autocomplete.moveCompletionSelection)`(true, "page")`
 - Enter: [`acceptCompletion`](https://codemirror.net/6/docs/ref/#autocomplete.acceptCompletion)
*/
var completionKeymap = [{
  key: "Ctrl-Space",
  run: startCompletion
}, {
  key: "Escape",
  run: closeCompletion
}, {
  key: "ArrowDown",
  run: /*@__PURE__*/moveCompletionSelection(true)
}, {
  key: "ArrowUp",
  run: /*@__PURE__*/moveCompletionSelection(false)
}, {
  key: "PageDown",
  run: /*@__PURE__*/moveCompletionSelection(true, "page")
}, {
  key: "PageUp",
  run: /*@__PURE__*/moveCompletionSelection(false, "page")
}, {
  key: "Enter",
  run: acceptCompletion
}];
var completionKeymapExt = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Prec.override( /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.keymap.computeN([completionConfig], function (state) {
  return state.facet(completionConfig).defaultKeymap ? [completionKeymap] : [];
}));
/**
Get the current completion status. When completions are available,
this will return `"active"`. When completions are pending (in the
process of being queried), this returns `"pending"`. Otherwise, it
returns `null`.
*/
function completionStatus(state) {
  var cState = state.field(completionState, false);
  return cState && cState.active.some(function (a) {
    return a.state == 1;
  } /* Pending */) ? "pending" : cState && cState.active.some(function (a) {
    return a.state != 0;
  } /* Inactive */) ? "active" : null;
}
/**
Returns the available completions as an array.
*/
function currentCompletions(state) {
  var _a;
  var open = (_a = state.field(completionState, false)) === null || _a === void 0 ? void 0 : _a.open;
  return open ? open.options.map(function (o) {
    return o.completion;
  }) : [];
}


/***/ }),

/***/ "./node_modules/@codemirror/basic-setup/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@codemirror/basic-setup/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EditorState": () => (/* reexport safe */ _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorState),
/* harmony export */   "EditorView": () => (/* reexport safe */ _codemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView),
/* harmony export */   "basicSetup": () => (/* binding */ basicSetup)
/* harmony export */ });
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_history__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/history */ "./node_modules/@codemirror/history/dist/index.js");
/* harmony import */ var _codemirror_fold__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/fold */ "./node_modules/@codemirror/fold/dist/index.js");
/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @codemirror/language */ "./node_modules/@codemirror/language/dist/index.js");
/* harmony import */ var _codemirror_gutter__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/gutter */ "./node_modules/@codemirror/gutter/dist/index.js");
/* harmony import */ var _codemirror_commands__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @codemirror/commands */ "./node_modules/@codemirror/commands/dist/index.js");
/* harmony import */ var _codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @codemirror/matchbrackets */ "./node_modules/@codemirror/matchbrackets/dist/index.js");
/* harmony import */ var _codemirror_closebrackets__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @codemirror/closebrackets */ "./node_modules/@codemirror/closebrackets/dist/index.js");
/* harmony import */ var _codemirror_search__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @codemirror/search */ "./node_modules/@codemirror/search/dist/index.js");
/* harmony import */ var _codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @codemirror/autocomplete */ "./node_modules/@codemirror/autocomplete/dist/index.js");
/* harmony import */ var _codemirror_comment__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @codemirror/comment */ "./node_modules/@codemirror/comment/dist/index.js");
/* harmony import */ var _codemirror_rectangular_selection__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @codemirror/rectangular-selection */ "./node_modules/@codemirror/rectangular-selection/dist/index.js");
/* harmony import */ var _codemirror_highlight__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @codemirror/highlight */ "./node_modules/@codemirror/highlight/dist/index.js");
/* harmony import */ var _codemirror_lint__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @codemirror/lint */ "./node_modules/@codemirror/lint/dist/index.js");
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


















/**
This is an extension value that just pulls together a whole lot of
extensions that you might want in a basic editor. It is meant as a
convenient helper to quickly set up CodeMirror without installing
and importing a lot of packages.

Specifically, it includes...

 - [the default command bindings](https://codemirror.net/6/docs/ref/#commands.defaultKeymap)
 - [line numbers](https://codemirror.net/6/docs/ref/#gutter.lineNumbers)
 - [special character highlighting](https://codemirror.net/6/docs/ref/#view.highlightSpecialChars)
 - [the undo history](https://codemirror.net/6/docs/ref/#history.history)
 - [a fold gutter](https://codemirror.net/6/docs/ref/#fold.foldGutter)
 - [custom selection drawing](https://codemirror.net/6/docs/ref/#view.drawSelection)
 - [multiple selections](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
 - [reindentation on input](https://codemirror.net/6/docs/ref/#language.indentOnInput)
 - [the default highlight style](https://codemirror.net/6/docs/ref/#highlight.defaultHighlightStyle) (as fallback)
 - [bracket matching](https://codemirror.net/6/docs/ref/#matchbrackets.bracketMatching)
 - [bracket closing](https://codemirror.net/6/docs/ref/#closebrackets.closeBrackets)
 - [autocompletion](https://codemirror.net/6/docs/ref/#autocomplete.autocompletion)
 - [rectangular selection](https://codemirror.net/6/docs/ref/#rectangular-selection.rectangularSelection)
 - [active line highlighting](https://codemirror.net/6/docs/ref/#view.highlightActiveLine)
 - [active line gutter highlighting](https://codemirror.net/6/docs/ref/#gutter.highlightActiveLineGutter)
 - [selection match highlighting](https://codemirror.net/6/docs/ref/#search.highlightSelectionMatches)
 - [search](https://codemirror.net/6/docs/ref/#search.searchKeymap)
 - [commenting](https://codemirror.net/6/docs/ref/#comment.commentKeymap)
 - [linting](https://codemirror.net/6/docs/ref/#lint.lintKeymap)

(You'll probably want to add some language package to your setup
too.)

This package does not allow customization. The idea is that, once
you decide you want to configure your editor more precisely, you
take this package's source (which is just a bunch of imports and
an array literal), copy it into your own code, and adjust it as
desired.
*/
var basicSetup = [/*@__PURE__*/(0,_codemirror_gutter__WEBPACK_IMPORTED_MODULE_2__.lineNumbers)(), /*@__PURE__*/(0,_codemirror_gutter__WEBPACK_IMPORTED_MODULE_2__.highlightActiveLineGutter)(), /*@__PURE__*/(0,_codemirror_view__WEBPACK_IMPORTED_MODULE_0__.highlightSpecialChars)(), /*@__PURE__*/(0,_codemirror_history__WEBPACK_IMPORTED_MODULE_3__.history)(), /*@__PURE__*/(0,_codemirror_fold__WEBPACK_IMPORTED_MODULE_4__.foldGutter)(), /*@__PURE__*/(0,_codemirror_view__WEBPACK_IMPORTED_MODULE_0__.drawSelection)(), /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorState.allowMultipleSelections.of(true), /*@__PURE__*/(0,_codemirror_language__WEBPACK_IMPORTED_MODULE_5__.indentOnInput)(), _codemirror_highlight__WEBPACK_IMPORTED_MODULE_6__.defaultHighlightStyle.fallback, /*@__PURE__*/(0,_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_7__.bracketMatching)(), /*@__PURE__*/(0,_codemirror_closebrackets__WEBPACK_IMPORTED_MODULE_8__.closeBrackets)(), /*@__PURE__*/(0,_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_9__.autocompletion)(), /*@__PURE__*/(0,_codemirror_rectangular_selection__WEBPACK_IMPORTED_MODULE_10__.rectangularSelection)(), /*@__PURE__*/(0,_codemirror_view__WEBPACK_IMPORTED_MODULE_0__.highlightActiveLine)(), /*@__PURE__*/(0,_codemirror_search__WEBPACK_IMPORTED_MODULE_11__.highlightSelectionMatches)(), /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_0__.keymap.of([].concat(_toConsumableArray(_codemirror_closebrackets__WEBPACK_IMPORTED_MODULE_8__.closeBracketsKeymap), _toConsumableArray(_codemirror_commands__WEBPACK_IMPORTED_MODULE_12__.defaultKeymap), _toConsumableArray(_codemirror_search__WEBPACK_IMPORTED_MODULE_11__.searchKeymap), _toConsumableArray(_codemirror_history__WEBPACK_IMPORTED_MODULE_3__.historyKeymap), _toConsumableArray(_codemirror_fold__WEBPACK_IMPORTED_MODULE_4__.foldKeymap), _toConsumableArray(_codemirror_comment__WEBPACK_IMPORTED_MODULE_13__.commentKeymap), _toConsumableArray(_codemirror_autocomplete__WEBPACK_IMPORTED_MODULE_9__.completionKeymap), _toConsumableArray(_codemirror_lint__WEBPACK_IMPORTED_MODULE_14__.lintKeymap)))];


/***/ }),

/***/ "./node_modules/@codemirror/closebrackets/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@codemirror/closebrackets/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "closeBrackets": () => (/* binding */ closeBrackets),
/* harmony export */   "closeBracketsKeymap": () => (/* binding */ closeBracketsKeymap),
/* harmony export */   "deleteBracketPair": () => (/* binding */ deleteBracketPair),
/* harmony export */   "insertBracket": () => (/* binding */ insertBracket)
/* harmony export */ });
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/rangeset */ "./node_modules/@codemirror/rangeset/dist/index.js");
/* harmony import */ var _codemirror_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/text */ "./node_modules/@codemirror/text/dist/index.js");
/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/language */ "./node_modules/@codemirror/language/dist/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }





var defaults = {
  brackets: ["(", "[", "{", "'", '"'],
  before: ")]}'\":;>"
};
var closeBracketEffect = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.StateEffect.define({
  map: function map(value, mapping) {
    var mapped = mapping.mapPos(value, -1, _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.MapMode.TrackAfter);
    return mapped == null ? undefined : mapped;
  }
});
var skipBracketEffect = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.StateEffect.define({
  map: function map(value, mapping) {
    return mapping.mapPos(value);
  }
});
var closedBracket = new ( /*#__PURE__*/function (_RangeValue) {
  _inherits(_class, _RangeValue);
  var _super = _createSuper(_class);
  function _class() {
    _classCallCheck(this, _class);
    return _super.apply(this, arguments);
  }
  return _createClass(_class);
}(_codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeValue))();
closedBracket.startSide = 1;
closedBracket.endSide = -1;
var bracketState = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.StateField.define({
  create: function create() {
    return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeSet.empty;
  },
  update: function update(value, tr) {
    if (tr.selection) {
      var lineStart = tr.state.doc.lineAt(tr.selection.main.head).from;
      var prevLineStart = tr.startState.doc.lineAt(tr.startState.selection.main.head).from;
      if (lineStart != tr.changes.mapPos(prevLineStart, -1)) value = _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeSet.empty;
    }
    value = value.map(tr.changes);
    var _iterator = _createForOfIteratorHelper(tr.effects),
      _step;
    try {
      var _loop = function _loop() {
        var effect = _step.value;
        if (effect.is(closeBracketEffect)) value = value.update({
          add: [closedBracket.range(effect.value, effect.value + 1)]
        });else if (effect.is(skipBracketEffect)) value = value.update({
          filter: function filter(from) {
            return from != effect.value;
          }
        });
      };
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return value;
  }
});
/// Extension to enable bracket-closing behavior. When a closeable
/// bracket is typed, its closing bracket is immediately inserted
/// after the cursor. When closing a bracket directly in front of a
/// closing bracket inserted by the extension, the cursor moves over
/// that bracket.
function closeBrackets() {
  return [_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.inputHandler.of(handleInput), bracketState];
}
var definedClosing = "()[]{}<>";
function closing(ch) {
  for (var i = 0; i < definedClosing.length; i += 2) {
    if (definedClosing.charCodeAt(i) == ch) return definedClosing.charAt(i + 1);
  }
  return (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.fromCodePoint)(ch < 128 ? ch : ch + 1);
}
function config(state, pos) {
  return state.languageDataAt("closeBrackets", pos)[0] || defaults;
}
function handleInput(view, from, to, insert) {
  if (view.composing) return false;
  var sel = view.state.selection.main;
  if (insert.length > 2 || insert.length == 2 && (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.codePointSize)((0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.codePointAt)(insert, 0)) == 1 || from != sel.from || to != sel.to) return false;
  var tr = insertBracket(view.state, insert);
  if (!tr) return false;
  view.dispatch(tr);
  return true;
}
/// Command that implements deleting a pair of matching brackets when
/// the cursor is between them.
var deleteBracketPair = function deleteBracketPair(_ref) {
  var state = _ref.state,
    dispatch = _ref.dispatch;
  var conf = config(state, state.selection.main.head);
  var tokens = conf.brackets || defaults.brackets;
  var dont = null,
    changes = state.changeByRange(function (range) {
      if (range.empty) {
        var before = prevChar(state.doc, range.head);
        var _iterator2 = _createForOfIteratorHelper(tokens),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var token = _step2.value;
            if (token == before && nextChar(state.doc, range.head) == closing((0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.codePointAt)(token, 0))) return {
              changes: {
                from: range.head - token.length,
                to: range.head + token.length
              },
              range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(range.head - token.length),
              annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Transaction.userEvent.of("delete")
            };
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      return {
        range: dont = range
      };
    });
  if (!dont) dispatch(state.update(changes, {
    scrollIntoView: true
  }));
  return !dont;
};
/// Close-brackets related key bindings. Binds Backspace to
/// [`deleteBracketPair`](#closebrackets.deleteBracketPair).
var closeBracketsKeymap = [{
  key: "Backspace",
  run: deleteBracketPair
}];
/// Implements the extension's behavior on text insertion. If the
/// given string counts as a bracket in the language around the
/// selection, and replacing the selection with it requires custom
/// behavior (inserting a closing version or skipping past a
/// previously-closed bracket), this function returns a transaction
/// representing that custom behavior. (You only need this if you want
/// to programmatically insert brackets—the
/// [`closeBrackets`](#closebrackets.closeBrackets) extension will
/// take care of running this for user input.)
function insertBracket(state, bracket) {
  var conf = config(state, state.selection.main.head);
  var tokens = conf.brackets || defaults.brackets;
  var _iterator3 = _createForOfIteratorHelper(tokens),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var tok = _step3.value;
      var closed = closing((0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.codePointAt)(tok, 0));
      if (bracket == tok) return closed == tok ? handleSame(state, tok, tokens.indexOf(tok + tok + tok) > -1) : handleOpen(state, tok, closed, conf.before || defaults.before);
      if (bracket == closed && closedBracketAt(state, state.selection.main.from)) return handleClose(state, tok, closed);
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return null;
}
function closedBracketAt(state, pos) {
  var found = false;
  state.field(bracketState).between(0, state.doc.length, function (from) {
    if (from == pos) found = true;
  });
  return found;
}
function nextChar(doc, pos) {
  var next = doc.sliceString(pos, pos + 2);
  return next.slice(0, (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.codePointSize)((0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.codePointAt)(next, 0)));
}
function prevChar(doc, pos) {
  var prev = doc.sliceString(pos - 2, pos);
  return (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.codePointSize)((0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.codePointAt)(prev, 0)) == prev.length ? prev : prev.slice(1);
}
function handleOpen(state, open, close, closeBefore) {
  var dont = null,
    changes = state.changeByRange(function (range) {
      if (!range.empty) return {
        changes: [{
          insert: open,
          from: range.from
        }, {
          insert: close,
          from: range.to
        }],
        effects: closeBracketEffect.of(range.to + open.length),
        range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(range.anchor + open.length, range.head + open.length)
      };
      var next = nextChar(state.doc, range.head);
      if (!next || /\s/.test(next) || closeBefore.indexOf(next) > -1) return {
        changes: {
          insert: open + close,
          from: range.head
        },
        effects: closeBracketEffect.of(range.head + open.length),
        range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(range.head + open.length)
      };
      return {
        range: dont = range
      };
    });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Transaction.userEvent.of("input")
  });
}
function handleClose(state, _open, close) {
  var dont = null,
    moved = state.selection.ranges.map(function (range) {
      if (range.empty && nextChar(state.doc, range.head) == close) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(range.head + close.length);
      return dont = range;
    });
  return dont ? null : state.update({
    selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.create(moved, state.selection.mainIndex),
    scrollIntoView: true,
    effects: state.selection.ranges.map(function (_ref2) {
      var from = _ref2.from;
      return skipBracketEffect.of(from);
    })
  });
}
// Handles cases where the open and close token are the same, and
// possibly triple quotes (as in `"""abc"""`-style quoting).
function handleSame(state, token, allowTriple) {
  var dont = null,
    changes = state.changeByRange(function (range) {
      if (!range.empty) return {
        changes: [{
          insert: token,
          from: range.from
        }, {
          insert: token,
          from: range.to
        }],
        effects: closeBracketEffect.of(range.to + token.length),
        range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(range.anchor + token.length, range.head + token.length)
      };
      var pos = range.head,
        next = nextChar(state.doc, pos);
      if (next == token) {
        if (nodeStart(state, pos)) {
          return {
            changes: {
              insert: token + token,
              from: pos
            },
            effects: closeBracketEffect.of(pos + token.length),
            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(pos + token.length)
          };
        } else if (closedBracketAt(state, pos)) {
          var isTriple = allowTriple && state.sliceDoc(pos, pos + token.length * 3) == token + token + token;
          return {
            range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(pos + token.length * (isTriple ? 3 : 1)),
            effects: skipBracketEffect.of(pos)
          };
        }
      } else if (allowTriple && state.sliceDoc(pos - 2 * token.length, pos) == token + token && nodeStart(state, pos - 2 * token.length)) {
        return {
          changes: {
            insert: token + token + token + token,
            from: pos
          },
          effects: closeBracketEffect.of(pos + token.length),
          range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(pos + token.length)
        };
      } else if (state.charCategorizer(pos)(next) != _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.CharCategory.Word) {
        var prev = state.sliceDoc(pos - 1, pos);
        if (prev != token && state.charCategorizer(pos)(prev) != _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.CharCategory.Word) return {
          changes: {
            insert: token + token,
            from: pos
          },
          effects: closeBracketEffect.of(pos + token.length),
          range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.cursor(pos + token.length)
        };
      }
      return {
        range: dont = range
      };
    });
  return dont ? null : state.update(changes, {
    scrollIntoView: true,
    annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Transaction.userEvent.of("input")
  });
}
function nodeStart(state, pos) {
  var tree = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_4__.syntaxTree)(state).resolve(pos + 1);
  return tree.parent && tree.from == pos;
}


/***/ }),

/***/ "./node_modules/@codemirror/commands/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@codemirror/commands/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "copyLineDown": () => (/* binding */ copyLineDown),
/* harmony export */   "copyLineUp": () => (/* binding */ copyLineUp),
/* harmony export */   "cursorCharBackward": () => (/* binding */ cursorCharBackward),
/* harmony export */   "cursorCharForward": () => (/* binding */ cursorCharForward),
/* harmony export */   "cursorCharLeft": () => (/* binding */ cursorCharLeft),
/* harmony export */   "cursorCharRight": () => (/* binding */ cursorCharRight),
/* harmony export */   "cursorDocEnd": () => (/* binding */ cursorDocEnd),
/* harmony export */   "cursorDocStart": () => (/* binding */ cursorDocStart),
/* harmony export */   "cursorGroupBackward": () => (/* binding */ cursorGroupBackward),
/* harmony export */   "cursorGroupForward": () => (/* binding */ cursorGroupForward),
/* harmony export */   "cursorGroupLeft": () => (/* binding */ cursorGroupLeft),
/* harmony export */   "cursorGroupRight": () => (/* binding */ cursorGroupRight),
/* harmony export */   "cursorLineBoundaryBackward": () => (/* binding */ cursorLineBoundaryBackward),
/* harmony export */   "cursorLineBoundaryForward": () => (/* binding */ cursorLineBoundaryForward),
/* harmony export */   "cursorLineDown": () => (/* binding */ cursorLineDown),
/* harmony export */   "cursorLineEnd": () => (/* binding */ cursorLineEnd),
/* harmony export */   "cursorLineStart": () => (/* binding */ cursorLineStart),
/* harmony export */   "cursorLineUp": () => (/* binding */ cursorLineUp),
/* harmony export */   "cursorMatchingBracket": () => (/* binding */ cursorMatchingBracket),
/* harmony export */   "cursorPageDown": () => (/* binding */ cursorPageDown),
/* harmony export */   "cursorPageUp": () => (/* binding */ cursorPageUp),
/* harmony export */   "cursorSyntaxLeft": () => (/* binding */ cursorSyntaxLeft),
/* harmony export */   "cursorSyntaxRight": () => (/* binding */ cursorSyntaxRight),
/* harmony export */   "defaultKeymap": () => (/* binding */ defaultKeymap),
/* harmony export */   "defaultTabBinding": () => (/* binding */ defaultTabBinding),
/* harmony export */   "deleteCharBackward": () => (/* binding */ deleteCharBackward),
/* harmony export */   "deleteCharForward": () => (/* binding */ deleteCharForward),
/* harmony export */   "deleteCodePointBackward": () => (/* binding */ deleteCodePointBackward),
/* harmony export */   "deleteCodePointForward": () => (/* binding */ deleteCodePointForward),
/* harmony export */   "deleteGroupBackward": () => (/* binding */ deleteGroupBackward),
/* harmony export */   "deleteGroupForward": () => (/* binding */ deleteGroupForward),
/* harmony export */   "deleteLine": () => (/* binding */ deleteLine),
/* harmony export */   "deleteToLineEnd": () => (/* binding */ deleteToLineEnd),
/* harmony export */   "deleteToLineStart": () => (/* binding */ deleteToLineStart),
/* harmony export */   "deleteTrailingWhitespace": () => (/* binding */ deleteTrailingWhitespace),
/* harmony export */   "emacsStyleKeymap": () => (/* binding */ emacsStyleKeymap),
/* harmony export */   "indentLess": () => (/* binding */ indentLess),
/* harmony export */   "indentMore": () => (/* binding */ indentMore),
/* harmony export */   "indentSelection": () => (/* binding */ indentSelection),
/* harmony export */   "insertNewline": () => (/* binding */ insertNewline),
/* harmony export */   "insertNewlineAndIndent": () => (/* binding */ insertNewlineAndIndent),
/* harmony export */   "insertTab": () => (/* binding */ insertTab),
/* harmony export */   "moveLineDown": () => (/* binding */ moveLineDown),
/* harmony export */   "moveLineUp": () => (/* binding */ moveLineUp),
/* harmony export */   "selectAll": () => (/* binding */ selectAll),
/* harmony export */   "selectCharBackward": () => (/* binding */ selectCharBackward),
/* harmony export */   "selectCharForward": () => (/* binding */ selectCharForward),
/* harmony export */   "selectCharLeft": () => (/* binding */ selectCharLeft),
/* harmony export */   "selectCharRight": () => (/* binding */ selectCharRight),
/* harmony export */   "selectDocEnd": () => (/* binding */ selectDocEnd),
/* harmony export */   "selectDocStart": () => (/* binding */ selectDocStart),
/* harmony export */   "selectGroupBackward": () => (/* binding */ selectGroupBackward),
/* harmony export */   "selectGroupForward": () => (/* binding */ selectGroupForward),
/* harmony export */   "selectGroupLeft": () => (/* binding */ selectGroupLeft),
/* harmony export */   "selectGroupRight": () => (/* binding */ selectGroupRight),
/* harmony export */   "selectLine": () => (/* binding */ selectLine),
/* harmony export */   "selectLineBoundaryBackward": () => (/* binding */ selectLineBoundaryBackward),
/* harmony export */   "selectLineBoundaryForward": () => (/* binding */ selectLineBoundaryForward),
/* harmony export */   "selectLineDown": () => (/* binding */ selectLineDown),
/* harmony export */   "selectLineEnd": () => (/* binding */ selectLineEnd),
/* harmony export */   "selectLineStart": () => (/* binding */ selectLineStart),
/* harmony export */   "selectLineUp": () => (/* binding */ selectLineUp),
/* harmony export */   "selectMatchingBracket": () => (/* binding */ selectMatchingBracket),
/* harmony export */   "selectPageDown": () => (/* binding */ selectPageDown),
/* harmony export */   "selectPageUp": () => (/* binding */ selectPageUp),
/* harmony export */   "selectParentSyntax": () => (/* binding */ selectParentSyntax),
/* harmony export */   "selectSyntaxLeft": () => (/* binding */ selectSyntaxLeft),
/* harmony export */   "selectSyntaxRight": () => (/* binding */ selectSyntaxRight),
/* harmony export */   "simplifySelection": () => (/* binding */ simplifySelection),
/* harmony export */   "splitLine": () => (/* binding */ splitLine),
/* harmony export */   "standardKeymap": () => (/* binding */ standardKeymap),
/* harmony export */   "transposeChars": () => (/* binding */ transposeChars)
/* harmony export */ });
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_text__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @codemirror/text */ "./node_modules/@codemirror/text/dist/index.js");
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var _codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/matchbrackets */ "./node_modules/@codemirror/matchbrackets/dist/index.js");
/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/language */ "./node_modules/@codemirror/language/dist/index.js");
/* harmony import */ var lezer_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lezer-tree */ "./node_modules/lezer-tree/dist/tree.es.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }






function updateSel(sel, by) {
  return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(sel.ranges.map(by), sel.mainIndex);
}
function setSel(state, selection) {
  return state.update({
    selection: selection,
    scrollIntoView: true,
    annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Transaction.userEvent.of("keyboardselection")
  });
}
function moveSel(_ref, how) {
  var state = _ref.state,
    dispatch = _ref.dispatch;
  var selection = updateSel(state.selection, how);
  if (selection.eq(state.selection)) return false;
  dispatch(setSel(state, selection));
  return true;
}
function rangeEnd(range, forward) {
  return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(forward ? range.to : range.from);
}
function cursorByChar(view, forward) {
  return moveSel(view, function (range) {
    return range.empty ? view.moveByChar(range, forward) : rangeEnd(range, forward);
  });
}
/**
Move the selection one character to the left (which is backward in
left-to-right text, forward in right-to-left text).
*/
var cursorCharLeft = function cursorCharLeft(view) {
  return cursorByChar(view, view.textDirection != _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR);
};
/**
Move the selection one character to the right.
*/
var cursorCharRight = function cursorCharRight(view) {
  return cursorByChar(view, view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR);
};
/**
Move the selection one character forward.
*/
var cursorCharForward = function cursorCharForward(view) {
  return cursorByChar(view, true);
};
/**
Move the selection one character backward.
*/
var cursorCharBackward = function cursorCharBackward(view) {
  return cursorByChar(view, false);
};
function cursorByGroup(view, forward) {
  return moveSel(view, function (range) {
    return range.empty ? view.moveByGroup(range, forward) : rangeEnd(range, forward);
  });
}
/**
Move the selection across one group of word or non-word (but also
non-space) characters.
*/
var cursorGroupLeft = function cursorGroupLeft(view) {
  return cursorByGroup(view, view.textDirection != _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR);
};
/**
Move the selection one group to the right.
*/
var cursorGroupRight = function cursorGroupRight(view) {
  return cursorByGroup(view, view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR);
};
/**
Move the selection one group forward.
*/
var cursorGroupForward = function cursorGroupForward(view) {
  return cursorByGroup(view, true);
};
/**
Move the selection one group backward.
*/
var cursorGroupBackward = function cursorGroupBackward(view) {
  return cursorByGroup(view, false);
};
function interestingNode(state, node, bracketProp) {
  if (node.type.prop(bracketProp)) return true;
  var len = node.to - node.from;
  return len && (len > 2 || /[^\s,.;:]/.test(state.sliceDoc(node.from, node.to))) || node.firstChild;
}
function moveBySyntax(state, start, forward) {
  var pos = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.syntaxTree)(state).resolve(start.head);
  var bracketProp = forward ? lezer_tree__WEBPACK_IMPORTED_MODULE_0__.NodeProp.closedBy : lezer_tree__WEBPACK_IMPORTED_MODULE_0__.NodeProp.openedBy;
  // Scan forward through child nodes to see if there's an interesting
  // node ahead.
  for (var at = start.head;;) {
    var next = forward ? pos.childAfter(at) : pos.childBefore(at);
    if (!next) break;
    if (interestingNode(state, next, bracketProp)) pos = next;else at = forward ? next.to : next.from;
  }
  var bracket = pos.type.prop(bracketProp),
    match,
    newPos;
  if (bracket && (match = forward ? (0,_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_4__.matchBrackets)(state, pos.from, 1) : (0,_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_4__.matchBrackets)(state, pos.to, -1)) && match.matched) newPos = forward ? match.end.to : match.end.from;else newPos = forward ? pos.to : pos.from;
  return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(newPos, forward ? -1 : 1);
}
/**
Move the cursor over the next syntactic element to the left.
*/
var cursorSyntaxLeft = function cursorSyntaxLeft(view) {
  return moveSel(view, function (range) {
    return moveBySyntax(view.state, range, view.textDirection != _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR);
  });
};
/**
Move the cursor over the next syntactic element to the right.
*/
var cursorSyntaxRight = function cursorSyntaxRight(view) {
  return moveSel(view, function (range) {
    return moveBySyntax(view.state, range, view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR);
  });
};
function cursorByLine(view, forward) {
  return moveSel(view, function (range) {
    return range.empty ? view.moveVertically(range, forward) : rangeEnd(range, forward);
  });
}
/**
Move the selection one line up.
*/
var cursorLineUp = function cursorLineUp(view) {
  return cursorByLine(view, false);
};
/**
Move the selection one line down.
*/
var cursorLineDown = function cursorLineDown(view) {
  return cursorByLine(view, true);
};
function cursorByPage(view, forward) {
  return moveSel(view, function (range) {
    return range.empty ? view.moveVertically(range, forward, view.dom.clientHeight) : rangeEnd(range, forward);
  });
}
/**
Move the selection one page up.
*/
var cursorPageUp = function cursorPageUp(view) {
  return cursorByPage(view, false);
};
/**
Move the selection one page down.
*/
var cursorPageDown = function cursorPageDown(view) {
  return cursorByPage(view, true);
};
function moveByLineBoundary(view, start, forward) {
  var line = view.visualLineAt(start.head),
    moved = view.moveToLineBoundary(start, forward);
  if (moved.head == start.head && moved.head != (forward ? line.to : line.from)) moved = view.moveToLineBoundary(start, forward, false);
  if (!forward && moved.head == line.from && line.length) {
    var space = /^\s*/.exec(view.state.sliceDoc(line.from, Math.min(line.from + 100, line.to)))[0].length;
    if (space && start.head != line.from + space) moved = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(line.from + space);
  }
  return moved;
}
/**
Move the selection to the next line wrap point, or to the end of
the line if there isn't one left on this line.
*/
var cursorLineBoundaryForward = function cursorLineBoundaryForward(view) {
  return moveSel(view, function (range) {
    return moveByLineBoundary(view, range, true);
  });
};
/**
Move the selection to previous line wrap point, or failing that to
the start of the line. If the line is indented, and the cursor
isn't already at the end of the indentation, this will move to the
end of the indentation instead of the start of the line.
*/
var cursorLineBoundaryBackward = function cursorLineBoundaryBackward(view) {
  return moveSel(view, function (range) {
    return moveByLineBoundary(view, range, false);
  });
};
/**
Move the selection to the start of the line.
*/
var cursorLineStart = function cursorLineStart(view) {
  return moveSel(view, function (range) {
    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(view.visualLineAt(range.head).from, 1);
  });
};
/**
Move the selection to the end of the line.
*/
var cursorLineEnd = function cursorLineEnd(view) {
  return moveSel(view, function (range) {
    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(view.visualLineAt(range.head).to, -1);
  });
};
function toMatchingBracket(state, dispatch, extend) {
  var found = false,
    selection = updateSel(state.selection, function (range) {
      var matching = (0,_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_4__.matchBrackets)(state, range.head, -1) || (0,_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_4__.matchBrackets)(state, range.head, 1) || range.head > 0 && (0,_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_4__.matchBrackets)(state, range.head - 1, 1) || range.head < state.doc.length && (0,_codemirror_matchbrackets__WEBPACK_IMPORTED_MODULE_4__.matchBrackets)(state, range.head + 1, -1);
      if (!matching || !matching.end) return range;
      found = true;
      var head = matching.start.from == range.head ? matching.end.to : matching.end.from;
      return extend ? _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(range.anchor, head) : _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(head);
    });
  if (!found) return false;
  dispatch(setSel(state, selection));
  return true;
}
/**
Move the selection to the bracket matching the one it is currently
on, if any.
*/
var cursorMatchingBracket = function cursorMatchingBracket(_ref2) {
  var state = _ref2.state,
    dispatch = _ref2.dispatch;
  return toMatchingBracket(state, dispatch, false);
};
/**
Extend the selection to the bracket matching the one the selection
head is currently on, if any.
*/
var selectMatchingBracket = function selectMatchingBracket(_ref3) {
  var state = _ref3.state,
    dispatch = _ref3.dispatch;
  return toMatchingBracket(state, dispatch, true);
};
function extendSel(view, how) {
  var selection = updateSel(view.state.selection, function (range) {
    var head = how(range);
    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(range.anchor, head.head, head.goalColumn);
  });
  if (selection.eq(view.state.selection)) return false;
  view.dispatch(setSel(view.state, selection));
  return true;
}
function selectByChar(view, forward) {
  return extendSel(view, function (range) {
    return view.moveByChar(range, forward);
  });
}
/**
Move the selection head one character to the left, while leaving
the anchor in place.
*/
var selectCharLeft = function selectCharLeft(view) {
  return selectByChar(view, view.textDirection != _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR);
};
/**
Move the selection head one character to the right.
*/
var selectCharRight = function selectCharRight(view) {
  return selectByChar(view, view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR);
};
/**
Move the selection head one character forward.
*/
var selectCharForward = function selectCharForward(view) {
  return selectByChar(view, true);
};
/**
Move the selection head one character backward.
*/
var selectCharBackward = function selectCharBackward(view) {
  return selectByChar(view, false);
};
function selectByGroup(view, forward) {
  return extendSel(view, function (range) {
    return view.moveByGroup(range, forward);
  });
}
/**
Move the selection head one [group](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) to
the left.
*/
var selectGroupLeft = function selectGroupLeft(view) {
  return selectByGroup(view, view.textDirection != _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR);
};
/**
Move the selection head one group to the right.
*/
var selectGroupRight = function selectGroupRight(view) {
  return selectByGroup(view, view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR);
};
/**
Move the selection head one group forward.
*/
var selectGroupForward = function selectGroupForward(view) {
  return selectByGroup(view, true);
};
/**
Move the selection head one group backward.
*/
var selectGroupBackward = function selectGroupBackward(view) {
  return selectByGroup(view, false);
};
/**
Move the selection head over the next syntactic element to the left.
*/
var selectSyntaxLeft = function selectSyntaxLeft(view) {
  return extendSel(view, function (range) {
    return moveBySyntax(view.state, range, view.textDirection != _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR);
  });
};
/**
Move the selection head over the next syntactic element to the right.
*/
var selectSyntaxRight = function selectSyntaxRight(view) {
  return extendSel(view, function (range) {
    return moveBySyntax(view.state, range, view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR);
  });
};
function selectByLine(view, forward) {
  return extendSel(view, function (range) {
    return view.moveVertically(range, forward);
  });
}
/**
Move the selection head one line up.
*/
var selectLineUp = function selectLineUp(view) {
  return selectByLine(view, false);
};
/**
Move the selection head one line down.
*/
var selectLineDown = function selectLineDown(view) {
  return selectByLine(view, true);
};
function selectByPage(view, forward) {
  return extendSel(view, function (range) {
    return view.moveVertically(range, forward, view.dom.clientHeight);
  });
}
/**
Move the selection head one page up.
*/
var selectPageUp = function selectPageUp(view) {
  return selectByPage(view, false);
};
/**
Move the selection head one page down.
*/
var selectPageDown = function selectPageDown(view) {
  return selectByPage(view, true);
};
/**
Move the selection head to the next line boundary.
*/
var selectLineBoundaryForward = function selectLineBoundaryForward(view) {
  return extendSel(view, function (range) {
    return moveByLineBoundary(view, range, true);
  });
};
/**
Move the selection head to the previous line boundary.
*/
var selectLineBoundaryBackward = function selectLineBoundaryBackward(view) {
  return extendSel(view, function (range) {
    return moveByLineBoundary(view, range, false);
  });
};
/**
Move the selection head to the start of the line.
*/
var selectLineStart = function selectLineStart(view) {
  return extendSel(view, function (range) {
    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(view.visualLineAt(range.head).from);
  });
};
/**
Move the selection head to the end of the line.
*/
var selectLineEnd = function selectLineEnd(view) {
  return extendSel(view, function (range) {
    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(view.visualLineAt(range.head).to);
  });
};
/**
Move the selection to the start of the document.
*/
var cursorDocStart = function cursorDocStart(_ref4) {
  var state = _ref4.state,
    dispatch = _ref4.dispatch;
  dispatch(setSel(state, {
    anchor: 0
  }));
  return true;
};
/**
Move the selection to the end of the document.
*/
var cursorDocEnd = function cursorDocEnd(_ref5) {
  var state = _ref5.state,
    dispatch = _ref5.dispatch;
  dispatch(setSel(state, {
    anchor: state.doc.length
  }));
  return true;
};
/**
Move the selection head to the start of the document.
*/
var selectDocStart = function selectDocStart(_ref6) {
  var state = _ref6.state,
    dispatch = _ref6.dispatch;
  dispatch(setSel(state, {
    anchor: state.selection.main.anchor,
    head: 0
  }));
  return true;
};
/**
Move the selection head to the end of the document.
*/
var selectDocEnd = function selectDocEnd(_ref7) {
  var state = _ref7.state,
    dispatch = _ref7.dispatch;
  dispatch(setSel(state, {
    anchor: state.selection.main.anchor,
    head: state.doc.length
  }));
  return true;
};
/**
Select the entire document.
*/
var selectAll = function selectAll(_ref8) {
  var state = _ref8.state,
    dispatch = _ref8.dispatch;
  dispatch(state.update({
    selection: {
      anchor: 0,
      head: state.doc.length
    },
    annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Transaction.userEvent.of("keyboardselection")
  }));
  return true;
};
/**
Expand the selection to cover entire lines.
*/
var selectLine = function selectLine(_ref9) {
  var state = _ref9.state,
    dispatch = _ref9.dispatch;
  var ranges = selectedLineBlocks(state).map(function (_ref10) {
    var from = _ref10.from,
      to = _ref10.to;
    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(from, Math.min(to + 1, state.doc.length));
  });
  dispatch(state.update({
    selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(ranges),
    annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Transaction.userEvent.of("keyboardselection")
  }));
  return true;
};
/**
Select the next syntactic construct that is larger than the
selection. Note that this will only work insofar as the language
[provider](https://codemirror.net/6/docs/ref/#language.language) you use builds up a full
syntax tree.
*/
var selectParentSyntax = function selectParentSyntax(_ref11) {
  var state = _ref11.state,
    dispatch = _ref11.dispatch;
  var selection = updateSel(state.selection, function (range) {
    var _a;
    var context = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.syntaxTree)(state).resolve(range.head, 1);
    while (!(context.from < range.from && context.to >= range.to || context.to > range.to && context.from <= range.from || !((_a = context.parent) === null || _a === void 0 ? void 0 : _a.parent))) {
      context = context.parent;
    }
    return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(context.to, context.from);
  });
  dispatch(setSel(state, selection));
  return true;
};
/**
Simplify the current selection. When multiple ranges are selected,
reduce it to its main range. Otherwise, if the selection is
non-empty, convert it to a cursor selection.
*/
var simplifySelection = function simplifySelection(_ref12) {
  var state = _ref12.state,
    dispatch = _ref12.dispatch;
  var cur = state.selection,
    selection = null;
  if (cur.ranges.length > 1) selection = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create([cur.main]);else if (!cur.main.empty) selection = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create([_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(cur.main.head)]);
  if (!selection) return false;
  dispatch(setSel(state, selection));
  return true;
};
function deleteBy(_ref13, by) {
  var state = _ref13.state,
    dispatch = _ref13.dispatch;
  var changes = state.changeByRange(function (range) {
    var from = range.from,
      to = range.to;
    if (from == to) {
      var towards = by(from);
      from = Math.min(from, towards);
      to = Math.max(to, towards);
    }
    return from == to ? {
      range: range
    } : {
      changes: {
        from: from,
        to: to
      },
      range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(from)
    };
  });
  if (changes.changes.empty) return false;
  dispatch(state.update(changes, {
    scrollIntoView: true,
    annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Transaction.userEvent.of("delete")
  }));
  return true;
}
var deleteByChar = function deleteByChar(target, forward, codePoint) {
  return deleteBy(target, function (pos) {
    var state = target.state,
      line = state.doc.lineAt(pos),
      before;
    if (!forward && pos > line.from && pos < line.from + 200 && !/[^ \t]/.test(before = line.text.slice(0, pos - line.from))) {
      if (before[before.length - 1] == "\t") return pos - 1;
      var col = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_5__.countColumn)(before, 0, state.tabSize),
        drop = col % (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.getIndentUnit)(state) || (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.getIndentUnit)(state);
      for (var i = 0; i < drop && before[before.length - 1 - i] == " "; i++) {
        pos--;
      }
      return pos;
    }
    var targetPos;
    if (codePoint) {
      var next = line.text.slice(pos - line.from + (forward ? 0 : -2), pos - line.from + (forward ? 2 : 0));
      var size = next ? (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_5__.codePointSize)((0,_codemirror_text__WEBPACK_IMPORTED_MODULE_5__.codePointAt)(next, 0)) : 1;
      targetPos = forward ? Math.min(state.doc.length, pos + size) : Math.max(0, pos - size);
    } else {
      targetPos = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_5__.findClusterBreak)(line.text, pos - line.from, forward) + line.from;
    }
    if (targetPos == pos && line.number != (forward ? state.doc.lines : 1)) targetPos += forward ? 1 : -1;
    return targetPos;
  });
};
/**
Delete the selection, or, for cursor selections, the code point
before the cursor.
*/
var deleteCodePointBackward = function deleteCodePointBackward(view) {
  return deleteByChar(view, false, true);
};
/**
Delete the selection, or, for cursor selections, the code point
after the cursor.
*/
var deleteCodePointForward = function deleteCodePointForward(view) {
  return deleteByChar(view, true, true);
};
/**
Delete the selection, or, for cursor selections, the character
before the cursor.
*/
var deleteCharBackward = function deleteCharBackward(view) {
  return deleteByChar(view, false, false);
};
/**
Delete the selection or the character after the cursor.
*/
var deleteCharForward = function deleteCharForward(view) {
  return deleteByChar(view, true, false);
};
var deleteByGroup = function deleteByGroup(target, forward) {
  return deleteBy(target, function (start) {
    var pos = start,
      state = target.state,
      line = state.doc.lineAt(pos);
    var categorize = state.charCategorizer(pos);
    for (var cat = null;;) {
      if (pos == (forward ? line.to : line.from)) {
        if (pos == start && line.number != (forward ? state.doc.lines : 1)) pos += forward ? 1 : -1;
        break;
      }
      var next = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_5__.findClusterBreak)(line.text, pos - line.from, forward) + line.from;
      var nextChar = line.text.slice(Math.min(pos, next) - line.from, Math.max(pos, next) - line.from);
      var nextCat = categorize(nextChar);
      if (cat != null && nextCat != cat) break;
      if (nextChar != " " || pos != start) cat = nextCat;
      pos = next;
    }
    return pos;
  });
};
/**
Delete the selection or backward until the end of the next
[group](https://codemirror.net/6/docs/ref/#view.EditorView.moveByGroup), only skipping groups of
whitespace when they consist of a single space.
*/
var deleteGroupBackward = function deleteGroupBackward(target) {
  return deleteByGroup(target, false);
};
/**
Delete the selection or forward until the end of the next group.
*/
var deleteGroupForward = function deleteGroupForward(target) {
  return deleteByGroup(target, true);
};
/**
Delete the selection, or, if it is a cursor selection, delete to
the end of the line. If the cursor is directly at the end of the
line, delete the line break after it.
*/
var deleteToLineEnd = function deleteToLineEnd(view) {
  return deleteBy(view, function (pos) {
    var lineEnd = view.visualLineAt(pos).to;
    if (pos < lineEnd) return lineEnd;
    return Math.min(view.state.doc.length, pos + 1);
  });
};
/**
Delete the selection, or, if it is a cursor selection, delete to
the start of the line. If the cursor is directly at the start of the
line, delete the line break before it.
*/
var deleteToLineStart = function deleteToLineStart(view) {
  return deleteBy(view, function (pos) {
    var lineStart = view.visualLineAt(pos).from;
    if (pos > lineStart) return lineStart;
    return Math.max(0, pos - 1);
  });
};
/**
Delete all whitespace directly before a line end from the
document.
*/
var deleteTrailingWhitespace = function deleteTrailingWhitespace(_ref14) {
  var state = _ref14.state,
    dispatch = _ref14.dispatch;
  var changes = [];
  for (var pos = 0, prev = "", iter = state.doc.iter();;) {
    iter.next();
    if (iter.lineBreak || iter.done) {
      var trailing = prev.search(/\s+$/);
      if (trailing > -1) changes.push({
        from: pos - (prev.length - trailing),
        to: pos
      });
      if (iter.done) break;
      prev = "";
    } else {
      prev = iter.value;
    }
    pos += iter.value.length;
  }
  if (!changes.length) return false;
  dispatch(state.update({
    changes: changes
  }));
  return true;
};
/**
Replace each selection range with a line break, leaving the cursor
on the line before the break.
*/
var splitLine = function splitLine(_ref15) {
  var state = _ref15.state,
    dispatch = _ref15.dispatch;
  var changes = state.changeByRange(function (range) {
    return {
      changes: {
        from: range.from,
        to: range.to,
        insert: _codemirror_text__WEBPACK_IMPORTED_MODULE_5__.Text.of(["", ""])
      },
      range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(range.from)
    };
  });
  dispatch(state.update(changes, {
    scrollIntoView: true,
    annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Transaction.userEvent.of("input")
  }));
  return true;
};
/**
Flip the characters before and after the cursor(s).
*/
var transposeChars = function transposeChars(_ref16) {
  var state = _ref16.state,
    dispatch = _ref16.dispatch;
  var changes = state.changeByRange(function (range) {
    if (!range.empty || range.from == 0 || range.from == state.doc.length) return {
      range: range
    };
    var pos = range.from,
      line = state.doc.lineAt(pos);
    var from = pos == line.from ? pos - 1 : (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_5__.findClusterBreak)(line.text, pos - line.from, false) + line.from;
    var to = pos == line.to ? pos + 1 : (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_5__.findClusterBreak)(line.text, pos - line.from, true) + line.from;
    return {
      changes: {
        from: from,
        to: to,
        insert: state.doc.slice(pos, to).append(state.doc.slice(from, pos))
      },
      range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(to)
    };
  });
  if (changes.changes.empty) return false;
  dispatch(state.update(changes, {
    scrollIntoView: true
  }));
  return true;
};
function selectedLineBlocks(state) {
  var blocks = [],
    upto = -1;
  var _iterator = _createForOfIteratorHelper(state.selection.ranges),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var range = _step.value;
      var startLine = state.doc.lineAt(range.from),
        endLine = state.doc.lineAt(range.to);
      if (!range.empty && range.to == endLine.from) endLine = state.doc.lineAt(range.to - 1);
      if (upto >= startLine.number) {
        var prev = blocks[blocks.length - 1];
        prev.to = endLine.to;
        prev.ranges.push(range);
      } else {
        blocks.push({
          from: startLine.from,
          to: endLine.to,
          ranges: [range]
        });
      }
      upto = endLine.number + 1;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return blocks;
}
function moveLine(state, dispatch, forward) {
  var changes = [],
    ranges = [];
  var _iterator2 = _createForOfIteratorHelper(selectedLineBlocks(state)),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var block = _step2.value;
      if (forward ? block.to == state.doc.length : block.from == 0) continue;
      var nextLine = state.doc.lineAt(forward ? block.to + 1 : block.from - 1);
      var size = nextLine.length + 1;
      if (forward) {
        changes.push({
          from: block.to,
          to: nextLine.to
        }, {
          from: block.from,
          insert: nextLine.text + state.lineBreak
        });
        var _iterator3 = _createForOfIteratorHelper(block.ranges),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var r = _step3.value;
            ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(Math.min(state.doc.length, r.anchor + size), Math.min(state.doc.length, r.head + size)));
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      } else {
        changes.push({
          from: nextLine.from,
          to: block.from
        }, {
          from: block.to,
          insert: state.lineBreak + nextLine.text
        });
        var _iterator4 = _createForOfIteratorHelper(block.ranges),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _r = _step4.value;
            ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(_r.anchor - size, _r.head - size));
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
  if (!changes.length) return false;
  dispatch(state.update({
    changes: changes,
    scrollIntoView: true,
    selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.create(ranges, state.selection.mainIndex)
  }));
  return true;
}
/**
Move the selected lines up one line.
*/
var moveLineUp = function moveLineUp(_ref17) {
  var state = _ref17.state,
    dispatch = _ref17.dispatch;
  return moveLine(state, dispatch, false);
};
/**
Move the selected lines down one line.
*/
var moveLineDown = function moveLineDown(_ref18) {
  var state = _ref18.state,
    dispatch = _ref18.dispatch;
  return moveLine(state, dispatch, true);
};
function copyLine(state, dispatch, forward) {
  var changes = [];
  var _iterator5 = _createForOfIteratorHelper(selectedLineBlocks(state)),
    _step5;
  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var block = _step5.value;
      if (forward) changes.push({
        from: block.from,
        insert: state.doc.slice(block.from, block.to) + state.lineBreak
      });else changes.push({
        from: block.to,
        insert: state.lineBreak + state.doc.slice(block.from, block.to)
      });
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
  dispatch(state.update({
    changes: changes,
    scrollIntoView: true
  }));
  return true;
}
/**
Create a copy of the selected lines. Keep the selection in the top copy.
*/
var copyLineUp = function copyLineUp(_ref19) {
  var state = _ref19.state,
    dispatch = _ref19.dispatch;
  return copyLine(state, dispatch, false);
};
/**
Create a copy of the selected lines. Keep the selection in the bottom copy.
*/
var copyLineDown = function copyLineDown(_ref20) {
  var state = _ref20.state,
    dispatch = _ref20.dispatch;
  return copyLine(state, dispatch, true);
};
/**
Delete selected lines.
*/
var deleteLine = function deleteLine(view) {
  var state = view.state,
    changes = state.changes(selectedLineBlocks(state).map(function (_ref21) {
      var from = _ref21.from,
        to = _ref21.to;
      if (from > 0) from--;else if (to < state.doc.length) to++;
      return {
        from: from,
        to: to
      };
    }));
  var selection = updateSel(state.selection, function (range) {
    return view.moveVertically(range, true);
  }).map(changes);
  view.dispatch({
    changes: changes,
    selection: selection,
    scrollIntoView: true
  });
  return true;
};
/**
Replace the selection with a newline.
*/
var insertNewline = function insertNewline(_ref22) {
  var state = _ref22.state,
    dispatch = _ref22.dispatch;
  dispatch(state.update(state.replaceSelection(state.lineBreak), {
    scrollIntoView: true
  }));
  return true;
};
function isBetweenBrackets(state, pos) {
  if (/\(\)|\[\]|\{\}/.test(state.sliceDoc(pos - 1, pos + 1))) return {
    from: pos,
    to: pos
  };
  var context = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.syntaxTree)(state).resolve(pos);
  var before = context.childBefore(pos),
    after = context.childAfter(pos),
    closedBy;
  if (before && after && before.to <= pos && after.from >= pos && (closedBy = before.type.prop(lezer_tree__WEBPACK_IMPORTED_MODULE_0__.NodeProp.closedBy)) && closedBy.indexOf(after.name) > -1 && state.doc.lineAt(before.to).from == state.doc.lineAt(after.from).from) return {
    from: before.to,
    to: after.from
  };
  return null;
}
/**
Replace the selection with a newline and indent the newly created
line(s). If the current line consists only of whitespace, this
will also delete that whitespace. When the cursor is between
matching brackets, an additional newline will be inserted after
the cursor.
*/
var insertNewlineAndIndent = function insertNewlineAndIndent(_ref23) {
  var state = _ref23.state,
    dispatch = _ref23.dispatch;
  var changes = state.changeByRange(function (_ref24) {
    var from = _ref24.from,
      to = _ref24.to;
    var explode = from == to && isBetweenBrackets(state, from);
    var cx = new _codemirror_language__WEBPACK_IMPORTED_MODULE_3__.IndentContext(state, {
      simulateBreak: from,
      simulateDoubleBreak: !!explode
    });
    var indent = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.getIndentation)(cx, from);
    if (indent == null) indent = /^\s*/.exec(state.doc.lineAt(from).text)[0].length;
    var line = state.doc.lineAt(from);
    while (to < line.to && /\s/.test(line.text.slice(to - line.from, to + 1 - line.from))) {
      to++;
    }
    if (explode) {
      from = explode.from;
      to = explode.to;
    } else if (from > line.from && from < line.from + 100 && !/\S/.test(line.text.slice(0, from))) from = line.from;
    var insert = ["", (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentString)(state, indent)];
    if (explode) insert.push((0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentString)(state, cx.lineIndent(line)));
    return {
      changes: {
        from: from,
        to: to,
        insert: _codemirror_text__WEBPACK_IMPORTED_MODULE_5__.Text.of(insert)
      },
      range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.cursor(from + 1 + insert[1].length)
    };
  });
  dispatch(state.update(changes, {
    scrollIntoView: true
  }));
  return true;
};
function changeBySelectedLine(state, f) {
  var atLine = -1;
  return state.changeByRange(function (range) {
    var changes = [];
    for (var pos = range.from; pos <= range.to;) {
      var line = state.doc.lineAt(pos);
      if (line.number > atLine && (range.empty || range.to > line.from)) {
        f(line, changes, range);
        atLine = line.number;
      }
      pos = line.to + 1;
    }
    var changeSet = state.changes(changes);
    return {
      changes: changes,
      range: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorSelection.range(changeSet.mapPos(range.anchor, 1), changeSet.mapPos(range.head, 1))
    };
  });
}
/**
Auto-indent the selected lines. This uses the [indentation service
facet](https://codemirror.net/6/docs/ref/#language.indentService) as source for auto-indent
information.
*/
var indentSelection = function indentSelection(_ref25) {
  var state = _ref25.state,
    dispatch = _ref25.dispatch;
  var updated = Object.create(null);
  var context = new _codemirror_language__WEBPACK_IMPORTED_MODULE_3__.IndentContext(state, {
    overrideIndentation: function overrideIndentation(start) {
      var found = updated[start];
      return found == null ? -1 : found;
    }
  });
  var changes = changeBySelectedLine(state, function (line, changes, range) {
    var indent = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.getIndentation)(context, line.from);
    if (indent == null) return;
    var cur = /^\s*/.exec(line.text)[0];
    var norm = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentString)(state, indent);
    if (cur != norm || range.from < line.from + cur.length) {
      updated[line.from] = indent;
      changes.push({
        from: line.from,
        to: line.from + cur.length,
        insert: norm
      });
    }
  });
  if (!changes.changes.empty) dispatch(state.update(changes));
  return true;
};
/**
Add a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation to all selected
lines.
*/
var indentMore = function indentMore(_ref26) {
  var state = _ref26.state,
    dispatch = _ref26.dispatch;
  dispatch(state.update(changeBySelectedLine(state, function (line, changes) {
    changes.push({
      from: line.from,
      insert: state.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentUnit)
    });
  })));
  return true;
};
/**
Remove a [unit](https://codemirror.net/6/docs/ref/#language.indentUnit) of indentation from all
selected lines.
*/
var indentLess = function indentLess(_ref27) {
  var state = _ref27.state,
    dispatch = _ref27.dispatch;
  dispatch(state.update(changeBySelectedLine(state, function (line, changes) {
    var space = /^\s*/.exec(line.text)[0];
    if (!space) return;
    var col = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_5__.countColumn)(space, 0, state.tabSize),
      keep = 0;
    var insert = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.indentString)(state, Math.max(0, col - (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.getIndentUnit)(state)));
    while (keep < space.length && keep < insert.length && space.charCodeAt(keep) == insert.charCodeAt(keep)) {
      keep++;
    }
    changes.push({
      from: line.from + keep,
      to: line.from + space.length,
      insert: insert.slice(keep)
    });
  })));
  return true;
};
/**
Insert a tab character at the cursor or, if something is selected,
use [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore) to indent the entire
selection.
*/
var insertTab = function insertTab(_ref28) {
  var state = _ref28.state,
    dispatch = _ref28.dispatch;
  if (state.selection.ranges.some(function (r) {
    return !r.empty;
  })) return indentMore({
    state: state,
    dispatch: dispatch
  });
  dispatch(state.update(state.replaceSelection("\t"), {
    scrollIntoView: true,
    annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Transaction.userEvent.of("input")
  }));
  return true;
};
/**
Array of key bindings containing the Emacs-style bindings that are
available on macOS by default.

 - Ctrl-b: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
 - Ctrl-f: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
 - Ctrl-p: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
 - Ctrl-n: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
 - Ctrl-a: [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
 - Ctrl-e: [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
 - Ctrl-d: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
 - Ctrl-h: [`deleteCharBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCharBackward)
 - Ctrl-k: [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd)
 - Alt-d: [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
 - Ctrl-Alt-h: [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
 - Ctrl-o: [`splitLine`](https://codemirror.net/6/docs/ref/#commands.splitLine)
 - Ctrl-t: [`transposeChars`](https://codemirror.net/6/docs/ref/#commands.transposeChars)
 - Alt-f: [`cursorGroupForward`](https://codemirror.net/6/docs/ref/#commands.cursorGroupForward) ([`selectGroupForward`](https://codemirror.net/6/docs/ref/#commands.selectGroupForward) with Shift)
 - Alt-b: [`cursorGroupBackward`](https://codemirror.net/6/docs/ref/#commands.cursorGroupBackward) ([`selectGroupBackward`](https://codemirror.net/6/docs/ref/#commands.selectGroupBackward) with Shift)
 - Alt-<: [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart)
 - Alt->: [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd)
 - Ctrl-v: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown)
 - Alt-v: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp)
*/
var emacsStyleKeymap = [{
  key: "Ctrl-b",
  run: cursorCharLeft,
  shift: selectCharLeft,
  preventDefault: true
}, {
  key: "Ctrl-f",
  run: cursorCharRight,
  shift: selectCharRight
}, {
  key: "Ctrl-p",
  run: cursorLineUp,
  shift: selectLineUp
}, {
  key: "Ctrl-n",
  run: cursorLineDown,
  shift: selectLineDown
}, {
  key: "Ctrl-a",
  run: cursorLineStart,
  shift: selectLineStart
}, {
  key: "Ctrl-e",
  run: cursorLineEnd,
  shift: selectLineEnd
}, {
  key: "Ctrl-d",
  run: deleteCharForward
}, {
  key: "Ctrl-h",
  run: deleteCharBackward
}, {
  key: "Ctrl-k",
  run: deleteToLineEnd
}, {
  key: "Alt-d",
  run: deleteGroupForward
}, {
  key: "Ctrl-Alt-h",
  run: deleteGroupBackward
}, {
  key: "Ctrl-o",
  run: splitLine
}, {
  key: "Ctrl-t",
  run: transposeChars
}, {
  key: "Alt-f",
  run: cursorGroupForward,
  shift: selectGroupForward
}, {
  key: "Alt-b",
  run: cursorGroupBackward,
  shift: selectGroupBackward
}, {
  key: "Alt-<",
  run: cursorDocStart
}, {
  key: "Alt->",
  run: cursorDocEnd
}, {
  key: "Ctrl-v",
  run: cursorPageDown
}, {
  key: "Alt-v",
  run: cursorPageUp
}];
/**
An array of key bindings closely sticking to platform-standard or
widely used bindings. (This includes the bindings from
[`emacsStyleKeymap`](https://codemirror.net/6/docs/ref/#commands.emacsStyleKeymap), with their `key`
property changed to `mac`.)

 - ArrowLeft: [`cursorCharLeft`](https://codemirror.net/6/docs/ref/#commands.cursorCharLeft) ([`selectCharLeft`](https://codemirror.net/6/docs/ref/#commands.selectCharLeft) with Shift)
 - ArrowRight: [`cursorCharRight`](https://codemirror.net/6/docs/ref/#commands.cursorCharRight) ([`selectCharRight`](https://codemirror.net/6/docs/ref/#commands.selectCharRight) with Shift)
 - Ctrl-ArrowLeft (Alt-ArrowLeft on macOS): [`cursorGroupLeft`](https://codemirror.net/6/docs/ref/#commands.cursorGroupLeft) ([`selectGroupLeft`](https://codemirror.net/6/docs/ref/#commands.selectGroupLeft) with Shift)
 - Ctrl-ArrowRight (Alt-ArrowRight on macOS): [`cursorGroupRight`](https://codemirror.net/6/docs/ref/#commands.cursorGroupRight) ([`selectGroupRight`](https://codemirror.net/6/docs/ref/#commands.selectGroupRight) with Shift)
 - Cmd-ArrowLeft (on macOS): [`cursorLineStart`](https://codemirror.net/6/docs/ref/#commands.cursorLineStart) ([`selectLineStart`](https://codemirror.net/6/docs/ref/#commands.selectLineStart) with Shift)
 - Cmd-ArrowRight (on macOS): [`cursorLineEnd`](https://codemirror.net/6/docs/ref/#commands.cursorLineEnd) ([`selectLineEnd`](https://codemirror.net/6/docs/ref/#commands.selectLineEnd) with Shift)
 - ArrowUp: [`cursorLineUp`](https://codemirror.net/6/docs/ref/#commands.cursorLineUp) ([`selectLineUp`](https://codemirror.net/6/docs/ref/#commands.selectLineUp) with Shift)
 - ArrowDown: [`cursorLineDown`](https://codemirror.net/6/docs/ref/#commands.cursorLineDown) ([`selectLineDown`](https://codemirror.net/6/docs/ref/#commands.selectLineDown) with Shift)
 - Cmd-ArrowUp (on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
 - Cmd-ArrowDown (on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
 - Ctrl-ArrowUp (on macOS): [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
 - Ctrl-ArrowDown (on macOS): [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
 - PageUp: [`cursorPageUp`](https://codemirror.net/6/docs/ref/#commands.cursorPageUp) ([`selectPageUp`](https://codemirror.net/6/docs/ref/#commands.selectPageUp) with Shift)
 - PageDown: [`cursorPageDown`](https://codemirror.net/6/docs/ref/#commands.cursorPageDown) ([`selectPageDown`](https://codemirror.net/6/docs/ref/#commands.selectPageDown) with Shift)
 - Home: [`cursorLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryBackward) ([`selectLineBoundaryBackward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryBackward) with Shift)
 - End: [`cursorLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.cursorLineBoundaryForward) ([`selectLineBoundaryForward`](https://codemirror.net/6/docs/ref/#commands.selectLineBoundaryForward) with Shift)
 - Ctrl-Home (Cmd-Home on macOS): [`cursorDocStart`](https://codemirror.net/6/docs/ref/#commands.cursorDocStart) ([`selectDocStart`](https://codemirror.net/6/docs/ref/#commands.selectDocStart) with Shift)
 - Ctrl-End (Cmd-Home on macOS): [`cursorDocEnd`](https://codemirror.net/6/docs/ref/#commands.cursorDocEnd) ([`selectDocEnd`](https://codemirror.net/6/docs/ref/#commands.selectDocEnd) with Shift)
 - Enter: [`insertNewlineAndIndent`](https://codemirror.net/6/docs/ref/#commands.insertNewlineAndIndent)
 - Ctrl-a (Cmd-a on macOS): [`selectAll`](https://codemirror.net/6/docs/ref/#commands.selectAll)
 - Backspace: [`deleteCodePointBackward`](https://codemirror.net/6/docs/ref/#commands.deleteCodePointBackward)
 - Delete: [`deleteCharForward`](https://codemirror.net/6/docs/ref/#commands.deleteCharForward)
 - Ctrl-Backspace (Alt-Backspace on macOS): [`deleteGroupBackward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupBackward)
 - Ctrl-Delete (Alt-Delete on macOS): [`deleteGroupForward`](https://codemirror.net/6/docs/ref/#commands.deleteGroupForward)
 - Cmd-Backspace (macOS): [`deleteToLineStart`](https://codemirror.net/6/docs/ref/#commands.deleteToLineStart).
 - Cmd-Delete (macOS): [`deleteToLineEnd`](https://codemirror.net/6/docs/ref/#commands.deleteToLineEnd).
*/
var standardKeymap = /*@__PURE__*/[{
  key: "ArrowLeft",
  run: cursorCharLeft,
  shift: selectCharLeft,
  preventDefault: true
}, {
  key: "Mod-ArrowLeft",
  mac: "Alt-ArrowLeft",
  run: cursorGroupLeft,
  shift: selectGroupLeft
}, {
  mac: "Cmd-ArrowLeft",
  run: cursorLineBoundaryBackward,
  shift: selectLineBoundaryBackward
}, {
  key: "ArrowRight",
  run: cursorCharRight,
  shift: selectCharRight,
  preventDefault: true
}, {
  key: "Mod-ArrowRight",
  mac: "Alt-ArrowRight",
  run: cursorGroupRight,
  shift: selectGroupRight
}, {
  mac: "Cmd-ArrowRight",
  run: cursorLineBoundaryForward,
  shift: selectLineBoundaryForward
}, {
  key: "ArrowUp",
  run: cursorLineUp,
  shift: selectLineUp,
  preventDefault: true
}, {
  mac: "Cmd-ArrowUp",
  run: cursorDocStart,
  shift: selectDocStart
}, {
  mac: "Ctrl-ArrowUp",
  run: cursorPageUp,
  shift: selectPageUp
}, {
  key: "ArrowDown",
  run: cursorLineDown,
  shift: selectLineDown,
  preventDefault: true
}, {
  mac: "Cmd-ArrowDown",
  run: cursorDocEnd,
  shift: selectDocEnd
}, {
  mac: "Ctrl-ArrowDown",
  run: cursorPageDown,
  shift: selectPageDown
}, {
  key: "PageUp",
  run: cursorPageUp,
  shift: selectPageUp
}, {
  key: "PageDown",
  run: cursorPageDown,
  shift: selectPageDown
}, {
  key: "Home",
  run: cursorLineBoundaryBackward,
  shift: selectLineBoundaryBackward
}, {
  key: "Mod-Home",
  run: cursorDocStart,
  shift: selectDocStart
}, {
  key: "End",
  run: cursorLineBoundaryForward,
  shift: selectLineBoundaryForward
}, {
  key: "Mod-End",
  run: cursorDocEnd,
  shift: selectDocEnd
}, {
  key: "Enter",
  run: insertNewlineAndIndent
}, {
  key: "Mod-a",
  run: selectAll
}, {
  key: "Backspace",
  run: deleteCodePointBackward,
  shift: deleteCodePointBackward
}, {
  key: "Delete",
  run: deleteCharForward,
  shift: deleteCharForward
}, {
  key: "Mod-Backspace",
  mac: "Alt-Backspace",
  run: deleteGroupBackward
}, {
  key: "Mod-Delete",
  mac: "Alt-Delete",
  run: deleteGroupForward
}, {
  mac: "Mod-Backspace",
  run: deleteToLineStart
}, {
  mac: "Mod-Delete",
  run: deleteToLineEnd
}].concat( /*@__PURE__*/emacsStyleKeymap.map(function (b) {
  return {
    mac: b.key,
    run: b.run,
    shift: b.shift
  };
}));
/**
The default keymap. Includes all bindings from
[`standardKeymap`](https://codemirror.net/6/docs/ref/#commands.standardKeymap) plus the following:

- Alt-ArrowLeft (Ctrl-ArrowLeft on macOS): [`cursorSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxLeft) ([`selectSyntaxLeft`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxLeft) with Shift)
- Alt-ArrowRight (Ctrl-ArrowRight on macOS): [`cursorSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.cursorSyntaxRight) ([`selectSyntaxRight`](https://codemirror.net/6/docs/ref/#commands.selectSyntaxRight) with Shift)
- Alt-ArrowUp: [`moveLineUp`](https://codemirror.net/6/docs/ref/#commands.moveLineUp)
- Alt-ArrowDown: [`moveLineDown`](https://codemirror.net/6/docs/ref/#commands.moveLineDown)
- Shift-Alt-ArrowUp: [`copyLineUp`](https://codemirror.net/6/docs/ref/#commands.copyLineUp)
- Shift-Alt-ArrowDown: [`copyLineDown`](https://codemirror.net/6/docs/ref/#commands.copyLineDown)
- Escape: [`simplifySelection`](https://codemirror.net/6/docs/ref/#commands.simplifySelection)
- Alt-l (Ctrl-l on macOS): [`selectLine`](https://codemirror.net/6/docs/ref/#commands.selectLine)
- Ctrl-i (Cmd-i on macOS): [`selectParentSyntax`](https://codemirror.net/6/docs/ref/#commands.selectParentSyntax)
- Ctrl-[ (Cmd-[ on macOS): [`indentLess`](https://codemirror.net/6/docs/ref/#commands.indentLess)
- Ctrl-] (Cmd-] on macOS): [`indentMore`](https://codemirror.net/6/docs/ref/#commands.indentMore)
- Ctrl-Alt-\\ (Cmd-Alt-\\ on macOS): [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection)
- Shift-Ctrl-k (Shift-Cmd-k on macOS): [`deleteLine`](https://codemirror.net/6/docs/ref/#commands.deleteLine)
- Shift-Ctrl-\\ (Shift-Cmd-\\ on macOS): [`cursorMatchingBracket`](https://codemirror.net/6/docs/ref/#commands.cursorMatchingBracket)
*/
var defaultKeymap = /*@__PURE__*/[{
  key: "Alt-ArrowLeft",
  mac: "Ctrl-ArrowLeft",
  run: cursorSyntaxLeft,
  shift: selectSyntaxLeft
}, {
  key: "Alt-ArrowRight",
  mac: "Ctrl-ArrowRight",
  run: cursorSyntaxRight,
  shift: selectSyntaxRight
}, {
  key: "Alt-ArrowUp",
  run: moveLineUp
}, {
  key: "Shift-Alt-ArrowUp",
  run: copyLineUp
}, {
  key: "Alt-ArrowDown",
  run: moveLineDown
}, {
  key: "Shift-Alt-ArrowDown",
  run: copyLineDown
}, {
  key: "Escape",
  run: simplifySelection
}, {
  key: "Alt-l",
  mac: "Ctrl-l",
  run: selectLine
}, {
  key: "Mod-i",
  run: selectParentSyntax,
  preventDefault: true
}, {
  key: "Mod-[",
  run: indentLess
}, {
  key: "Mod-]",
  run: indentMore
}, {
  key: "Mod-Alt-\\",
  run: indentSelection
}, {
  key: "Shift-Mod-k",
  run: deleteLine
}, {
  key: "Shift-Mod-\\",
  run: cursorMatchingBracket
}].concat(standardKeymap);
/**
A binding that binds Tab to [`insertTab`](https://codemirror.net/6/docs/ref/#commands.insertTab) and
Shift-Tab to [`indentSelection`](https://codemirror.net/6/docs/ref/#commands.indentSelection).
Please see the [Tab example](../../examples/tab/) before using
this.
*/
var defaultTabBinding = {
  key: "Tab",
  run: insertTab,
  shift: indentSelection
};


/***/ }),

/***/ "./node_modules/@codemirror/comment/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@codemirror/comment/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "blockComment": () => (/* binding */ blockComment),
/* harmony export */   "blockUncomment": () => (/* binding */ blockUncomment),
/* harmony export */   "commentKeymap": () => (/* binding */ commentKeymap),
/* harmony export */   "lineComment": () => (/* binding */ lineComment),
/* harmony export */   "lineUncomment": () => (/* binding */ lineUncomment),
/* harmony export */   "toggleBlockComment": () => (/* binding */ toggleBlockComment),
/* harmony export */   "toggleComment": () => (/* binding */ toggleComment),
/* harmony export */   "toggleLineComment": () => (/* binding */ toggleLineComment)
/* harmony export */ });
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


/**
Comment or uncomment the current selection. Will use line comments
if available, otherwise falling back to block comments.
*/
var toggleComment = function toggleComment(target) {
  var config = getConfig(target.state);
  return config.line ? toggleLineComment(target) : config.block ? toggleBlockComment(target) : false;
};
function command(f, option) {
  return function (_ref) {
    var state = _ref.state,
      dispatch = _ref.dispatch;
    var tr = f(option, state.selection.ranges, state);
    if (!tr) return false;
    dispatch(state.update(tr));
    return true;
  };
}
/**
Comment or uncomment the current selection using line comments.
The line comment syntax is taken from the
[`commentTokens`](https://codemirror.net/6/docs/ref/#comment.CommentTokens) [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
*/
var toggleLineComment = /*@__PURE__*/command(changeLineComment, 0 /* Toggle */);
/**
Comment the current selection using line comments.
*/
var lineComment = /*@__PURE__*/command(changeLineComment, 1 /* Comment */);
/**
Uncomment the current selection using line comments.
*/
var lineUncomment = /*@__PURE__*/command(changeLineComment, 2 /* Uncomment */);
/**
Comment or uncomment the current selection using block comments.
The block comment syntax is taken from the
[`commentTokens`](https://codemirror.net/6/docs/ref/#comment.CommentTokens) [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt).
*/
var toggleBlockComment = /*@__PURE__*/command(changeBlockComment, 0 /* Toggle */);
/**
Comment the current selection using block comments.
*/
var blockComment = /*@__PURE__*/command(changeBlockComment, 1 /* Comment */);
/**
Uncomment the current selection using block comments.
*/
var blockUncomment = /*@__PURE__*/command(changeBlockComment, 2 /* Uncomment */);
/**
Default key bindings for this package.

 - Ctrl-/ (Cmd-/ on macOS): [`toggleComment`](https://codemirror.net/6/docs/ref/#comment.toggleComment).
 - Shift-Alt-a: [`toggleBlockComment`](https://codemirror.net/6/docs/ref/#comment.toggleBlockComment).
*/
var commentKeymap = [{
  key: "Mod-/",
  run: toggleComment
}, {
  key: "Alt-A",
  run: toggleBlockComment
}];
function getConfig(state) {
  var pos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : state.selection.main.head;
  var data = state.languageDataAt("commentTokens", pos);
  return data.length ? data[0] : {};
}
var SearchMargin = 50;
/**
Determines if the given range is block-commented in the given
state.
*/
function findBlockComment(state, _ref2, from, to) {
  var open = _ref2.open,
    close = _ref2.close;
  var textBefore = state.sliceDoc(from - SearchMargin, from);
  var textAfter = state.sliceDoc(to, to + SearchMargin);
  var spaceBefore = /\s*$/.exec(textBefore)[0].length,
    spaceAfter = /^\s*/.exec(textAfter)[0].length;
  var beforeOff = textBefore.length - spaceBefore;
  if (textBefore.slice(beforeOff - open.length, beforeOff) == open && textAfter.slice(spaceAfter, spaceAfter + close.length) == close) {
    return {
      open: {
        pos: from - spaceBefore,
        margin: spaceBefore && 1
      },
      close: {
        pos: to + spaceAfter,
        margin: spaceAfter && 1
      }
    };
  }
  var startText, endText;
  if (to - from <= 2 * SearchMargin) {
    startText = endText = state.sliceDoc(from, to);
  } else {
    startText = state.sliceDoc(from, from + SearchMargin);
    endText = state.sliceDoc(to - SearchMargin, to);
  }
  var startSpace = /^\s*/.exec(startText)[0].length,
    endSpace = /\s*$/.exec(endText)[0].length;
  var endOff = endText.length - endSpace - close.length;
  if (startText.slice(startSpace, startSpace + open.length) == open && endText.slice(endOff, endOff + close.length) == close) {
    return {
      open: {
        pos: from + startSpace + open.length,
        margin: /\s/.test(startText.charAt(startSpace + open.length)) ? 1 : 0
      },
      close: {
        pos: to - endSpace - close.length,
        margin: /\s/.test(endText.charAt(endOff - 1)) ? 1 : 0
      }
    };
  }
  return null;
}
// Performs toggle, comment and uncomment of block comments in
// languages that support them.
function changeBlockComment(option, ranges, state) {
  var tokens = ranges.map(function (r) {
    return getConfig(state, r.from).block;
  });
  if (!tokens.every(function (c) {
    return c;
  })) return null;
  var comments = ranges.map(function (r, i) {
    return findBlockComment(state, tokens[i], r.from, r.to);
  });
  if (option != 2 /* Uncomment */ && !comments.every(function (c) {
    return c;
  })) {
    var index = 0;
    return state.changeByRange(function (range) {
      var _tokens$index = tokens[index++],
        open = _tokens$index.open,
        close = _tokens$index.close;
      if (comments[index]) return {
        range: range
      };
      var shift = open.length + 1;
      return {
        changes: [{
          from: range.from,
          insert: open + " "
        }, {
          from: range.to,
          insert: " " + close
        }],
        range: _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(range.anchor + shift, range.head + shift)
      };
    });
  } else if (option != 1 /* Comment */ && comments.some(function (c) {
    return c;
  })) {
    var changes = [];
    for (var i = 0, comment; i < comments.length; i++) {
      if (comment = comments[i]) {
        var token = tokens[i],
          _comment = comment,
          open = _comment.open,
          close = _comment.close;
        changes.push({
          from: open.pos - token.open.length,
          to: open.pos + open.margin
        }, {
          from: close.pos - close.margin,
          to: close.pos + token.close.length
        });
      }
    }
    return {
      changes: changes
    };
  }
  return null;
}
// Performs toggle, comment and uncomment of line comments.
function changeLineComment(option, ranges, state) {
  var lines = [];
  var prevLine = -1;
  var _iterator = _createForOfIteratorHelper(ranges),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _step$value = _step.value,
        _from = _step$value.from,
        _to = _step$value.to;
      var startI = lines.length,
        minIndent = 1e9;
      for (var pos = _from; pos <= _to;) {
        var _line2 = state.doc.lineAt(pos);
        if (_line2.from > prevLine && (_from == _to || _to > _line2.from)) {
          prevLine = _line2.from;
          var _token2 = getConfig(state, pos).line;
          if (!_token2) continue;
          var _indent = /^\s*/.exec(_line2.text)[0].length;
          var _empty = _indent == _line2.length;
          var _comment2 = _line2.text.slice(_indent, _indent + _token2.length) == _token2 ? _indent : -1;
          if (_indent < _line2.text.length && _indent < minIndent) minIndent = _indent;
          lines.push({
            line: _line2,
            comment: _comment2,
            token: _token2,
            indent: _indent,
            empty: _empty,
            single: false
          });
        }
        pos = _line2.to + 1;
      }
      if (minIndent < 1e9) for (var i = startI; i < lines.length; i++) {
        if (lines[i].indent < lines[i].line.text.length) lines[i].indent = minIndent;
      }
      if (lines.length == startI + 1) lines[startI].single = true;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  if (option != 2 /* Uncomment */ && lines.some(function (l) {
    return l.comment < 0 && (!l.empty || l.single);
  })) {
    var changes = [];
    var _iterator2 = _createForOfIteratorHelper(lines),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var _step2$value = _step2.value,
          line = _step2$value.line,
          token = _step2$value.token,
          indent = _step2$value.indent,
          empty = _step2$value.empty,
          single = _step2$value.single;
        if (single || !empty) changes.push({
          from: line.from + indent,
          insert: token + " "
        });
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    var changeSet = state.changes(changes);
    return {
      changes: changeSet,
      selection: state.selection.map(changeSet, 1)
    };
  } else if (option != 1 /* Comment */ && lines.some(function (l) {
    return l.comment >= 0;
  })) {
    var _changes = [];
    var _iterator3 = _createForOfIteratorHelper(lines),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var _step3$value = _step3.value,
          _line = _step3$value.line,
          comment = _step3$value.comment,
          _token = _step3$value.token;
        if (comment >= 0) {
          var from = _line.from + comment,
            to = from + _token.length;
          if (_line.text[to - _line.from] == " ") to++;
          _changes.push({
            from: from,
            to: to
          });
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return {
      changes: _changes
    };
  }
  return null;
}


/***/ }),

/***/ "./node_modules/@codemirror/fold/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@codemirror/fold/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "codeFolding": () => (/* binding */ codeFolding),
/* harmony export */   "foldAll": () => (/* binding */ foldAll),
/* harmony export */   "foldCode": () => (/* binding */ foldCode),
/* harmony export */   "foldEffect": () => (/* binding */ foldEffect),
/* harmony export */   "foldGutter": () => (/* binding */ foldGutter),
/* harmony export */   "foldKeymap": () => (/* binding */ foldKeymap),
/* harmony export */   "foldedRanges": () => (/* binding */ foldedRanges),
/* harmony export */   "unfoldAll": () => (/* binding */ unfoldAll),
/* harmony export */   "unfoldCode": () => (/* binding */ unfoldCode),
/* harmony export */   "unfoldEffect": () => (/* binding */ unfoldEffect)
/* harmony export */ });
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/language */ "./node_modules/@codemirror/language/dist/index.js");
/* harmony import */ var _codemirror_gutter__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/gutter */ "./node_modules/@codemirror/gutter/dist/index.js");
/* harmony import */ var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/rangeset */ "./node_modules/@codemirror/rangeset/dist/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }





function mapRange(range, mapping) {
  var from = mapping.mapPos(range.from, 1),
    to = mapping.mapPos(range.to, -1);
  return from >= to ? undefined : {
    from: from,
    to: to
  };
}
/**
State effect that can be attached to a transaction to fold the
given range. (You probably only need this in exceptional
circumstances—usually you'll just want to let
[`foldCode`](https://codemirror.net/6/docs/ref/#fold.foldCode) and the [fold
gutter](https://codemirror.net/6/docs/ref/#fold.foldGutter) create the transactions.)
*/
var foldEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.StateEffect.define({
  map: mapRange
});
/**
State effect that unfolds the given range (if it was folded).
*/
var unfoldEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.StateEffect.define({
  map: mapRange
});
function selectedLines(view) {
  var lines = [];
  var _iterator = _createForOfIteratorHelper(view.state.selection.ranges),
    _step;
  try {
    var _loop = function _loop() {
      var head = _step.value.head;
      if (lines.some(function (l) {
        return l.from <= head && l.to >= head;
      })) return "continue";
      lines.push(view.visualLineAt(head));
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _ret = _loop();
      if (_ret === "continue") continue;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return lines;
}
var foldState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.StateField.define({
  create: function create() {
    return _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.none;
  },
  update: function update(folded, tr) {
    folded = folded.map(tr.changes);
    var _iterator2 = _createForOfIteratorHelper(tr.effects),
      _step2;
    try {
      var _loop2 = function _loop2() {
        var e = _step2.value;
        if (e.is(foldEffect) && !foldExists(folded, e.value.from, e.value.to)) folded = folded.update({
          add: [foldWidget.range(e.value.from, e.value.to)]
        });else if (e.is(unfoldEffect)) folded = folded.update({
          filter: function filter(from, to) {
            return e.value.from != from || e.value.to != to;
          },
          filterFrom: e.value.from,
          filterTo: e.value.to
        });
      };
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        _loop2();
      }
      // Clear folded ranges that cover the selection head
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    if (tr.selection) {
      var onSelection = false,
        head = tr.selection.main.head;
      folded.between(head, head, function (a, b) {
        if (a < head && b > head) onSelection = true;
      });
      if (onSelection) folded = folded.update({
        filterFrom: head,
        filterTo: head,
        filter: function filter(a, b) {
          return b <= head || a >= head;
        }
      });
    }
    return folded;
  },
  provide: function provide(f) {
    return _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.decorations.from(f);
  }
});
/**
Get a [range set](https://codemirror.net/6/docs/ref/#rangeset.RangeSet) containing the folded ranges
in the given state.
*/
function foldedRanges(state) {
  return state.field(foldState, false) || _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__.RangeSet.empty;
}
function foldInside(state, from, to) {
  var _a;
  var found = null;
  (_a = state.field(foldState, false)) === null || _a === void 0 ? void 0 : _a.between(from, to, function (from, to) {
    if (!found || found.from > from) found = {
      from: from,
      to: to
    };
  });
  return found;
}
function foldExists(folded, from, to) {
  var found = false;
  folded.between(from, from, function (a, b) {
    if (a == from && b == to) found = true;
  });
  return found;
}
function maybeEnable(state, other) {
  return state.field(foldState, false) ? other : other.concat(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.StateEffect.appendConfig.of(codeFolding()));
}
/**
Fold the lines that are selected, if possible.
*/
var foldCode = function foldCode(view) {
  var _iterator3 = _createForOfIteratorHelper(selectedLines(view)),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var line = _step3.value;
      var range = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.foldable)(view.state, line.from, line.to);
      if (range) {
        view.dispatch({
          effects: maybeEnable(view.state, [foldEffect.of(range), announceFold(view, range)])
        });
        return true;
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  return false;
};
/**
Unfold folded ranges on selected lines.
*/
var unfoldCode = function unfoldCode(view) {
  if (!view.state.field(foldState, false)) return false;
  var effects = [];
  var _iterator4 = _createForOfIteratorHelper(selectedLines(view)),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var line = _step4.value;
      var folded = foldInside(view.state, line.from, line.to);
      if (folded) effects.push(unfoldEffect.of(folded), announceFold(view, folded, false));
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  if (effects.length) view.dispatch({
    effects: effects
  });
  return effects.length > 0;
};
function announceFold(view, range) {
  var fold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var lineFrom = view.state.doc.lineAt(range.from).number,
    lineTo = view.state.doc.lineAt(range.to).number;
  return _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.announce.of("".concat(view.state.phrase(fold ? "Folded lines" : "Unfolded lines"), " ").concat(lineFrom, " ").concat(view.state.phrase("to"), " ").concat(lineTo, "."));
}
/**
Fold all top-level foldable ranges.
*/
var foldAll = function foldAll(view) {
  var state = view.state,
    effects = [];
  for (var pos = 0; pos < state.doc.length;) {
    var line = view.visualLineAt(pos),
      range = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.foldable)(state, line.from, line.to);
    if (range) effects.push(foldEffect.of(range));
    pos = (range ? view.visualLineAt(range.to) : line).to + 1;
  }
  if (effects.length) view.dispatch({
    effects: maybeEnable(view.state, effects)
  });
  return !!effects.length;
};
/**
Unfold all folded code.
*/
var unfoldAll = function unfoldAll(view) {
  var field = view.state.field(foldState, false);
  if (!field || !field.size) return false;
  var effects = [];
  field.between(0, view.state.doc.length, function (from, to) {
    effects.push(unfoldEffect.of({
      from: from,
      to: to
    }));
  });
  view.dispatch({
    effects: effects
  });
  return true;
};
/**
Default fold-related key bindings.

 - Ctrl-Shift-[ (Cmd-Alt-[ on macOS): [`foldCode`](https://codemirror.net/6/docs/ref/#fold.foldCode).
 - Ctrl-Shift-] (Cmd-Alt-] on macOS): [`unfoldCode`](https://codemirror.net/6/docs/ref/#fold.unfoldCode).
 - Ctrl-Alt-[: [`foldAll`](https://codemirror.net/6/docs/ref/#fold.foldAll).
 - Ctrl-Alt-]: [`unfoldAll`](https://codemirror.net/6/docs/ref/#fold.unfoldAll).
*/
var foldKeymap = [{
  key: "Ctrl-Shift-[",
  mac: "Cmd-Alt-[",
  run: foldCode
}, {
  key: "Ctrl-Shift-]",
  mac: "Cmd-Alt-]",
  run: unfoldCode
}, {
  key: "Ctrl-Alt-[",
  run: foldAll
}, {
  key: "Ctrl-Alt-]",
  run: unfoldAll
}];
var defaultConfig = {
  placeholderDOM: null,
  placeholderText: "…"
};
var foldConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Facet.define({
  combine: function combine(values) {
    return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.combineConfig)(values, defaultConfig);
  }
});
/**
Create an extension that configures code folding.
*/
function codeFolding(config) {
  var result = [foldState, baseTheme];
  if (config) result.push(foldConfig.of(config));
  return result;
}
var foldWidget = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.replace({
  widget: /*@__PURE__*/new ( /*#__PURE__*/function (_WidgetType) {
    _inherits(_class, _WidgetType);
    var _super = _createSuper(_class);
    function _class() {
      _classCallCheck(this, _class);
      return _super.apply(this, arguments);
    }
    _createClass(_class, [{
      key: "ignoreEvents",
      value: function ignoreEvents() {
        return false;
      }
    }, {
      key: "toDOM",
      value: function toDOM(view) {
        var state = view.state,
          conf = state.facet(foldConfig);
        if (conf.placeholderDOM) return conf.placeholderDOM();
        var element = document.createElement("span");
        element.textContent = conf.placeholderText;
        element.setAttribute("aria-label", state.phrase("folded code"));
        element.title = state.phrase("unfold");
        element.className = "cm-foldPlaceholder";
        element.onclick = function (event) {
          var line = view.visualLineAt(view.posAtDOM(event.target));
          var folded = foldInside(view.state, line.from, line.to);
          if (folded) view.dispatch({
            effects: unfoldEffect.of(folded)
          });
          event.preventDefault();
        };
        return element;
      }
    }]);
    return _class;
  }(_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.WidgetType))()
});
var foldGutterDefaults = {
  openText: "⌄",
  closedText: "›",
  markerDOM: null
};
var FoldMarker = /*#__PURE__*/function (_GutterMarker) {
  _inherits(FoldMarker, _GutterMarker);
  var _super2 = _createSuper(FoldMarker);
  function FoldMarker(config, open) {
    var _this;
    _classCallCheck(this, FoldMarker);
    _this = _super2.call(this);
    _this.config = config;
    _this.open = open;
    return _this;
  }
  _createClass(FoldMarker, [{
    key: "eq",
    value: function eq(other) {
      return this.config == other.config && this.open == other.open;
    }
  }, {
    key: "toDOM",
    value: function toDOM(view) {
      if (this.config.markerDOM) return this.config.markerDOM(this.open);
      var span = document.createElement("span");
      span.textContent = this.open ? this.config.openText : this.config.closedText;
      span.title = view.state.phrase(this.open ? "Fold line" : "Unfold line");
      return span;
    }
  }]);
  return FoldMarker;
}(_codemirror_gutter__WEBPACK_IMPORTED_MODULE_4__.GutterMarker); /**
                 Create an extension that registers a fold gutter, which shows a
                 fold status indicator before foldable lines (which can be clicked
                 to fold or unfold the line).
                 */
function foldGutter() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var fullConfig = Object.assign(Object.assign({}, foldGutterDefaults), config);
  var canFold = new FoldMarker(fullConfig, true),
    canUnfold = new FoldMarker(fullConfig, false);
  var _markers = _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.ViewPlugin.fromClass( /*#__PURE__*/function () {
    function _class2(view) {
      _classCallCheck(this, _class2);
      this.from = view.viewport.from;
      this.markers = this.buildMarkers(view);
    }
    _createClass(_class2, [{
      key: "update",
      value: function update(_update) {
        if (_update.docChanged || _update.viewportChanged || _update.startState.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.language) != _update.state.facet(_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.language) || _update.startState.field(foldState, false) != _update.state.field(foldState, false)) this.markers = this.buildMarkers(_update.view);
      }
    }, {
      key: "buildMarkers",
      value: function buildMarkers(view) {
        var builder = new _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__.RangeSetBuilder();
        view.viewportLines(function (line) {
          var mark = foldInside(view.state, line.from, line.to) ? canUnfold : (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.foldable)(view.state, line.from, line.to) ? canFold : null;
          if (mark) builder.add(line.from, line.from, mark);
        });
        return builder.finish();
      }
    }]);
    return _class2;
  }());
  return [_markers, (0,_codemirror_gutter__WEBPACK_IMPORTED_MODULE_4__.gutter)({
    "class": "cm-foldGutter",
    markers: function markers(view) {
      var _a;
      return ((_a = view.plugin(_markers)) === null || _a === void 0 ? void 0 : _a.markers) || _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_2__.RangeSet.empty;
    },
    initialSpacer: function initialSpacer() {
      return new FoldMarker(fullConfig, false);
    },
    domEventHandlers: {
      click: function click(view, line) {
        var folded = foldInside(view.state, line.from, line.to);
        if (folded) {
          view.dispatch({
            effects: unfoldEffect.of(folded)
          });
          return true;
        }
        var range = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.foldable)(view.state, line.from, line.to);
        if (range) {
          view.dispatch({
            effects: foldEffect.of(range)
          });
          return true;
        }
        return false;
      }
    }
  }), codeFolding()];
}
var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.baseTheme({
  ".cm-foldPlaceholder": {
    backgroundColor: "#eee",
    border: "1px solid #ddd",
    color: "#888",
    borderRadius: ".2em",
    margin: "0 1px",
    padding: "0 1px",
    cursor: "pointer"
  },
  ".cm-foldGutter .cm-gutterElement": {
    padding: "0 1px",
    cursor: "pointer"
  }
});


/***/ }),

/***/ "./node_modules/@codemirror/gutter/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@codemirror/gutter/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "GutterMarker": () => (/* binding */ GutterMarker),
/* harmony export */   "gutter": () => (/* binding */ gutter),
/* harmony export */   "gutterLineClass": () => (/* binding */ gutterLineClass),
/* harmony export */   "gutters": () => (/* binding */ gutters),
/* harmony export */   "highlightActiveLineGutter": () => (/* binding */ highlightActiveLineGutter),
/* harmony export */   "lineNumberMarkers": () => (/* binding */ lineNumberMarkers),
/* harmony export */   "lineNumbers": () => (/* binding */ lineNumbers)
/* harmony export */ });
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/rangeset */ "./node_modules/@codemirror/rangeset/dist/index.js");
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }




/**
A gutter marker represents a bit of information attached to a line
in a specific gutter. Your own custom markers have to extend this
class.
*/
var GutterMarker = /*#__PURE__*/function (_RangeValue) {
  _inherits(GutterMarker, _RangeValue);
  var _super = _createSuper(GutterMarker);
  function GutterMarker() {
    _classCallCheck(this, GutterMarker);
    return _super.apply(this, arguments);
  }
  _createClass(GutterMarker, [{
    key: "compare",
    value:
    /**
    @internal
    */
    function compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    Compare this marker to another marker of the same type.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      return false;
    }
    /**
    @internal FIXME remove on next major version
    */
  }, {
    key: "at",
    value: function at(pos) {
      return this.range(pos);
    }
  }]);
  return GutterMarker;
}(_codemirror_rangeset__WEBPACK_IMPORTED_MODULE_0__.RangeValue);
GutterMarker.prototype.elementClass = "";
GutterMarker.prototype.toDOM = undefined;
GutterMarker.prototype.mapMode = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.MapMode.TrackBefore;
GutterMarker.prototype.point = true;
/**
Facet used to add a class to all gutter elements for a given line.
Markers given to this facet should _only_ define an
[`elementclass`](https://codemirror.net/6/docs/ref/#gutter.GutterMarker.elementClass), not a
[`toDOM`](https://codemirror.net/6/docs/ref/#gutter.GutterMarker.toDOM) (or the marker will appear
in all gutters for the line).
*/
var gutterLineClass = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define();
var defaults = {
  "class": "",
  renderEmptyElements: false,
  elementStyle: "",
  markers: function markers() {
    return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_0__.RangeSet.empty;
  },
  lineMarker: function lineMarker() {
    return null;
  },
  initialSpacer: null,
  updateSpacer: null,
  domEventHandlers: {}
};
var activeGutters = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define();
/**
Define an editor gutter. The order in which the gutters appear is
determined by their extension priority.
*/
function gutter(config) {
  return [gutters(), activeGutters.of(Object.assign(Object.assign({}, defaults), config))];
}
var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.baseTheme({
  ".cm-gutters": {
    display: "flex",
    height: "100%",
    boxSizing: "border-box",
    left: 0,
    zIndex: 200
  },
  "&light .cm-gutters": {
    backgroundColor: "#f5f5f5",
    color: "#999",
    borderRight: "1px solid #ddd"
  },
  "&dark .cm-gutters": {
    backgroundColor: "#333338",
    color: "#ccc"
  },
  ".cm-gutter": {
    display: "flex !important",
    flexDirection: "column",
    flexShrink: 0,
    boxSizing: "border-box",
    height: "100%",
    overflow: "hidden"
  },
  ".cm-gutterElement": {
    boxSizing: "border-box"
  },
  ".cm-lineNumbers .cm-gutterElement": {
    padding: "0 3px 0 5px",
    minWidth: "20px",
    textAlign: "right",
    whiteSpace: "nowrap"
  },
  "&light .cm-activeLineGutter": {
    backgroundColor: "#e2f2ff"
  },
  "&dark .cm-activeLineGutter": {
    backgroundColor: "#222227"
  }
});
var unfixGutters = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({
  combine: function combine(values) {
    return values.some(function (x) {
      return x;
    });
  }
});
/**
The gutter-drawing plugin is automatically enabled when you add a
gutter, but you can use this function to explicitly configure it.

Unless `fixed` is explicitly set to `false`, the gutters are
fixed, meaning they don't scroll along with the content
horizontally (except on Internet Explorer, which doesn't support
CSS [`position:
sticky`](https://developer.mozilla.org/en-US/docs/Web/CSS/position#sticky)).
*/
function gutters(config) {
  var result = [gutterView, baseTheme];
  if (config && config.fixed === false) result.push(unfixGutters.of(true));
  return result;
}
var gutterView = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    _classCallCheck(this, _class);
    this.view = view;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutters";
    this.dom.setAttribute("aria-hidden", "true");
    this.gutters = view.state.facet(activeGutters).map(function (conf) {
      return new SingleGutterView(view, conf);
    });
    var _iterator = _createForOfIteratorHelper(this.gutters),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _gutter = _step.value;
        this.dom.appendChild(_gutter.dom);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    this.fixed = !view.state.facet(unfixGutters);
    if (this.fixed) {
      // FIXME IE11 fallback, which doesn't support position: sticky,
      // by using position: relative + event handlers that realign the
      // gutter (or just force fixed=false on IE11?)
      this.dom.style.position = "sticky";
    }
    view.scrollDOM.insertBefore(this.dom, view.contentDOM);
    this.syncGutters();
  }
  _createClass(_class, [{
    key: "update",
    value: function update(_update) {
      if (this.updateGutters(_update)) this.syncGutters();
    }
  }, {
    key: "syncGutters",
    value: function syncGutters() {
      var _this = this;
      var lineClasses = _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_0__.RangeSet.iter(this.view.state.facet(gutterLineClass), this.view.viewport.from);
      var classSet = [];
      var contexts = this.gutters.map(function (gutter) {
        return new UpdateContext(gutter, _this.view.viewport);
      });
      this.view.viewportLines(function (line) {
        var text;
        if (Array.isArray(line.type)) {
          var _iterator2 = _createForOfIteratorHelper(line.type),
            _step2;
          try {
            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
              var b = _step2.value;
              if (b.type == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.BlockType.Text) {
                text = b;
                break;
              }
            }
          } catch (err) {
            _iterator2.e(err);
          } finally {
            _iterator2.f();
          }
        } else {
          text = line.type == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.BlockType.Text ? line : undefined;
        }
        if (!text) return;
        if (classSet.length) classSet = [];
        advanceCursor(lineClasses, classSet, line.from);
        var _iterator3 = _createForOfIteratorHelper(contexts),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var cx = _step3.value;
            cx.line(_this.view, text, classSet);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }, 0);
      var _iterator4 = _createForOfIteratorHelper(contexts),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var cx = _step4.value;
          cx.finish();
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      this.dom.style.minHeight = this.view.contentHeight + "px";
      if (this.view.state.facet(unfixGutters) != !this.fixed) {
        this.fixed = !this.fixed;
        this.dom.style.position = this.fixed ? "sticky" : "";
      }
    }
  }, {
    key: "updateGutters",
    value: function updateGutters(update) {
      var prev = update.startState.facet(activeGutters),
        cur = update.state.facet(activeGutters);
      var change = update.docChanged || update.heightChanged || update.viewportChanged || !_codemirror_rangeset__WEBPACK_IMPORTED_MODULE_0__.RangeSet.eq(update.startState.facet(gutterLineClass), update.state.facet(gutterLineClass), update.view.viewport.from, update.view.viewport.to);
      if (prev == cur) {
        var _iterator5 = _createForOfIteratorHelper(this.gutters),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var _gutter2 = _step5.value;
            if (_gutter2.update(update)) change = true;
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      } else {
        change = true;
        var _gutters = [];
        var _iterator6 = _createForOfIteratorHelper(cur),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var conf = _step6.value;
            var known = prev.indexOf(conf);
            if (known < 0) {
              _gutters.push(new SingleGutterView(this.view, conf));
            } else {
              this.gutters[known].update(update);
              _gutters.push(this.gutters[known]);
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
        var _iterator7 = _createForOfIteratorHelper(this.gutters),
          _step7;
        try {
          for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
            var _g = _step7.value;
            _g.dom.remove();
          }
        } catch (err) {
          _iterator7.e(err);
        } finally {
          _iterator7.f();
        }
        for (var _i = 0, _gutters2 = _gutters; _i < _gutters2.length; _i++) {
          var g = _gutters2[_i];
          this.dom.appendChild(g.dom);
        }
        this.gutters = _gutters;
      }
      return change;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.dom.remove();
    }
  }]);
  return _class;
}(), {
  provide: /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_2__.PluginField.scrollMargins.from(function (value) {
    if (value.gutters.length == 0 || !value.fixed) return null;
    return value.view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.Direction.LTR ? {
      left: value.dom.offsetWidth
    } : {
      right: value.dom.offsetWidth
    };
  })
});
function asArray(val) {
  return Array.isArray(val) ? val : [val];
}
function advanceCursor(cursor, collect, pos) {
  while (cursor.value && cursor.from <= pos) {
    if (cursor.from == pos) collect.push(cursor.value);
    cursor.next();
  }
}
var UpdateContext = /*#__PURE__*/function () {
  function UpdateContext(gutter, viewport) {
    _classCallCheck(this, UpdateContext);
    this.gutter = gutter;
    this.localMarkers = [];
    this.i = 0;
    this.height = 0;
    this.cursor = _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_0__.RangeSet.iter(gutter.markers, viewport.from);
  }
  _createClass(UpdateContext, [{
    key: "line",
    value: function line(view, _line, extraMarkers) {
      if (this.localMarkers.length) this.localMarkers = [];
      advanceCursor(this.cursor, this.localMarkers, _line.from);
      var localMarkers = extraMarkers.length ? this.localMarkers.concat(extraMarkers) : this.localMarkers;
      var forLine = this.gutter.config.lineMarker(view, _line, localMarkers);
      if (forLine) localMarkers.unshift(forLine);
      var gutter = this.gutter;
      if (localMarkers.length == 0 && !gutter.config.renderEmptyElements) return;
      var above = _line.top - this.height;
      if (this.i == gutter.elements.length) {
        var newElt = new GutterElement(view, _line.height, above, localMarkers);
        gutter.elements.push(newElt);
        gutter.dom.appendChild(newElt.dom);
      } else {
        var elt = gutter.elements[this.i];
        if (sameMarkers(localMarkers, elt.markers)) localMarkers = elt.markers;
        elt.update(view, _line.height, above, localMarkers);
      }
      this.height = _line.bottom;
      this.i++;
    }
  }, {
    key: "finish",
    value: function finish() {
      var gutter = this.gutter;
      while (gutter.elements.length > this.i) {
        gutter.dom.removeChild(gutter.elements.pop().dom);
      }
    }
  }]);
  return UpdateContext;
}();
var SingleGutterView = /*#__PURE__*/function () {
  function SingleGutterView(view, config) {
    var _this2 = this;
    _classCallCheck(this, SingleGutterView);
    this.view = view;
    this.config = config;
    this.elements = [];
    this.spacer = null;
    this.dom = document.createElement("div");
    this.dom.className = "cm-gutter" + (this.config["class"] ? " " + this.config["class"] : "");
    var _loop = function _loop(prop) {
      _this2.dom.addEventListener(prop, function (event) {
        var line = view.visualLineAtHeight(event.clientY, view.contentDOM.getBoundingClientRect().top);
        if (config.domEventHandlers[prop](view, line, event)) event.preventDefault();
      });
    };
    for (var prop in config.domEventHandlers) {
      _loop(prop);
    }
    this.markers = asArray(config.markers(view));
    if (config.initialSpacer) {
      this.spacer = new GutterElement(view, 0, 0, [config.initialSpacer(view)]);
      this.dom.appendChild(this.spacer.dom);
      this.spacer.dom.style.cssText += "visibility: hidden; pointer-events: none";
    }
  }
  _createClass(SingleGutterView, [{
    key: "update",
    value: function update(_update2) {
      var prevMarkers = this.markers;
      this.markers = asArray(this.config.markers(_update2.view));
      if (this.spacer && this.config.updateSpacer) {
        var updated = this.config.updateSpacer(this.spacer.markers[0], _update2);
        if (updated != this.spacer.markers[0]) this.spacer.update(_update2.view, 0, 0, [updated]);
      }
      var vp = _update2.view.viewport;
      return !_codemirror_rangeset__WEBPACK_IMPORTED_MODULE_0__.RangeSet.eq(this.markers, prevMarkers, vp.from, vp.to);
    }
  }]);
  return SingleGutterView;
}();
var GutterElement = /*#__PURE__*/function () {
  function GutterElement(view, height, above, markers) {
    _classCallCheck(this, GutterElement);
    this.height = -1;
    this.above = 0;
    this.dom = document.createElement("div");
    this.update(view, height, above, markers);
  }
  _createClass(GutterElement, [{
    key: "update",
    value: function update(view, height, above, markers) {
      if (this.height != height) this.dom.style.height = (this.height = height) + "px";
      if (this.above != above) this.dom.style.marginTop = (this.above = above) ? above + "px" : "";
      if (this.markers != markers) {
        this.markers = markers;
        for (var ch; ch = this.dom.lastChild;) {
          ch.remove();
        }
        var cls = "cm-gutterElement";
        var _iterator8 = _createForOfIteratorHelper(markers),
          _step8;
        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var m = _step8.value;
            if (m.toDOM) this.dom.appendChild(m.toDOM(view));
            var c = m.elementClass;
            if (c) cls += " " + c;
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }
        this.dom.className = cls;
      }
    }
  }]);
  return GutterElement;
}();
function sameMarkers(a, b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    if (!a[i].compare(b[i])) return false;
  }
  return true;
}
/**
Facet used to provide markers to the line number gutter.
*/
var lineNumberMarkers = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define();
var lineNumberConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({
  combine: function combine(values) {
    return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.combineConfig)(values, {
      formatNumber: String,
      domEventHandlers: {}
    }, {
      domEventHandlers: function domEventHandlers(a, b) {
        var result = Object.assign({}, a);
        var _loop2 = function _loop2(event) {
          var exists = result[event],
            add = b[event];
          result[event] = exists ? function (view, line, event) {
            return exists(view, line, event) || add(view, line, event);
          } : add;
        };
        for (var event in b) {
          _loop2(event);
        }
        return result;
      }
    });
  }
});
var NumberMarker = /*#__PURE__*/function (_GutterMarker) {
  _inherits(NumberMarker, _GutterMarker);
  var _super2 = _createSuper(NumberMarker);
  function NumberMarker(number) {
    var _this3;
    _classCallCheck(this, NumberMarker);
    _this3 = _super2.call(this);
    _this3.number = number;
    return _this3;
  }
  _createClass(NumberMarker, [{
    key: "eq",
    value: function eq(other) {
      return this.number == other.number;
    }
  }, {
    key: "toDOM",
    value: function toDOM(_view) {
      return document.createTextNode(this.number);
    }
  }]);
  return NumberMarker;
}(GutterMarker);
function formatNumber(view, number) {
  return view.state.facet(lineNumberConfig).formatNumber(number, view.state);
}
var lineNumberGutter = /*@__PURE__*/gutter({
  "class": "cm-lineNumbers",
  markers: function markers(view) {
    return view.state.facet(lineNumberMarkers);
  },
  lineMarker: function lineMarker(view, line, others) {
    if (others.some(function (m) {
      return m.toDOM;
    })) return null;
    return new NumberMarker(formatNumber(view, view.state.doc.lineAt(line.from).number));
  },
  initialSpacer: function initialSpacer(view) {
    return new NumberMarker(formatNumber(view, maxLineNumber(view.state.doc.lines)));
  },
  updateSpacer: function updateSpacer(spacer, update) {
    var max = formatNumber(update.view, maxLineNumber(update.view.state.doc.lines));
    return max == spacer.number ? spacer : new NumberMarker(max);
  }
});
/**
Create a line number gutter extension.
*/
function lineNumbers() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [lineNumberConfig.of(config), lineNumberGutter];
}
function maxLineNumber(lines) {
  var last = 9;
  while (last < lines) {
    last = last * 10 + 9;
  }
  return last;
}
var activeLineGutterMarker = /*@__PURE__*/new ( /*#__PURE__*/function (_GutterMarker2) {
  _inherits(_class2, _GutterMarker2);
  var _super3 = _createSuper(_class2);
  function _class2() {
    var _this4;
    _classCallCheck(this, _class2);
    _this4 = _super3.apply(this, arguments);
    _this4.elementClass = "cm-activeLineGutter";
    return _this4;
  }
  _createClass(_class2, [{
    key: "eq",
    value: function eq() {
      return true;
    }
  }]);
  return _class2;
}(GutterMarker))();
var activeLineGutterHighlighter = /*@__PURE__*/gutterLineClass.compute(["selection"], function (state) {
  var marks = [],
    last = -1;
  var _iterator9 = _createForOfIteratorHelper(state.selection.ranges),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var range = _step9.value;
      if (range.empty) {
        var linePos = state.doc.lineAt(range.head).from;
        if (linePos > last) {
          last = linePos;
          marks.push(activeLineGutterMarker.range(linePos));
        }
      }
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_0__.RangeSet.of(marks);
});
/**
Returns an extension that adds a `cm-activeLineGutter` class to
all gutter elements on the [active
line](https://codemirror.net/6/docs/ref/#view.highlightActiveLine).
*/
function highlightActiveLineGutter() {
  return activeLineGutterHighlighter;
}


/***/ }),

/***/ "./node_modules/@codemirror/highlight/dist/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/@codemirror/highlight/dist/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "HighlightStyle": () => (/* binding */ HighlightStyle),
/* harmony export */   "Tag": () => (/* binding */ Tag),
/* harmony export */   "classHighlightStyle": () => (/* binding */ classHighlightStyle),
/* harmony export */   "defaultHighlightStyle": () => (/* binding */ defaultHighlightStyle),
/* harmony export */   "highlightTree": () => (/* binding */ highlightTree),
/* harmony export */   "styleTags": () => (/* binding */ styleTags),
/* harmony export */   "tags": () => (/* binding */ tags)
/* harmony export */ });
/* harmony import */ var lezer_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lezer-tree */ "./node_modules/lezer-tree/dist/tree.es.js");
/* harmony import */ var style_mod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! style-mod */ "./node_modules/style-mod/src/style-mod.js");
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/language */ "./node_modules/@codemirror/language/dist/index.js");
/* harmony import */ var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @codemirror/rangeset */ "./node_modules/@codemirror/rangeset/dist/index.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }






var nextTagID = 0;
/**
Highlighting tags are markers that denote a highlighting category.
They are [associated](https://codemirror.net/6/docs/ref/#highlight.styleTags) with parts of a syntax
tree by a language mode, and then mapped to an actual CSS style by
a [highlight style](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle).

Because syntax tree node types and highlight styles have to be
able to talk the same language, CodeMirror uses a mostly _closed_
[vocabulary](https://codemirror.net/6/docs/ref/#highlight.tags) of syntax tags (as opposed to
traditional open string-based systems, which make it hard for
highlighting themes to cover all the tokens produced by the
various languages).

It _is_ possible to [define](https://codemirror.net/6/docs/ref/#highlight.Tag^define) your own
highlighting tags for system-internal use (where you control both
the language package and the highlighter), but such tags will not
be picked up by regular highlighters (though you can derive them
from standard tags to allow highlighters to fall back to those).
*/
var Tag = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Tag(
  /**
  The set of tags that match this tag, starting with this one
  itself, sorted in order of decreasing specificity. @internal
  */
  set,
  /**
  The base unmodified tag that this one is based on, if it's
  modified @internal
  */
  base,
  /**
  The modifiers applied to this.base @internal
  */
  modified) {
    _classCallCheck(this, Tag);
    this.set = set;
    this.base = base;
    this.modified = modified;
    /**
    @internal
    */
    this.id = nextTagID++;
  }
  /**
  Define a new tag. If `parent` is given, the tag is treated as a
  sub-tag of that parent, and [highlight
  styles](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle) that don't mention this tag
  will try to fall back to the parent tag (or grandparent tag,
  etc).
  */
  _createClass(Tag, null, [{
    key: "define",
    value: function define(parent) {
      if (parent === null || parent === void 0 ? void 0 : parent.base) throw new Error("Can not derive from a modified tag");
      var tag = new Tag([], null, []);
      tag.set.push(tag);
      if (parent) {
        var _iterator = _createForOfIteratorHelper(parent.set),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var _t = _step.value;
            tag.set.push(_t);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return tag;
    }
    /**
    Define a tag _modifier_, which is a function that, given a tag,
    will return a tag that is a subtag of the original. Applying the
    same modifier to a twice tag will return the same value (`m1(t1)
    == m1(t1)`) and applying multiple modifiers will, regardless or
    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).
    
    When multiple modifiers are applied to a given base tag, each
    smaller set of modifiers is registered as a parent, so that for
    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,
    `m1(m3(t1)`, and so on.
    */
  }, {
    key: "defineModifier",
    value: function defineModifier() {
      var mod = new Modifier();
      return function (tag) {
        if (tag.modified.indexOf(mod) > -1) return tag;
        return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort(function (a, b) {
          return a.id - b.id;
        }));
      };
    }
  }]);
  return Tag;
}();
var nextModifierID = 0;
var Modifier = /*#__PURE__*/function () {
  function Modifier() {
    _classCallCheck(this, Modifier);
    this.instances = [];
    this.id = nextModifierID++;
  }
  _createClass(Modifier, null, [{
    key: "get",
    value: function get(base, mods) {
      if (!mods.length) return base;
      var exists = mods[0].instances.find(function (t) {
        return t.base == base && sameArray(mods, t.modified);
      });
      if (exists) return exists;
      var set = [],
        tag = new Tag(set, base, mods);
      var _iterator2 = _createForOfIteratorHelper(mods),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var m = _step2.value;
          m.instances.push(tag);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      var configs = permute(mods);
      var _iterator3 = _createForOfIteratorHelper(base.set),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var parent = _step3.value;
          var _iterator4 = _createForOfIteratorHelper(configs),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var config = _step4.value;
              set.push(Modifier.get(parent, config));
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return tag;
    }
  }]);
  return Modifier;
}();
function sameArray(a, b) {
  return a.length == b.length && a.every(function (x, i) {
    return x == b[i];
  });
}
function permute(array) {
  var result = [array];
  for (var i = 0; i < array.length; i++) {
    var _iterator5 = _createForOfIteratorHelper(permute(array.slice(0, i).concat(array.slice(i + 1)))),
      _step5;
    try {
      for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
        var a = _step5.value;
        result.push(a);
      }
    } catch (err) {
      _iterator5.e(err);
    } finally {
      _iterator5.f();
    }
  }
  return result;
}
/**
This function is used to add a set of tags to a language syntax
via
[`Parser.configure`](https://lezer.codemirror.net/docs/ref#lezer.Parser.configure).

The argument object maps node selectors to [highlighting
tags](https://codemirror.net/6/docs/ref/#highlight.Tag) or arrays of tags.

Node selectors may hold one or more (space-separated) node paths.
Such a path can be a [node
name](https://lezer.codemirror.net/docs/ref#tree.NodeType.name),
or multiple node names (or `*` wildcards) separated by slash
characters, as in `"Block/Declaration/VariableName"`. Such a path
matches the final node but only if its direct parent nodes are the
other nodes mentioned. A `*` in such a path matches any parent,
but only a single level—wildcards that match multiple parents
aren't supported, both for efficiency reasons and because Lezer
trees make it rather hard to reason about what they would match.)

A path can be ended with `/...` to indicate that the tag assigned
to the node should also apply to all child nodes, even if they
match their own style (by default, only the innermost style is
used).

When a path ends in `!`, as in `Attribute!`, no further matching
happens for the node's child nodes, and the entire node gets the
given style.

In this notation, node names that contain `/`, `!`, `*`, or `...`
must be quoted as JSON strings.

For example:

```javascript
parser.withProps(
  styleTags({
    // Style Number and BigNumber nodes
    "Number BigNumber": tags.number,
    // Style Escape nodes whose parent is String
    "String/Escape": tags.escape,
    // Style anything inside Attributes nodes
    "Attributes!": tags.meta,
    // Add a style to all content inside Italic nodes
    "Italic/...": tags.emphasis,
    // Style InvalidString nodes as both `string` and `invalid`
    "InvalidString": [tags.string, tags.invalid],
    // Style the node named "/" as punctuation
    '"/"': tags.punctuation
  })
)
```
*/
function styleTags(spec) {
  var byName = Object.create(null);
  for (var prop in spec) {
    var _tags = spec[prop];
    if (!Array.isArray(_tags)) _tags = [_tags];
    var _iterator6 = _createForOfIteratorHelper(prop.split(" ")),
      _step6;
    try {
      for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
        var part = _step6.value;
        if (part) {
          var pieces = [],
            mode = 2 /* Normal */,
            rest = part;
          for (var pos = 0;;) {
            if (rest == "..." && pos > 0 && pos + 3 == part.length) {
              mode = 1 /* Inherit */;
              break;
            }
            var m = /^"(?:[^"\\]|\\.)*?"|[^\/!]+/.exec(rest);
            if (!m) throw new RangeError("Invalid path: " + part);
            pieces.push(m[0] == "*" ? null : m[0][0] == '"' ? JSON.parse(m[0]) : m[0]);
            pos += m[0].length;
            if (pos == part.length) break;
            var next = part[pos++];
            if (pos == part.length && next == "!") {
              mode = 0 /* Opaque */;
              break;
            }
            if (next != "/") throw new RangeError("Invalid path: " + part);
            rest = part.slice(pos);
          }
          var last = pieces.length - 1,
            inner = pieces[last];
          if (!inner) throw new RangeError("Invalid path: " + part);
          var rule = new Rule(_tags, mode, last > 0 ? pieces.slice(0, last) : null);
          byName[inner] = rule.sort(byName[inner]);
        }
      }
    } catch (err) {
      _iterator6.e(err);
    } finally {
      _iterator6.f();
    }
  }
  return ruleNodeProp.add(byName);
}
var ruleNodeProp = /*@__PURE__*/new lezer_tree__WEBPACK_IMPORTED_MODULE_0__.NodeProp();
var highlightStyle = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({
  combine: function combine(stylings) {
    return stylings.length ? HighlightStyle.combinedMatch(stylings) : null;
  }
});
var fallbackHighlightStyle = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({
  combine: function combine(values) {
    return values.length ? values[0].match : null;
  }
});
function getHighlightStyle(state) {
  return state.facet(highlightStyle) || state.facet(fallbackHighlightStyle);
}
var Rule = /*#__PURE__*/function () {
  function Rule(tags, mode, context, next) {
    _classCallCheck(this, Rule);
    this.tags = tags;
    this.mode = mode;
    this.context = context;
    this.next = next;
  }
  _createClass(Rule, [{
    key: "sort",
    value: function sort(other) {
      if (!other || other.depth < this.depth) {
        this.next = other;
        return this;
      }
      other.next = this.sort(other.next);
      return other;
    }
  }, {
    key: "depth",
    get: function get() {
      return this.context ? this.context.length : 0;
    }
  }]);
  return Rule;
}(); /**
     A highlight style associates CSS styles with higlighting
     [tags](https://codemirror.net/6/docs/ref/#highlight.Tag).
     */
var HighlightStyle = /*#__PURE__*/function () {
  function HighlightStyle(spec, options) {
    _classCallCheck(this, HighlightStyle);
    this.map = Object.create(null);
    var modSpec;
    function def(spec) {
      var cls = style_mod__WEBPACK_IMPORTED_MODULE_1__.StyleModule.newName();
      (modSpec || (modSpec = Object.create(null)))["." + cls] = spec;
      return cls;
    }
    this.all = typeof options.all == "string" ? options.all : options.all ? def(options.all) : null;
    var _iterator7 = _createForOfIteratorHelper(spec),
      _step7;
    try {
      for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
        var style = _step7.value;
        var cls = (style["class"] || def(Object.assign({}, style, {
          tag: null
        }))) + (this.all ? " " + this.all : "");
        var _tags2 = style.tag;
        if (!Array.isArray(_tags2)) this.map[_tags2.id] = cls;else {
          var _iterator8 = _createForOfIteratorHelper(_tags2),
            _step8;
          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var tag = _step8.value;
              this.map[tag.id] = cls;
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
        }
      }
    } catch (err) {
      _iterator7.e(err);
    } finally {
      _iterator7.f();
    }
    this.module = modSpec ? new style_mod__WEBPACK_IMPORTED_MODULE_1__.StyleModule(modSpec) : null;
    this.scope = options.scope || null;
    this.match = this.match.bind(this);
    var ext = [treeHighlighter];
    if (this.module) ext.push(_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.EditorView.styleModule.of(this.module));
    this.extension = ext.concat(highlightStyle.of(this));
    this.fallback = ext.concat(fallbackHighlightStyle.of(this));
  }
  /**
  Returns the CSS class associated with the given tag, if any.
  This method is bound to the instance by the constructor.
  */
  _createClass(HighlightStyle, [{
    key: "match",
    value: function match(tag, scope) {
      if (this.scope && scope != this.scope) return null;
      var _iterator9 = _createForOfIteratorHelper(tag.set),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var _t2 = _step9.value;
          var match = this.map[_t2.id];
          if (match !== undefined) {
            if (_t2 != tag) this.map[tag.id] = match;
            return match;
          }
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      return this.map[tag.id] = this.all;
    }
    /**
    Combines an array of highlight styles into a single match
    function that returns all of the classes assigned by the styles
    for a given tag.
    */
  }], [{
    key: "combinedMatch",
    value: function combinedMatch(styles) {
      if (styles.length == 1) return styles[0].match;
      var cache = styles.some(function (s) {
        return s.scope;
      }) ? undefined : Object.create(null);
      return function (tag, scope) {
        var cached = cache && cache[tag.id];
        if (cached !== undefined) return cached;
        var result = null;
        var _iterator10 = _createForOfIteratorHelper(styles),
          _step10;
        try {
          for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
            var style = _step10.value;
            var value = style.match(tag, scope);
            if (value) result = result ? result + " " + value : value;
          }
        } catch (err) {
          _iterator10.e(err);
        } finally {
          _iterator10.f();
        }
        if (cache) cache[tag.id] = result;
        return result;
      };
    }
    /**
    Create a highlighter style that associates the given styles to
    the given tags. The spec must be objects that hold a style tag
    or array of tags in their `tag` property, and either a single
    `class` property providing a static CSS class (for highlighters
    like [`classHighlightStyle`](https://codemirror.net/6/docs/ref/#highlight.classHighlightStyle)
    that rely on external styling), or a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)-style
    set of CSS properties (which define the styling for those tags).
    
    The CSS rules created for a highlighter will be emitted in the
    order of the spec's properties. That means that for elements that
    have multiple tags associated with them, styles defined further
    down in the list will have a higher CSS precedence than styles
    defined earlier.
    */
  }, {
    key: "define",
    value: function define(specs, options) {
      return new HighlightStyle(specs, options || {});
    }
    /**
    Returns the CSS classes (if any) that the highlight styles
    active in the given state would assign to the given a style
    [tag](https://codemirror.net/6/docs/ref/#highlight.Tag) and (optional) language
    [scope](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle^define^options.scope).
    */
  }, {
    key: "get",
    value: function get(state, tag, scope) {
      var style = getHighlightStyle(state);
      return style && style(tag, scope || lezer_tree__WEBPACK_IMPORTED_MODULE_0__.NodeType.none);
    }
  }]);
  return HighlightStyle;
}(); /**
     Given a string of code and a language, parse the code in that
     language and run the tree highlighter over the resulting syntax
     tree.
     */
function highlightTree(tree,
/**
Get the CSS classes used to style a given [tag](https://codemirror.net/6/docs/ref/#highlight.Tag),
or `null` if it isn't styled. (You'll often want to pass a
highlight style's [`match`](https://codemirror.net/6/docs/ref/#highlight.HighlightStyle.match)
method here.)
*/
getStyle,
/**
Assign styling to a region of the text. Will be called, in order
of position, for any ranges where more than zero classes apply.
`classes` is a space separated string of CSS classes.
*/
putStyle) {
  highlightTreeRange(tree, 0, tree.length, getStyle, putStyle);
}
var TreeHighlighter = /*#__PURE__*/function () {
  function TreeHighlighter(view) {
    _classCallCheck(this, TreeHighlighter);
    this.markCache = Object.create(null);
    this.tree = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_4__.syntaxTree)(view.state);
    this.decorations = this.buildDeco(view, getHighlightStyle(view.state));
  }
  _createClass(TreeHighlighter, [{
    key: "update",
    value: function update(_update) {
      var tree = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_4__.syntaxTree)(_update.state),
        style = getHighlightStyle(_update.state);
      var styleChange = style != _update.startState.facet(highlightStyle);
      if (tree.length < _update.view.viewport.to && !styleChange) {
        this.decorations = this.decorations.map(_update.changes);
      } else if (tree != this.tree || _update.viewportChanged || styleChange) {
        this.tree = tree;
        this.decorations = this.buildDeco(_update.view, style);
      }
    }
  }, {
    key: "buildDeco",
    value: function buildDeco(view, match) {
      var _this = this;
      if (!match || !this.tree.length) return _codemirror_view__WEBPACK_IMPORTED_MODULE_3__.Decoration.none;
      var builder = new _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_5__.RangeSetBuilder();
      var _iterator11 = _createForOfIteratorHelper(view.visibleRanges),
        _step11;
      try {
        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
          var _step11$value = _step11.value,
            from = _step11$value.from,
            to = _step11$value.to;
          highlightTreeRange(this.tree, from, to, match, function (from, to, style) {
            builder.add(from, to, _this.markCache[style] || (_this.markCache[style] = _codemirror_view__WEBPACK_IMPORTED_MODULE_3__.Decoration.mark({
              "class": style
            })));
          });
        }
      } catch (err) {
        _iterator11.e(err);
      } finally {
        _iterator11.f();
      }
      return builder.finish();
    }
  }]);
  return TreeHighlighter;
}(); // This extension installs a highlighter that highlights based on the
// syntax tree and highlight style.
var treeHighlighter = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Prec.fallback( /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.ViewPlugin.fromClass(TreeHighlighter, {
  decorations: function decorations(v) {
    return v.decorations;
  }
}));
var nodeStack = [""];
function highlightTreeRange(tree, from, to, style, span) {
  var spanStart = from,
    spanClass = "";
  var cursor = tree.topNode.cursor;
  function flush(at, newClass) {
    if (spanClass) span(spanStart, at, spanClass);
    spanStart = at;
    spanClass = newClass;
  }
  function node(inheritedClass, depth, scope) {
    var type = cursor.type,
      start = cursor.from,
      end = cursor.to;
    if (start >= to || end <= from) return;
    nodeStack[depth] = type.name;
    if (type.isTop) scope = type;
    var cls = inheritedClass;
    var rule = type.prop(ruleNodeProp),
      opaque = false;
    while (rule) {
      if (!rule.context || matchContext(rule.context, nodeStack, depth)) {
        var _iterator12 = _createForOfIteratorHelper(rule.tags),
          _step12;
        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var tag = _step12.value;
            var st = style(tag, scope);
            if (st) {
              if (cls) cls += " ";
              cls += st;
              if (rule.mode == 1 /* Inherit */) inheritedClass += (inheritedClass ? " " : "") + st;else if (rule.mode == 0 /* Opaque */) opaque = true;
            }
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
        break;
      }
      rule = rule.next;
    }
    var upto = start;
    if (!opaque && cursor.firstChild()) {
      do {
        if (cursor.from > upto && spanClass != cls) flush(upto, cls);
        upto = cursor.to;
        node(inheritedClass, depth + 1, scope);
      } while (cursor.nextSibling());
      cursor.parent();
    }
    if (end > upto && spanClass != cls) flush(upto, cls);
  }
  node("", 0, tree.type);
  flush(to, "");
}
function matchContext(context, stack, depth) {
  if (context.length > depth - 1) return false;
  for (var d = depth - 1, i = context.length - 1; i >= 0; i--, d--) {
    var check = context[i];
    if (check && check != stack[d]) return false;
  }
  return true;
}
var t = Tag.define;
var comment = /*@__PURE__*/t(),
  name = /*@__PURE__*/t(),
  typeName = /*@__PURE__*/t(name),
  literal = /*@__PURE__*/t(),
  string = /*@__PURE__*/t(literal),
  number = /*@__PURE__*/t(literal),
  content = /*@__PURE__*/t(),
  heading = /*@__PURE__*/t(content),
  keyword = /*@__PURE__*/t(),
  operator = /*@__PURE__*/t(),
  punctuation = /*@__PURE__*/t(),
  bracket = /*@__PURE__*/t(punctuation),
  meta = /*@__PURE__*/t();
/**
The default set of highlighting [tags](https://codemirror.net/6/docs/ref/#highlight.Tag^define) used
by regular language packages and themes.

This collection is heavily biased towards programming languages,
and necessarily incomplete. A full ontology of syntactic
constructs would fill a stack of books, and be impractical to
write themes for. So try to make do with this set. If all else
fails, [open an
issue](https://github.com/codemirror/codemirror.next) to propose a
new tag, or [define](https://codemirror.net/6/docs/ref/#highlight.Tag^define) a local custom tag for
your use case.

Note that it is not obligatory to always attach the most specific
tag possible to an element—if your grammar can't easily
distinguish a certain type of element (such as a local variable),
it is okay to style it as its more general variant (a variable).

For tags that extend some parent tag, the documentation links to
the parent.
*/
var tags = {
  /**
  A comment.
  */
  comment: comment,
  /**
  A line [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
  */
  lineComment: /*@__PURE__*/t(comment),
  /**
  A block [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
  */
  blockComment: /*@__PURE__*/t(comment),
  /**
  A documentation [comment](https://codemirror.net/6/docs/ref/#highlight.tags.comment).
  */
  docComment: /*@__PURE__*/t(comment),
  /**
  Any kind of identifier.
  */
  name: name,
  /**
  The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a variable.
  */
  variableName: /*@__PURE__*/t(name),
  /**
  A type [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
  */
  typeName: typeName,
  /**
  A tag name (subtag of [`typeName`](https://codemirror.net/6/docs/ref/#highlight.tags.typeName)).
  */
  tagName: /*@__PURE__*/t(typeName),
  /**
  A property, field, or attribute [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
  */
  propertyName: /*@__PURE__*/t(name),
  /**
  The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a class.
  */
  className: /*@__PURE__*/t(name),
  /**
  A label [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
  */
  labelName: /*@__PURE__*/t(name),
  /**
  A namespace [name](https://codemirror.net/6/docs/ref/#highlight.tags.name).
  */
  namespace: /*@__PURE__*/t(name),
  /**
  The [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) of a macro.
  */
  macroName: /*@__PURE__*/t(name),
  /**
  A literal value.
  */
  literal: literal,
  /**
  A string [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
  */
  string: string,
  /**
  A documentation [string](https://codemirror.net/6/docs/ref/#highlight.tags.string).
  */
  docString: /*@__PURE__*/t(string),
  /**
  A character literal (subtag of [string](https://codemirror.net/6/docs/ref/#highlight.tags.string)).
  */
  character: /*@__PURE__*/t(string),
  /**
  A number [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
  */
  number: number,
  /**
  An integer [number](https://codemirror.net/6/docs/ref/#highlight.tags.number) literal.
  */
  integer: /*@__PURE__*/t(number),
  /**
  A floating-point [number](https://codemirror.net/6/docs/ref/#highlight.tags.number) literal.
  */
  "float": /*@__PURE__*/t(number),
  /**
  A boolean [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
  */
  bool: /*@__PURE__*/t(literal),
  /**
  Regular expression [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
  */
  regexp: /*@__PURE__*/t(literal),
  /**
  An escape [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal), for example a
  backslash escape in a string.
  */
  escape: /*@__PURE__*/t(literal),
  /**
  A color [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
  */
  color: /*@__PURE__*/t(literal),
  /**
  A URL [literal](https://codemirror.net/6/docs/ref/#highlight.tags.literal).
  */
  url: /*@__PURE__*/t(literal),
  /**
  A language keyword.
  */
  keyword: keyword,
  /**
  The [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) for the self or this
  object.
  */
  self: /*@__PURE__*/t(keyword),
  /**
  The [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) for null.
  */
  "null": /*@__PURE__*/t(keyword),
  /**
  A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) denoting some atomic value.
  */
  atom: /*@__PURE__*/t(keyword),
  /**
  A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that represents a unit.
  */
  unit: /*@__PURE__*/t(keyword),
  /**
  A modifier [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword).
  */
  modifier: /*@__PURE__*/t(keyword),
  /**
  A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that acts as an operator.
  */
  operatorKeyword: /*@__PURE__*/t(keyword),
  /**
  A control-flow related [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword).
  */
  controlKeyword: /*@__PURE__*/t(keyword),
  /**
  A [keyword](https://codemirror.net/6/docs/ref/#highlight.tags.keyword) that defines something.
  */
  definitionKeyword: /*@__PURE__*/t(keyword),
  /**
  An operator.
  */
  operator: operator,
  /**
  An [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that defines something.
  */
  derefOperator: /*@__PURE__*/t(operator),
  /**
  Arithmetic-related [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
  */
  arithmeticOperator: /*@__PURE__*/t(operator),
  /**
  Logical [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
  */
  logicOperator: /*@__PURE__*/t(operator),
  /**
  Bit [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
  */
  bitwiseOperator: /*@__PURE__*/t(operator),
  /**
  Comparison [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
  */
  compareOperator: /*@__PURE__*/t(operator),
  /**
  [Operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that updates its operand.
  */
  updateOperator: /*@__PURE__*/t(operator),
  /**
  [Operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator) that defines something.
  */
  definitionOperator: /*@__PURE__*/t(operator),
  /**
  Type-related [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
  */
  typeOperator: /*@__PURE__*/t(operator),
  /**
  Control-flow [operator](https://codemirror.net/6/docs/ref/#highlight.tags.operator).
  */
  controlOperator: /*@__PURE__*/t(operator),
  /**
  Program or markup punctuation.
  */
  punctuation: punctuation,
  /**
  [Punctuation](https://codemirror.net/6/docs/ref/#highlight.tags.punctuation) that separates
  things.
  */
  separator: /*@__PURE__*/t(punctuation),
  /**
  Bracket-style [punctuation](https://codemirror.net/6/docs/ref/#highlight.tags.punctuation).
  */
  bracket: bracket,
  /**
  Angle [brackets](https://codemirror.net/6/docs/ref/#highlight.tags.bracket) (usually `<` and `>`
  tokens).
  */
  angleBracket: /*@__PURE__*/t(bracket),
  /**
  Square [brackets](https://codemirror.net/6/docs/ref/#highlight.tags.bracket) (usually `[` and `]`
  tokens).
  */
  squareBracket: /*@__PURE__*/t(bracket),
  /**
  Parentheses (usually `(` and `)` tokens). Subtag of
  [bracket](https://codemirror.net/6/docs/ref/#highlight.tags.bracket).
  */
  paren: /*@__PURE__*/t(bracket),
  /**
  Braces (usually `{` and `}` tokens). Subtag of
  [bracket](https://codemirror.net/6/docs/ref/#highlight.tags.bracket).
  */
  brace: /*@__PURE__*/t(bracket),
  /**
  Content, for example plain text in XML or markup documents.
  */
  content: content,
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a heading.
  */
  heading: heading,
  /**
  A level 1 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
  */
  heading1: /*@__PURE__*/t(heading),
  /**
  A level 2 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
  */
  heading2: /*@__PURE__*/t(heading),
  /**
  A level 3 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
  */
  heading3: /*@__PURE__*/t(heading),
  /**
  A level 4 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
  */
  heading4: /*@__PURE__*/t(heading),
  /**
  A level 5 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
  */
  heading5: /*@__PURE__*/t(heading),
  /**
  A level 6 [heading](https://codemirror.net/6/docs/ref/#highlight.tags.heading).
  */
  heading6: /*@__PURE__*/t(heading),
  /**
  A prose separator (such as a horizontal rule).
  */
  contentSeparator: /*@__PURE__*/t(content),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a list.
  */
  list: /*@__PURE__*/t(content),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that represents a quote.
  */
  quote: /*@__PURE__*/t(content),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is emphasized.
  */
  emphasis: /*@__PURE__*/t(content),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is styled strong.
  */
  strong: /*@__PURE__*/t(content),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is part of a link.
  */
  link: /*@__PURE__*/t(content),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that is styled as code or
  monospace.
  */
  monospace: /*@__PURE__*/t(content),
  /**
  [Content](https://codemirror.net/6/docs/ref/#highlight.tags.content) that has a strike-through
  style.
  */
  strikethrough: /*@__PURE__*/t(content),
  /**
  Inserted text in a change-tracking format.
  */
  inserted: /*@__PURE__*/t(),
  /**
  Deleted text.
  */
  deleted: /*@__PURE__*/t(),
  /**
  Changed text.
  */
  changed: /*@__PURE__*/t(),
  /**
  An invalid or unsyntactic element.
  */
  invalid: /*@__PURE__*/t(),
  /**
  Metadata or meta-instruction.
  */
  meta: meta,
  /**
  [Metadata](https://codemirror.net/6/docs/ref/#highlight.tags.meta) that applies to the entire
  document.
  */
  documentMeta: /*@__PURE__*/t(meta),
  /**
  [Metadata](https://codemirror.net/6/docs/ref/#highlight.tags.meta) that annotates or adds
  attributes to a given syntactic element.
  */
  annotation: /*@__PURE__*/t(meta),
  /**
  Processing instruction or preprocessor directive. Subtag of
  [meta](https://codemirror.net/6/docs/ref/#highlight.tags.meta).
  */
  processingInstruction: /*@__PURE__*/t(meta),
  /**
  [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates that a
  given element is being defined. Expected to be used with the
  various [name](https://codemirror.net/6/docs/ref/#highlight.tags.name) tags.
  */
  definition: /*@__PURE__*/Tag.defineModifier(),
  /**
  [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates that
  something is constant. Mostly expected to be used with
  [variable names](https://codemirror.net/6/docs/ref/#highlight.tags.variableName).
  */
  constant: /*@__PURE__*/Tag.defineModifier(),
  /**
  [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) used to indicate that
  a [variable](https://codemirror.net/6/docs/ref/#highlight.tags.variableName) or [property
  name](https://codemirror.net/6/docs/ref/#highlight.tags.propertyName) is being called or defined
  as a function.
  */
  "function": /*@__PURE__*/Tag.defineModifier(),
  /**
  [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that can be applied to
  [names](https://codemirror.net/6/docs/ref/#highlight.tags.name) to indicate that they belong to
  the language's standard environment.
  */
  standard: /*@__PURE__*/Tag.defineModifier(),
  /**
  [Modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that indicates a given
  [names](https://codemirror.net/6/docs/ref/#highlight.tags.name) is local to some scope.
  */
  local: /*@__PURE__*/Tag.defineModifier(),
  /**
  A generic variant [modifier](https://codemirror.net/6/docs/ref/#highlight.Tag^defineModifier) that
  can be used to tag language-specific alternative variants of
  some common tag. It is recommended for themes to define special
  forms of at least the [string](https://codemirror.net/6/docs/ref/#highlight.tags.string) and
  [variable name](https://codemirror.net/6/docs/ref/#highlight.tags.variableName) tags, since those
  come up a lot.
  */
  special: /*@__PURE__*/Tag.defineModifier()
};
/**
A default highlight style (works well with light themes).
*/
var defaultHighlightStyle = /*@__PURE__*/HighlightStyle.define([{
  tag: tags.link,
  textDecoration: "underline"
}, {
  tag: tags.heading,
  textDecoration: "underline",
  fontWeight: "bold"
}, {
  tag: tags.emphasis,
  fontStyle: "italic"
}, {
  tag: tags.strong,
  fontWeight: "bold"
}, {
  tag: tags.strikethrough,
  textDecoration: "line-through"
}, {
  tag: tags.keyword,
  color: "#708"
}, {
  tag: [tags.atom, tags.bool, tags.url, tags.contentSeparator, tags.labelName],
  color: "#219"
}, {
  tag: [tags.literal, tags.inserted],
  color: "#164"
}, {
  tag: [tags.string, tags.deleted],
  color: "#a11"
}, {
  tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],
  color: "#e40"
}, {
  tag: /*@__PURE__*/tags.definition(tags.variableName),
  color: "#00f"
}, {
  tag: /*@__PURE__*/tags.local(tags.variableName),
  color: "#30a"
}, {
  tag: [tags.typeName, tags.namespace],
  color: "#085"
}, {
  tag: tags.className,
  color: "#167"
}, {
  tag: [/*@__PURE__*/tags.special(tags.variableName), tags.macroName],
  color: "#256"
}, {
  tag: /*@__PURE__*/tags.definition(tags.propertyName),
  color: "#00c"
}, {
  tag: tags.comment,
  color: "#940"
}, {
  tag: tags.meta,
  color: "#7a757a"
}, {
  tag: tags.invalid,
  color: "#f00"
}]);
/**
This is a highlight style that adds stable, predictable classes to
tokens, for styling with external CSS.

These tags are mapped to their name prefixed with `"cmt-"` (for
example `"cmt-comment"`):

* [`link`](https://codemirror.net/6/docs/ref/#highlight.tags.link)
* [`heading`](https://codemirror.net/6/docs/ref/#highlight.tags.heading)
* [`emphasis`](https://codemirror.net/6/docs/ref/#highlight.tags.emphasis)
* [`strong`](https://codemirror.net/6/docs/ref/#highlight.tags.strong)
* [`keyword`](https://codemirror.net/6/docs/ref/#highlight.tags.keyword)
* [`atom`](https://codemirror.net/6/docs/ref/#highlight.tags.atom) [`bool`](https://codemirror.net/6/docs/ref/#highlight.tags.bool)
* [`url`](https://codemirror.net/6/docs/ref/#highlight.tags.url)
* [`labelName`](https://codemirror.net/6/docs/ref/#highlight.tags.labelName)
* [`inserted`](https://codemirror.net/6/docs/ref/#highlight.tags.inserted)
* [`deleted`](https://codemirror.net/6/docs/ref/#highlight.tags.deleted)
* [`literal`](https://codemirror.net/6/docs/ref/#highlight.tags.literal)
* [`string`](https://codemirror.net/6/docs/ref/#highlight.tags.string)
* [`number`](https://codemirror.net/6/docs/ref/#highlight.tags.number)
* [`variableName`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
* [`typeName`](https://codemirror.net/6/docs/ref/#highlight.tags.typeName)
* [`namespace`](https://codemirror.net/6/docs/ref/#highlight.tags.namespace)
* [`macroName`](https://codemirror.net/6/docs/ref/#highlight.tags.macroName)
* [`propertyName`](https://codemirror.net/6/docs/ref/#highlight.tags.propertyName)
* [`operator`](https://codemirror.net/6/docs/ref/#highlight.tags.operator)
* [`comment`](https://codemirror.net/6/docs/ref/#highlight.tags.comment)
* [`meta`](https://codemirror.net/6/docs/ref/#highlight.tags.meta)
* [`punctuation`](https://codemirror.net/6/docs/ref/#highlight.tags.puncutation)
* [`invalid`](https://codemirror.net/6/docs/ref/#highlight.tags.invalid)

In addition, these mappings are provided:

* [`regexp`](https://codemirror.net/6/docs/ref/#highlight.tags.regexp),
  [`escape`](https://codemirror.net/6/docs/ref/#highlight.tags.escape), and
  [`special`](https://codemirror.net/6/docs/ref/#highlight.tags.special)[`(string)`](https://codemirror.net/6/docs/ref/#highlight.tags.string)
  are mapped to `"cmt-string2"`
* [`special`](https://codemirror.net/6/docs/ref/#highlight.tags.special)[`(variableName)`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
  to `"cmt-variableName2"`
* [`local`](https://codemirror.net/6/docs/ref/#highlight.tags.local)[`(variableName)`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
  to `"cmt-variableName cmt-local"`
* [`definition`](https://codemirror.net/6/docs/ref/#highlight.tags.definition)[`(variableName)`](https://codemirror.net/6/docs/ref/#highlight.tags.variableName)
  to `"cmt-variableName cmt-definition"`
*/
var classHighlightStyle = /*@__PURE__*/HighlightStyle.define([{
  tag: tags.link,
  "class": "cmt-link"
}, {
  tag: tags.heading,
  "class": "cmt-heading"
}, {
  tag: tags.emphasis,
  "class": "cmt-emphasis"
}, {
  tag: tags.strong,
  "class": "cmt-strong"
}, {
  tag: tags.keyword,
  "class": "cmt-keyword"
}, {
  tag: tags.atom,
  "class": "cmt-atom"
}, {
  tag: tags.bool,
  "class": "cmt-bool"
}, {
  tag: tags.url,
  "class": "cmt-url"
}, {
  tag: tags.labelName,
  "class": "cmt-labelName"
}, {
  tag: tags.inserted,
  "class": "cmt-inserted"
}, {
  tag: tags.deleted,
  "class": "cmt-deleted"
}, {
  tag: tags.literal,
  "class": "cmt-literal"
}, {
  tag: tags.string,
  "class": "cmt-string"
}, {
  tag: tags.number,
  "class": "cmt-number"
}, {
  tag: [tags.regexp, tags.escape, /*@__PURE__*/tags.special(tags.string)],
  "class": "cmt-string2"
}, {
  tag: tags.variableName,
  "class": "cmt-variableName"
}, {
  tag: /*@__PURE__*/tags.local(tags.variableName),
  "class": "cmt-variableName cmt-local"
}, {
  tag: /*@__PURE__*/tags.definition(tags.variableName),
  "class": "cmt-variableName cmt-definition"
}, {
  tag: /*@__PURE__*/tags.special(tags.variableName),
  "class": "cmt-variableName2"
}, {
  tag: tags.typeName,
  "class": "cmt-typeName"
}, {
  tag: tags.namespace,
  "class": "cmt-namespace"
}, {
  tag: tags.macroName,
  "class": "cmt-macroName"
}, {
  tag: tags.propertyName,
  "class": "cmt-propertyName"
}, {
  tag: tags.operator,
  "class": "cmt-operator"
}, {
  tag: tags.comment,
  "class": "cmt-comment"
}, {
  tag: tags.meta,
  "class": "cmt-meta"
}, {
  tag: tags.invalid,
  "class": "cmt-invalid"
}, {
  tag: tags.punctuation,
  "class": "cmt-punctuation"
}]);


/***/ }),

/***/ "./node_modules/@codemirror/history/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@codemirror/history/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "history": () => (/* binding */ history),
/* harmony export */   "historyField": () => (/* binding */ historyField),
/* harmony export */   "historyKeymap": () => (/* binding */ historyKeymap),
/* harmony export */   "invertedEffects": () => (/* binding */ invertedEffects),
/* harmony export */   "isolateHistory": () => (/* binding */ isolateHistory),
/* harmony export */   "redo": () => (/* binding */ redo),
/* harmony export */   "redoDepth": () => (/* binding */ redoDepth),
/* harmony export */   "redoSelection": () => (/* binding */ redoSelection),
/* harmony export */   "undo": () => (/* binding */ undo),
/* harmony export */   "undoDepth": () => (/* binding */ undoDepth),
/* harmony export */   "undoSelection": () => (/* binding */ undoSelection)
/* harmony export */ });
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


var fromHistory = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Annotation.define();
/**
Transaction annotation that will prevent that transaction from
being combined with other transactions in the undo history. Given
`"before"`, it'll prevent merging with previous transactions. With
`"after"`, subsequent transactions won't be combined with this
one. With `"full"`, the transaction is isolated on both sides.
*/
var isolateHistory = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Annotation.define();
/**
This facet provides a way to register functions that, given a
transaction, provide a set of effects that the history should
store when inverting the transaction. This can be used to
integrate some kinds of effects in the history, so that they can
be undone (and redone again).
*/
var invertedEffects = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Facet.define();
var historyConfig = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Facet.define({
  combine: function combine(configs) {
    return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.combineConfig)(configs, {
      minDepth: 100,
      newGroupDelay: 500
    }, {
      minDepth: Math.max,
      newGroupDelay: Math.min
    });
  }
});
var historyField_ = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.StateField.define({
  create: function create() {
    return HistoryState.empty;
  },
  update: function update(state, tr) {
    var config = tr.state.facet(historyConfig);
    var fromHist = tr.annotation(fromHistory);
    if (fromHist) {
      var item = HistEvent.fromTransaction(tr),
        from = fromHist.side;
      var other = from == 0 /* Done */ ? state.undone : state.done;
      if (item) other = updateBranch(other, other.length, config.minDepth, item);else other = _addSelection(other, tr.startState.selection);
      return new HistoryState(from == 0 /* Done */ ? fromHist.rest : other, from == 0 /* Done */ ? other : fromHist.rest);
    }
    var isolate = tr.annotation(isolateHistory);
    if (isolate == "full" || isolate == "before") state = state.isolate();
    if (tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Transaction.addToHistory) === false) return !tr.changes.empty ? state.addMapping(tr.changes.desc) : state;
    var event = HistEvent.fromTransaction(tr);
    var time = tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Transaction.time),
      userEvent = tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Transaction.userEvent);
    if (event) state = state.addChanges(event, time, userEvent, config.newGroupDelay, config.minDepth);else if (tr.selection) state = state.addSelection(tr.startState.selection, time, userEvent, config.newGroupDelay);
    if (isolate == "full" || isolate == "after") state = state.isolate();
    return state;
  },
  toJSON: function toJSON(value) {
    return {
      done: value.done.map(function (e) {
        return e.toJSON();
      }),
      undone: value.undone.map(function (e) {
        return e.toJSON();
      })
    };
  },
  fromJSON: function fromJSON(json) {
    return new HistoryState(json.done.map(HistEvent.fromJSON), json.undone.map(HistEvent.fromJSON));
  }
});
/**
Create a history extension with the given configuration.
*/
function history() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [historyField_, historyConfig.of(config), _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.domEventHandlers({
    beforeinput: function beforeinput(e, view) {
      if (e.inputType == "historyUndo") return undo(view);
      if (e.inputType == "historyRedo") return redo(view);
      return false;
    }
  })];
}
/**
The state field used to store the history data. Should probably
only be used when you want to
[serialize](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) or
[deserialize](https://codemirror.net/6/docs/ref/#state.EditorState^fromJSON) state objects in a way
that preserves history.
*/
var historyField = historyField_;
function cmd(side, selection) {
  return function (_ref) {
    var state = _ref.state,
      dispatch = _ref.dispatch;
    var historyState = state.field(historyField_, false);
    if (!historyState) return false;
    var tr = historyState.pop(side, state, selection);
    if (!tr) return false;
    dispatch(tr);
    return true;
  };
}
/**
Undo a single group of history events. Returns false if no group
was available.
*/
var undo = cmd(0 /* Done */, false);
/**
Redo a group of history events. Returns false if no group was
available.
*/
var redo = cmd(1 /* Undone */, false);
/**
Undo a selection change.
*/
var undoSelection = cmd(0 /* Done */, true);
/**
Redo a selection change.
*/
var redoSelection = cmd(1 /* Undone */, true);
function depth(side) {
  return function (state) {
    var histState = state.field(historyField_, false);
    if (!histState) return 0;
    var branch = side == 0 /* Done */ ? histState.done : histState.undone;
    return branch.length - (branch.length && !branch[0].changes ? 1 : 0);
  };
}
/**
The amount of undoable change events available in a given state.
*/
var undoDepth = depth(0 /* Done */);
/**
The amount of redoable change events available in a given state.
*/
var redoDepth = depth(1 /* Undone */);
// History events store groups of changes or effects that need to be
// undone/redone together.
var HistEvent = /*#__PURE__*/function () {
  function HistEvent(
  // The changes in this event. Normal events hold at least one
  // change or effect. But it may be necessary to store selection
  // events before the first change, in which case a special type of
  // instance is created which doesn't hold any changes, with
  // changes == startSelection == undefined
  changes,
  // The effects associated with this event
  effects, mapped,
  // The selection before this event
  startSelection,
  // Stores selection changes after this event, to be used for
  // selection undo/redo.
  selectionsAfter) {
    _classCallCheck(this, HistEvent);
    this.changes = changes;
    this.effects = effects;
    this.mapped = mapped;
    this.startSelection = startSelection;
    this.selectionsAfter = selectionsAfter;
  }
  _createClass(HistEvent, [{
    key: "setSelAfter",
    value: function setSelAfter(after) {
      return new HistEvent(this.changes, this.effects, this.mapped, this.startSelection, after);
    }
  }, {
    key: "toJSON",
    value: function toJSON() {
      var _a, _b, _c;
      return {
        changes: (_a = this.changes) === null || _a === void 0 ? void 0 : _a.toJSON(),
        mapped: (_b = this.mapped) === null || _b === void 0 ? void 0 : _b.toJSON(),
        startSelection: (_c = this.startSelection) === null || _c === void 0 ? void 0 : _c.toJSON(),
        selectionsAfter: this.selectionsAfter.map(function (s) {
          return s.toJSON();
        })
      };
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      return new HistEvent(json.changes && _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.ChangeSet.fromJSON(json.changes), [], json.mapped && _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.ChangeDesc.fromJSON(json.mapped), json.startSelection && _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.fromJSON(json.startSelection), json.selectionsAfter.map(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.fromJSON));
    }
    // This does not check `addToHistory` and such, it assumes the
    // transaction needs to be converted to an item. Returns null when
    // there are no changes or effects in the transaction.
  }, {
    key: "fromTransaction",
    value: function fromTransaction(tr) {
      var effects = none;
      var _iterator = _createForOfIteratorHelper(tr.startState.facet(invertedEffects)),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var invert = _step.value;
          var result = invert(tr);
          if (result.length) effects = effects.concat(result);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      if (!effects.length && tr.changes.empty) return null;
      return new HistEvent(tr.changes.invert(tr.startState.doc), effects, undefined, tr.startState.selection, none);
    }
  }, {
    key: "selection",
    value: function selection(selections) {
      return new HistEvent(undefined, none, undefined, undefined, selections);
    }
  }]);
  return HistEvent;
}();
function updateBranch(branch, to, maxLen, newEvent) {
  var start = to + 1 > maxLen + 20 ? to - maxLen - 1 : 0;
  var newBranch = branch.slice(start, to);
  newBranch.push(newEvent);
  return newBranch;
}
function isAdjacent(a, b) {
  var ranges = [],
    isAdjacent = false;
  a.iterChangedRanges(function (f, t) {
    return ranges.push(f, t);
  });
  b.iterChangedRanges(function (_f, _t, f, t) {
    for (var i = 0; i < ranges.length;) {
      var from = ranges[i++],
        to = ranges[i++];
      if (t >= from && f <= to) isAdjacent = true;
    }
  });
  return isAdjacent;
}
function eqSelectionShape(a, b) {
  return a.ranges.length == b.ranges.length && a.ranges.filter(function (r, i) {
    return r.empty != b.ranges[i].empty;
  }).length === 0;
}
function conc(a, b) {
  return !a.length ? b : !b.length ? a : a.concat(b);
}
var none = [];
var MaxSelectionsPerEvent = 200;
function _addSelection(branch, selection) {
  if (!branch.length) {
    return [HistEvent.selection([selection])];
  } else {
    var lastEvent = branch[branch.length - 1];
    var sels = lastEvent.selectionsAfter.slice(Math.max(0, lastEvent.selectionsAfter.length - MaxSelectionsPerEvent));
    if (sels.length && sels[sels.length - 1].eq(selection)) return branch;
    sels.push(selection);
    return updateBranch(branch, branch.length - 1, 1e9, lastEvent.setSelAfter(sels));
  }
}
// Assumes the top item has one or more selectionAfter values
function popSelection(branch) {
  var last = branch[branch.length - 1];
  var newBranch = branch.slice();
  newBranch[branch.length - 1] = last.setSelAfter(last.selectionsAfter.slice(0, last.selectionsAfter.length - 1));
  return newBranch;
}
// Add a mapping to the top event in the given branch. If this maps
// away all the changes and effects in that item, drop it and
// propagate the mapping to the next item.
function addMappingToBranch(branch, mapping) {
  if (!branch.length) return branch;
  var length = branch.length,
    selections = none;
  while (length) {
    var event = mapEvent(branch[length - 1], mapping, selections);
    if (event.changes && !event.changes.empty || event.effects.length) {
      // Event survived mapping
      var result = branch.slice(0, length);
      result[length - 1] = event;
      return result;
    } else {
      // Drop this event, since there's no changes or effects left
      mapping = event.mapped;
      length--;
      selections = event.selectionsAfter;
    }
  }
  return selections.length ? [HistEvent.selection(selections)] : none;
}
function mapEvent(event, mapping, extraSelections) {
  var selections = conc(event.selectionsAfter.length ? event.selectionsAfter.map(function (s) {
    return s.map(mapping);
  }) : none, extraSelections);
  // Change-less events don't store mappings (they are always the last event in a branch)
  if (!event.changes) return HistEvent.selection(selections);
  var mappedChanges = event.changes.map(mapping),
    before = mapping.mapDesc(event.changes, true);
  var fullMapping = event.mapped ? event.mapped.composeDesc(before) : before;
  return new HistEvent(mappedChanges, _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.StateEffect.mapEffects(event.effects, mapping), fullMapping, event.startSelection.map(before), selections);
}
var HistoryState = /*#__PURE__*/function () {
  function HistoryState(done, undone) {
    var prevTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var prevUserEvent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : undefined;
    _classCallCheck(this, HistoryState);
    this.done = done;
    this.undone = undone;
    this.prevTime = prevTime;
    this.prevUserEvent = prevUserEvent;
  }
  _createClass(HistoryState, [{
    key: "isolate",
    value: function isolate() {
      return this.prevTime ? new HistoryState(this.done, this.undone) : this;
    }
  }, {
    key: "addChanges",
    value: function addChanges(event, time, userEvent, newGroupDelay, maxLen) {
      var done = this.done,
        lastEvent = done[done.length - 1];
      if (lastEvent && lastEvent.changes && time - this.prevTime < newGroupDelay && !lastEvent.selectionsAfter.length && !lastEvent.changes.empty && event.changes && isAdjacent(lastEvent.changes, event.changes)) {
        done = updateBranch(done, done.length - 1, maxLen, new HistEvent(event.changes.compose(lastEvent.changes), conc(event.effects, lastEvent.effects), lastEvent.mapped, lastEvent.startSelection, none));
      } else {
        done = updateBranch(done, done.length, maxLen, event);
      }
      return new HistoryState(done, none, time, userEvent);
    }
  }, {
    key: "addSelection",
    value: function addSelection(selection, time, userEvent, newGroupDelay) {
      var last = this.done.length ? this.done[this.done.length - 1].selectionsAfter : none;
      if (last.length > 0 && time - this.prevTime < newGroupDelay && userEvent == "keyboardselection" && this.prevUserEvent == userEvent && eqSelectionShape(last[last.length - 1], selection)) return this;
      return new HistoryState(_addSelection(this.done, selection), this.undone, time, userEvent);
    }
  }, {
    key: "addMapping",
    value: function addMapping(mapping) {
      return new HistoryState(addMappingToBranch(this.done, mapping), addMappingToBranch(this.undone, mapping), this.prevTime, this.prevUserEvent);
    }
  }, {
    key: "pop",
    value: function pop(side, state, selection) {
      var branch = side == 0 /* Done */ ? this.done : this.undone;
      if (branch.length == 0) return null;
      var event = branch[branch.length - 1];
      if (selection && event.selectionsAfter.length) {
        return state.update({
          selection: event.selectionsAfter[event.selectionsAfter.length - 1],
          annotations: fromHistory.of({
            side: side,
            rest: popSelection(branch)
          })
        });
      } else if (!event.changes) {
        return null;
      } else {
        var rest = branch.length == 1 ? none : branch.slice(0, branch.length - 1);
        if (event.mapped) rest = addMappingToBranch(rest, event.mapped);
        return state.update({
          changes: event.changes,
          selection: event.startSelection,
          effects: event.effects,
          annotations: fromHistory.of({
            side: side,
            rest: rest
          }),
          filter: false
        });
      }
    }
  }]);
  return HistoryState;
}();
HistoryState.empty = new HistoryState(none, none);
/**
Default key bindings for the undo history.

- Mod-z: [`undo`](https://codemirror.net/6/docs/ref/#history.undo).
- Mod-y (Mod-Shift-z on macOS): [`redo`](https://codemirror.net/6/docs/ref/#history.redo).
- Mod-u: [`undoSelection`](https://codemirror.net/6/docs/ref/#history.undoSelection).
- Alt-u (Mod-Shift-u on macOS): [`redoSelection`](https://codemirror.net/6/docs/ref/#history.redoSelection).
*/
var historyKeymap = [{
  key: "Mod-z",
  run: undo,
  preventDefault: true
}, {
  key: "Mod-y",
  mac: "Mod-Shift-z",
  run: redo,
  preventDefault: true
}, {
  key: "Mod-u",
  run: undoSelection,
  preventDefault: true
}, {
  key: "Alt-u",
  mac: "Mod-Shift-u",
  run: redoSelection,
  preventDefault: true
}];


/***/ }),

/***/ "./node_modules/@codemirror/language/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@codemirror/language/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EditorParseContext": () => (/* binding */ EditorParseContext),
/* harmony export */   "IndentContext": () => (/* binding */ IndentContext),
/* harmony export */   "Language": () => (/* binding */ Language),
/* harmony export */   "LanguageDescription": () => (/* binding */ LanguageDescription),
/* harmony export */   "LanguageSupport": () => (/* binding */ LanguageSupport),
/* harmony export */   "LezerLanguage": () => (/* binding */ LezerLanguage),
/* harmony export */   "TreeIndentContext": () => (/* binding */ TreeIndentContext),
/* harmony export */   "continuedIndent": () => (/* binding */ continuedIndent),
/* harmony export */   "defineLanguageFacet": () => (/* binding */ defineLanguageFacet),
/* harmony export */   "delimitedIndent": () => (/* binding */ delimitedIndent),
/* harmony export */   "ensureSyntaxTree": () => (/* binding */ ensureSyntaxTree),
/* harmony export */   "flatIndent": () => (/* binding */ flatIndent),
/* harmony export */   "foldInside": () => (/* binding */ foldInside),
/* harmony export */   "foldNodeProp": () => (/* binding */ foldNodeProp),
/* harmony export */   "foldService": () => (/* binding */ foldService),
/* harmony export */   "foldable": () => (/* binding */ foldable),
/* harmony export */   "getIndentUnit": () => (/* binding */ getIndentUnit),
/* harmony export */   "getIndentation": () => (/* binding */ getIndentation),
/* harmony export */   "indentNodeProp": () => (/* binding */ indentNodeProp),
/* harmony export */   "indentOnInput": () => (/* binding */ indentOnInput),
/* harmony export */   "indentService": () => (/* binding */ indentService),
/* harmony export */   "indentString": () => (/* binding */ indentString),
/* harmony export */   "indentUnit": () => (/* binding */ indentUnit),
/* harmony export */   "language": () => (/* binding */ language),
/* harmony export */   "languageDataProp": () => (/* binding */ languageDataProp),
/* harmony export */   "syntaxTree": () => (/* binding */ syntaxTree)
/* harmony export */ });
/* harmony import */ var lezer_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lezer-tree */ "./node_modules/lezer-tree/dist/tree.es.js");
/* harmony import */ var _codemirror_text__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/text */ "./node_modules/@codemirror/text/dist/index.js");
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }





/**
Node prop stored in a grammar's top syntax node to provide the
facet that stores language data for that language.
*/
var languageDataProp = /*@__PURE__*/new lezer_tree__WEBPACK_IMPORTED_MODULE_0__.NodeProp();
/**
Helper function to define a facet (to be added to the top syntax
node(s) for a language via
[`languageDataProp`](https://codemirror.net/6/docs/ref/#language.languageDataProp)), that will be
used to associate language data with the language. You
probably only need this when subclassing
[`Language`](https://codemirror.net/6/docs/ref/#language.Language).
*/
function defineLanguageFacet(baseData) {
  return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({
    combine: baseData ? function (values) {
      return values.concat(baseData);
    } : undefined
  });
}
/**
A language object manages parsing and per-language
[metadata](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt). Parse data is
managed as a [Lezer](https://lezer.codemirror.net) tree. You'll
want to subclass this class for custom parsers, or use the
[`LezerLanguage`](https://codemirror.net/6/docs/ref/#language.LezerLanguage) or
[`StreamLanguage`](https://codemirror.net/6/docs/ref/#stream-parser.StreamLanguage) abstractions for
[Lezer](https://lezer.codemirror.net/) or stream parsers.
*/
var Language = /*#__PURE__*/function () {
  /**
  Construct a language object. You usually don't need to invoke
  this directly. But when you do, make sure you use
  [`defineLanguageFacet`](https://codemirror.net/6/docs/ref/#language.defineLanguageFacet) to create
  the first argument.
  */
  function Language(
  /**
  The [language data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) data
  facet used for this language.
  */
  data, parser,
  /**
  The node type of the top node of trees produced by this parser.
  */
  topNode) {
    var extraExtensions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
    _classCallCheck(this, Language);
    this.data = data;
    this.topNode = topNode;
    // Kludge to define EditorState.tree as a debugging helper,
    // without the EditorState package actually knowing about
    // languages and lezer trees.
    if (!_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorState.prototype.hasOwnProperty("tree")) Object.defineProperty(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorState.prototype, "tree", {
      get: function get() {
        return syntaxTree(this);
      }
    });
    this.parser = parser;
    this.extension = [language.of(this), _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorState.languageData.of(function (state, pos) {
      return state.facet(languageDataFacetAt(state, pos));
    })].concat(extraExtensions);
  }
  /**
  Query whether this language is active at the given position.
  */
  _createClass(Language, [{
    key: "isActiveAt",
    value: function isActiveAt(state, pos) {
      return languageDataFacetAt(state, pos) == this.data;
    }
    /**
    Find the document regions that were parsed using this language.
    The returned regions will _include_ any nested languages rooted
    in this language, when those exist.
    */
  }, {
    key: "findRegions",
    value: function findRegions(state) {
      var _this = this;
      var lang = state.facet(language);
      if ((lang === null || lang === void 0 ? void 0 : lang.data) == this.data) return [{
        from: 0,
        to: state.doc.length
      }];
      if (!lang || !lang.allowsNesting) return [];
      var result = [];
      syntaxTree(state).iterate({
        enter: function enter(type, from, to) {
          if (type.isTop && type.prop(languageDataProp) == _this.data) {
            result.push({
              from: from,
              to: to
            });
            return false;
          }
          return undefined;
        }
      });
      return result;
    }
    /**
    Indicates whether this language allows nested languages. The
    default implementation returns true.
    */
  }, {
    key: "allowsNesting",
    get: function get() {
      return true;
    }
    /**
    Use this language to parse the given string into a tree.
    */
  }, {
    key: "parseString",
    value: function parseString(code) {
      var doc = _codemirror_text__WEBPACK_IMPORTED_MODULE_2__.Text.of(code.split("\n"));
      var parse = this.parser.startParse(new DocInput(doc), 0, new EditorParseContext(this.parser, _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorState.create({
        doc: doc
      }), [], lezer_tree__WEBPACK_IMPORTED_MODULE_0__.Tree.empty, {
        from: 0,
        to: code.length
      }, [], null));
      var tree;
      while (!(tree = parse.advance())) {}
      return tree;
    }
  }]);
  return Language;
}(); /**
     @internal
     */
Language.setState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();
function languageDataFacetAt(state, pos) {
  var topLang = state.facet(language);
  if (!topLang) return null;
  if (!topLang.allowsNesting) return topLang.data;
  var tree = syntaxTree(state);
  var target = tree.resolve(pos, -1);
  while (target) {
    var facet = target.type.prop(languageDataProp);
    if (facet) return facet;
    target = target.parent;
  }
  return topLang.data;
}
/**
A subclass of [`Language`](https://codemirror.net/6/docs/ref/#language.Language) for use with
[Lezer](https://lezer.codemirror.net/docs/ref#lezer.Parser)
parsers.
*/
var LezerLanguage = /*#__PURE__*/function (_Language) {
  _inherits(LezerLanguage, _Language);
  var _super = _createSuper(LezerLanguage);
  function LezerLanguage(data, parser) {
    var _this2;
    _classCallCheck(this, LezerLanguage);
    _this2 = _super.call(this, data, parser, parser.topNode);
    _this2.parser = parser;
    return _this2;
  }
  /**
  Define a language from a parser.
  */
  _createClass(LezerLanguage, [{
    key: "configure",
    value:
    /**
    Create a new instance of this language with a reconfigured
    version of its parser.
    */
    function configure(options) {
      return new LezerLanguage(this.data, this.parser.configure(options));
    }
  }, {
    key: "allowsNesting",
    get: function get() {
      return this.parser.hasNested;
    }
  }], [{
    key: "define",
    value: function define(spec) {
      var data = defineLanguageFacet(spec.languageData);
      return new LezerLanguage(data, spec.parser.configure({
        props: [languageDataProp.add(function (type) {
          return type.isTop ? data : undefined;
        })]
      }));
    }
  }]);
  return LezerLanguage;
}(Language); /**
             Get the syntax tree for a state, which is the current (possibly
             incomplete) parse tree of active [language](https://codemirror.net/6/docs/ref/#language.Language),
             or the empty tree if there is no language available.
             */
function syntaxTree(state) {
  var field = state.field(Language.state, false);
  return field ? field.tree : lezer_tree__WEBPACK_IMPORTED_MODULE_0__.Tree.empty;
}
/**
Try to get a parse tree that spans at least up to `upto`. The
method will do at most `timeout` milliseconds of work to parse
up to that point if the tree isn't already available.
*/
function ensureSyntaxTree(state, upto) {
  var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 50;
  var _a;
  var parse = (_a = state.field(Language.state, false)) === null || _a === void 0 ? void 0 : _a.context;
  return !parse ? null : parse.tree.length >= upto || parse.work(timeout, upto) ? parse.tree : null;
}
// Lezer-style Input object for a Text document.
var DocInput = /*#__PURE__*/function () {
  function DocInput(doc) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : doc.length;
    _classCallCheck(this, DocInput);
    this.doc = doc;
    this.length = length;
    this.cursorPos = 0;
    this.string = "";
    this.prevString = "";
    this.cursor = doc.iter();
  }
  _createClass(DocInput, [{
    key: "syncTo",
    value: function syncTo(pos) {
      if (pos < this.cursorPos) {
        // Reset the cursor if we have to go back
        this.cursor = this.doc.iter();
        this.cursorPos = 0;
      }
      this.prevString = pos == this.cursorPos ? this.string : "";
      this.string = this.cursor.next(pos - this.cursorPos).value;
      this.cursorPos = pos + this.string.length;
      return this.cursorPos - this.string.length;
    }
  }, {
    key: "get",
    value: function get(pos) {
      if (pos >= this.length) return -1;
      var stringStart = this.cursorPos - this.string.length;
      if (pos < stringStart || pos >= this.cursorPos) {
        if (pos < stringStart && pos >= stringStart - this.prevString.length) return this.prevString.charCodeAt(pos - (stringStart - this.prevString.length));
        stringStart = this.syncTo(pos);
      }
      return this.string.charCodeAt(pos - stringStart);
    }
  }, {
    key: "lineAfter",
    value: function lineAfter(pos) {
      if (pos >= this.length || pos < 0) return "";
      var stringStart = this.cursorPos - this.string.length;
      if (pos < stringStart || pos >= this.cursorPos) stringStart = this.syncTo(pos);
      return this.cursor.lineBreak ? "" : this.string.slice(pos - stringStart, Math.min(this.length - stringStart, this.string.length));
    }
  }, {
    key: "read",
    value: function read(from, to) {
      var stringStart = this.cursorPos - this.string.length;
      if (from < stringStart || to >= this.cursorPos) return this.doc.sliceString(from, to);else return this.string.slice(from - stringStart, to - stringStart);
    }
  }, {
    key: "clip",
    value: function clip(at) {
      return new DocInput(this.doc, at);
    }
  }]);
  return DocInput;
}(); /**
     A parse context provided to parsers working on the editor content.
     */
var EditorParseContext = /*#__PURE__*/function () {
  /**
  @internal
  */
  function EditorParseContext(parser,
  /**
  The current editor state.
  */
  state) {
    var fragments = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
    var
    /**
    @internal
    */
    tree = arguments.length > 3 ? arguments[3] : undefined;
    var
    /**
    The current editor viewport (or some overapproximation
    thereof). Intended to be used for opportunistically avoiding
    work (in which case
    [`skipUntilInView`](https://codemirror.net/6/docs/ref/#language.EditorParseContext.skipUntilInView)
    should be called to make sure the parser is restarted when the
    skipped region becomes visible).
    */
    viewport = arguments.length > 4 ? arguments[4] : undefined;
    var
    /**
    @internal
    */
    skipped = arguments.length > 5 ? arguments[5] : undefined;
    var
    /**
    This is where skipping parsers can register a promise that,
    when resolved, will schedule a new parse. It is cleared when
    the parse worker picks up the promise. @internal
    */
    scheduleOn = arguments.length > 6 ? arguments[6] : undefined;
    _classCallCheck(this, EditorParseContext);
    this.parser = parser;
    this.state = state;
    this.fragments = fragments;
    this.tree = tree;
    this.viewport = viewport;
    this.skipped = skipped;
    this.scheduleOn = scheduleOn;
    this.parse = null;
    /**
    @internal
    */
    this.tempSkipped = [];
  }
  /**
  @internal
  */
  _createClass(EditorParseContext, [{
    key: "work",
    value: function work(time, upto) {
      if (this.tree != lezer_tree__WEBPACK_IMPORTED_MODULE_0__.Tree.empty && (upto == null ? this.tree.length == this.state.doc.length : this.tree.length >= upto)) {
        this.takeTree();
        return true;
      }
      if (!this.parse) this.parse = this.parser.startParse(new DocInput(this.state.doc), 0, this);
      var endTime = Date.now() + time;
      for (;;) {
        var done = this.parse.advance();
        if (done) {
          this.fragments = this.withoutTempSkipped(lezer_tree__WEBPACK_IMPORTED_MODULE_0__.TreeFragment.addTree(done));
          this.parse = null;
          this.tree = done;
          return true;
        } else if (upto != null && this.parse.pos >= upto) {
          this.takeTree();
          return true;
        }
        if (Date.now() > endTime) return false;
      }
    }
    /**
    @internal
    */
  }, {
    key: "takeTree",
    value: function takeTree() {
      if (this.parse && this.parse.pos > this.tree.length) {
        this.tree = this.parse.forceFinish();
        this.fragments = this.withoutTempSkipped(lezer_tree__WEBPACK_IMPORTED_MODULE_0__.TreeFragment.addTree(this.tree, this.fragments, true));
      }
    }
  }, {
    key: "withoutTempSkipped",
    value: function withoutTempSkipped(fragments) {
      for (var r; r = this.tempSkipped.pop();) {
        fragments = cutFragments(fragments, r.from, r.to);
      }
      return fragments;
    }
    /**
    @internal
    */
  }, {
    key: "changes",
    value: function changes(_changes, newState) {
      var fragments = this.fragments,
        tree = this.tree,
        viewport = this.viewport,
        skipped = this.skipped;
      this.takeTree();
      if (!_changes.empty) {
        var ranges = [];
        _changes.iterChangedRanges(function (fromA, toA, fromB, toB) {
          return ranges.push({
            fromA: fromA,
            toA: toA,
            fromB: fromB,
            toB: toB
          });
        });
        fragments = lezer_tree__WEBPACK_IMPORTED_MODULE_0__.TreeFragment.applyChanges(fragments, ranges);
        tree = lezer_tree__WEBPACK_IMPORTED_MODULE_0__.Tree.empty;
        viewport = {
          from: _changes.mapPos(viewport.from, -1),
          to: _changes.mapPos(viewport.to, 1)
        };
        if (this.skipped.length) {
          skipped = [];
          var _iterator = _createForOfIteratorHelper(this.skipped),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var r = _step.value;
              var from = _changes.mapPos(r.from, 1),
                to = _changes.mapPos(r.to, -1);
              if (from < to) skipped.push({
                from: from,
                to: to
              });
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }
      return new EditorParseContext(this.parser, newState, fragments, tree, viewport, skipped, this.scheduleOn);
    }
    /**
    @internal
    */
  }, {
    key: "updateViewport",
    value: function updateViewport(viewport) {
      this.viewport = viewport;
      var startLen = this.skipped.length;
      for (var i = 0; i < this.skipped.length; i++) {
        var _this$skipped$i = this.skipped[i],
          from = _this$skipped$i.from,
          to = _this$skipped$i.to;
        if (from < viewport.to && to > viewport.from) {
          this.fragments = cutFragments(this.fragments, from, to);
          this.skipped.splice(i--, 1);
        }
      }
      return this.skipped.length < startLen;
    }
    /**
    @internal
    */
  }, {
    key: "reset",
    value: function reset() {
      if (this.parse) {
        this.takeTree();
        this.parse = null;
      }
    }
    /**
    Notify the parse scheduler that the given region was skipped
    because it wasn't in view, and the parse should be restarted
    when it comes into view.
    */
  }, {
    key: "skipUntilInView",
    value: function skipUntilInView(from, to) {
      this.skipped.push({
        from: from,
        to: to
      });
    }
    /**
    Returns a parser intended to be used as placeholder when
    asynchronously loading a nested parser. It'll skip its input and
    mark it as not-really-parsed, so that the next update will parse
    it again.
    
    When `until` is given, a reparse will be scheduled when that
    promise resolves.
    */
  }, {
    key: "movedPast",
    value:
    /**
    @internal
    */
    function movedPast(pos) {
      return this.tree.length < pos && this.parse && this.parse.pos >= pos;
    }
  }], [{
    key: "getSkippingParser",
    value: function getSkippingParser(until) {
      return {
        startParse: function startParse(input, startPos, context) {
          return {
            pos: startPos,
            advance: function advance() {
              var ecx = context;
              ecx.tempSkipped.push({
                from: startPos,
                to: input.length
              });
              if (until) ecx.scheduleOn = ecx.scheduleOn ? Promise.all([ecx.scheduleOn, until]) : until;
              this.pos = input.length;
              return new lezer_tree__WEBPACK_IMPORTED_MODULE_0__.Tree(lezer_tree__WEBPACK_IMPORTED_MODULE_0__.NodeType.none, [], [], input.length - startPos);
            },
            forceFinish: function forceFinish() {
              return this.advance();
            }
          };
        }
      };
    }
  }]);
  return EditorParseContext;
}(); /**
     FIXME backwards compatible shim, remove on next major @internal
     */
EditorParseContext.skippingParser = /*@__PURE__*/EditorParseContext.getSkippingParser();
function cutFragments(fragments, from, to) {
  return lezer_tree__WEBPACK_IMPORTED_MODULE_0__.TreeFragment.applyChanges(fragments, [{
    fromA: from,
    toA: to,
    fromB: from,
    toB: to
  }]);
}
var LanguageState = /*#__PURE__*/function () {
  function LanguageState(
  // A mutable parse state that is used to preserve work done during
  // the lifetime of a state when moving to the next state.
  context) {
    _classCallCheck(this, LanguageState);
    this.context = context;
    this.tree = context.tree;
  }
  _createClass(LanguageState, [{
    key: "apply",
    value: function apply(tr) {
      if (!tr.docChanged) return this;
      var newCx = this.context.changes(tr.changes, tr.state);
      // If the previous parse wasn't done, go forward only up to its
      // end position or the end of the viewport, to avoid slowing down
      // state updates with parse work beyond the viewport.
      var upto = this.context.tree.length == tr.startState.doc.length ? undefined : Math.max(tr.changes.mapPos(this.context.tree.length), newCx.viewport.to);
      if (!newCx.work(25 /* Apply */, upto)) newCx.takeTree();
      return new LanguageState(newCx);
    }
  }], [{
    key: "init",
    value: function init(state) {
      var parseState = new EditorParseContext(state.facet(language).parser, state, [], lezer_tree__WEBPACK_IMPORTED_MODULE_0__.Tree.empty, {
        from: 0,
        to: state.doc.length
      }, [], null);
      if (!parseState.work(25 /* Apply */)) parseState.takeTree();
      return new LanguageState(parseState);
    }
  }]);
  return LanguageState;
}();
Language.state = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({
  create: LanguageState.init,
  update: function update(value, tr) {
    var _iterator2 = _createForOfIteratorHelper(tr.effects),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var e = _step2.value;
        if (e.is(Language.setState)) return e.value;
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
    if (tr.startState.facet(language) != tr.state.facet(language)) return LanguageState.init(tr.state);
    return value.apply(tr);
  }
});
var requestIdle = typeof window != "undefined" && window.requestIdleCallback || function (callback, _ref) {
  var timeout = _ref.timeout;
  return setTimeout(callback, timeout);
};
var cancelIdle = typeof window != "undefined" && window.cancelIdleCallback || clearTimeout;
var parseWorker = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_3__.ViewPlugin.fromClass( /*#__PURE__*/function () {
  function ParseWorker(view) {
    _classCallCheck(this, ParseWorker);
    this.view = view;
    this.working = -1;
    // End of the current time chunk
    this.chunkEnd = -1;
    // Milliseconds of budget left for this chunk
    this.chunkBudget = -1;
    this.work = this.work.bind(this);
    this.scheduleWork();
  }
  _createClass(ParseWorker, [{
    key: "update",
    value: function update(_update) {
      var cx = this.view.state.field(Language.state).context;
      if (_update.viewportChanged) {
        if (cx.updateViewport(_update.view.viewport)) cx.reset();
        if (this.view.viewport.to > cx.tree.length) this.scheduleWork();
      }
      if (_update.docChanged) {
        if (this.view.hasFocus) this.chunkBudget += 50 /* ChangeBonus */;
        this.scheduleWork();
      }
      this.checkAsyncSchedule(cx);
    }
  }, {
    key: "scheduleWork",
    value: function scheduleWork() {
      if (this.working > -1) return;
      var state = this.view.state,
        field = state.field(Language.state),
        frags = field.context.fragments;
      if (field.tree.length >= state.doc.length && frags.length && frags[0].from == 0 && frags[0].to >= state.doc.length) return;
      this.working = requestIdle(this.work, {
        timeout: 500 /* Pause */
      });
    }
  }, {
    key: "work",
    value: function work(deadline) {
      this.working = -1;
      var now = Date.now();
      if (this.chunkEnd < now && (this.chunkEnd < 0 || this.view.hasFocus)) {
        // Start a new chunk
        this.chunkEnd = now + 30000 /* ChunkTime */;
        this.chunkBudget = 3000 /* ChunkBudget */;
      }

      if (this.chunkBudget <= 0) return; // No more budget
      var _this$view = this.view,
        state = _this$view.state,
        vpTo = _this$view.viewport.to,
        field = state.field(Language.state);
      if (field.tree.length >= vpTo + 1000000 /* MaxParseAhead */) return;
      var time = Math.min(this.chunkBudget, deadline ? Math.max(25 /* MinSlice */, deadline.timeRemaining()) : 100 /* Slice */);
      var done = field.context.work(time, vpTo + 1000000 /* MaxParseAhead */);
      this.chunkBudget -= Date.now() - now;
      if (done || this.chunkBudget <= 0 || field.context.movedPast(vpTo)) {
        field.context.takeTree();
        this.view.dispatch({
          effects: Language.setState.of(new LanguageState(field.context))
        });
      }
      if (!done && this.chunkBudget > 0) this.scheduleWork();
      this.checkAsyncSchedule(field.context);
    }
  }, {
    key: "checkAsyncSchedule",
    value: function checkAsyncSchedule(cx) {
      var _this3 = this;
      if (cx.scheduleOn) {
        cx.scheduleOn.then(function () {
          return _this3.scheduleWork();
        });
        cx.scheduleOn = null;
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.working >= 0) cancelIdle(this.working);
    }
  }]);
  return ParseWorker;
}(), {
  eventHandlers: {
    focus: function focus() {
      this.scheduleWork();
    }
  }
});
/**
The facet used to associate a language with an editor state.
*/
var language = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({
  combine: function combine(languages) {
    return languages.length ? languages[0] : null;
  },
  enables: [Language.state, parseWorker]
});
/**
This class bundles a [language object](https://codemirror.net/6/docs/ref/#language.Language) with an
optional set of supporting extensions. Language packages are
encouraged to export a function that optionally takes a
configuration object and returns a `LanguageSupport` instance, as
the main way for client code to use the package.
*/
var LanguageSupport = /*#__PURE__*/_createClass(
/**
Create a support object.
*/
function LanguageSupport(
/**
The language object.
*/
language) {
  var support = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  _classCallCheck(this, LanguageSupport);
  this.language = language;
  this.support = support;
  this.extension = [language, support];
}); /**
    Language descriptions are used to store metadata about languages
    and to dynamically load them. Their main role is finding the
    appropriate language for a filename or dynamically loading nested
    parsers.
    */
var LanguageDescription = /*#__PURE__*/function () {
  function LanguageDescription(
  /**
  The name of this language.
  */
  name,
  /**
  Alternative names for the mode (lowercased, includes `this.name`).
  */
  alias,
  /**
  File extensions associated with this language.
  */
  extensions,
  /**
  Optional filename pattern that should be associated with this
  language.
  */
  filename, loadFunc) {
    _classCallCheck(this, LanguageDescription);
    this.name = name;
    this.alias = alias;
    this.extensions = extensions;
    this.filename = filename;
    this.loadFunc = loadFunc;
    /**
    If the language has been loaded, this will hold its value.
    */
    this.support = undefined;
    this.loading = null;
  }
  /**
  Start loading the the language. Will return a promise that
  resolves to a [`LanguageSupport`](https://codemirror.net/6/docs/ref/#language.LanguageSupport)
  object when the language successfully loads.
  */
  _createClass(LanguageDescription, [{
    key: "load",
    value: function load() {
      var _this4 = this;
      return this.loading || (this.loading = this.loadFunc().then(function (support) {
        return _this4.support = support;
      }, function (err) {
        _this4.loading = null;
        throw err;
      }));
    }
    /**
    Create a language description.
    */
  }], [{
    key: "of",
    value: function of(spec) {
      return new LanguageDescription(spec.name, (spec.alias || []).concat(spec.name).map(function (s) {
        return s.toLowerCase();
      }), spec.extensions || [], spec.filename, spec.load);
    }
    /**
    Look for a language in the given array of descriptions that
    matches the filename. Will first match
    [`filename`](https://codemirror.net/6/docs/ref/#language.LanguageDescription.filename) patterns,
    and then [extensions](https://codemirror.net/6/docs/ref/#language.LanguageDescription.extensions),
    and return the first language that matches.
    */
  }, {
    key: "matchFilename",
    value: function matchFilename(descs, filename) {
      var _iterator3 = _createForOfIteratorHelper(descs),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var _d = _step3.value;
          if (_d.filename && _d.filename.test(filename)) return _d;
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      var ext = /\.([^.]+)$/.exec(filename);
      if (ext) {
        var _iterator4 = _createForOfIteratorHelper(descs),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var d = _step4.value;
            if (d.extensions.indexOf(ext[1]) > -1) return d;
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
      return null;
    }
    /**
    Look for a language whose name or alias matches the the given
    name (case-insensitively). If `fuzzy` is true, and no direct
    matchs is found, this'll also search for a language whose name
    or alias occurs in the string (for names shorter than three
    characters, only when surrounded by non-word characters).
    */
  }, {
    key: "matchLanguageName",
    value: function matchLanguageName(descs, name) {
      var fuzzy = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      name = name.toLowerCase();
      var _iterator5 = _createForOfIteratorHelper(descs),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _d2 = _step5.value;
          if (_d2.alias.some(function (a) {
            return a == name;
          })) return _d2;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      if (fuzzy) {
        var _iterator6 = _createForOfIteratorHelper(descs),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var d = _step6.value;
            var _iterator7 = _createForOfIteratorHelper(d.alias),
              _step7;
            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var a = _step7.value;
                var found = name.indexOf(a);
                if (found > -1 && (a.length > 2 || !/\w/.test(name[found - 1]) && !/\w/.test(name[found + a.length]))) return d;
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
      }
      return null;
    }
  }]);
  return LanguageDescription;
}(); /**
     Facet that defines a way to provide a function that computes the
     appropriate indentation depth at the start of a given line, or
     `null` to indicate no appropriate indentation could be determined.
     */
var indentService = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define();
/**
Facet for overriding the unit by which indentation happens.
Should be a string consisting either entirely of spaces or
entirely of tabs. When not set, this defaults to 2 spaces.
*/
var indentUnit = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({
  combine: function combine(values) {
    if (!values.length) return "  ";
    if (!/^(?: +|\t+)$/.test(values[0])) throw new Error("Invalid indent unit: " + JSON.stringify(values[0]));
    return values[0];
  }
});
/**
Return the _column width_ of an indent unit in the state.
Determined by the [`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit)
facet, and [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) when that
contains tabs.
*/
function getIndentUnit(state) {
  var unit = state.facet(indentUnit);
  return unit.charCodeAt(0) == 9 ? state.tabSize * unit.length : unit.length;
}
/**
Create an indentation string that covers columns 0 to `cols`.
Will use tabs for as much of the columns as possible when the
[`indentUnit`](https://codemirror.net/6/docs/ref/#language.indentUnit) facet contains
tabs.
*/
function indentString(state, cols) {
  var result = "",
    ts = state.tabSize;
  if (state.facet(indentUnit).charCodeAt(0) == 9) while (cols >= ts) {
    result += "\t";
    cols -= ts;
  }
  for (var i = 0; i < cols; i++) {
    result += " ";
  }
  return result;
}
/**
Get the indentation at the given position. Will first consult any
[indent services](https://codemirror.net/6/docs/ref/#language.indentService) that are registered,
and if none of those return an indentation, this will check the
syntax tree for the [indent node prop](https://codemirror.net/6/docs/ref/#language.indentNodeProp)
and use that if found. Returns a number when an indentation could
be determined, and null otherwise.
*/
function getIndentation(context, pos) {
  if (context instanceof _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorState) context = new IndentContext(context);
  var _iterator8 = _createForOfIteratorHelper(context.state.facet(indentService)),
    _step8;
  try {
    for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
      var service = _step8.value;
      var result = service(context, pos);
      if (result != null) return result;
    }
  } catch (err) {
    _iterator8.e(err);
  } finally {
    _iterator8.f();
  }
  var tree = syntaxTree(context.state);
  return tree ? syntaxIndentation(context, tree, pos) : null;
}
/**
Indentation contexts are used when calling [indentation
services](https://codemirror.net/6/docs/ref/#language.indentService). They provide helper utilities
useful in indentation logic, and can selectively override the
indentation reported for some lines.
*/
var IndentContext = /*#__PURE__*/function () {
  /**
  Create an indent context.
  */
  function IndentContext(
  /**
  The editor state.
  */
  state) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    _classCallCheck(this, IndentContext);
    this.state = state;
    this.options = options;
    this.unit = getIndentUnit(state);
  }
  /**
  Get the text directly after `pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  _createClass(IndentContext, [{
    key: "textAfterPos",
    value: function textAfterPos(pos) {
      var _a, _b;
      var sim = (_a = this.options) === null || _a === void 0 ? void 0 : _a.simulateBreak;
      if (pos == sim && ((_b = this.options) === null || _b === void 0 ? void 0 : _b.simulateDoubleBreak)) return "";
      return this.state.sliceDoc(pos, Math.min(pos + 100, sim != null && sim > pos ? sim : 1e9, this.state.doc.lineAt(pos).to));
    }
    /**
    Find the column for the given position.
    */
  }, {
    key: "column",
    value: function column(pos) {
      var _a;
      var line = this.state.doc.lineAt(pos),
        text = line.text.slice(0, pos - line.from);
      var result = this.countColumn(text, pos - line.from);
      var override = ((_a = this.options) === null || _a === void 0 ? void 0 : _a.overrideIndentation) ? this.options.overrideIndentation(line.from) : -1;
      if (override > -1) result += override - this.countColumn(text, text.search(/\S/));
      return result;
    }
    /**
    find the column position (taking tabs into account) of the given
    position in the given string.
    */
  }, {
    key: "countColumn",
    value: function countColumn(line, pos) {
      return (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_2__.countColumn)(pos < 0 ? line : line.slice(0, pos), 0, this.state.tabSize);
    }
    /**
    Find the indentation column of the given document line.
    */
  }, {
    key: "lineIndent",
    value: function lineIndent(line) {
      var _a;
      var override = (_a = this.options) === null || _a === void 0 ? void 0 : _a.overrideIndentation;
      if (override) {
        var overriden = override(line.from);
        if (overriden > -1) return overriden;
      }
      return this.countColumn(line.text, line.text.search(/\S/));
    }
  }]);
  return IndentContext;
}(); /**
     A syntax tree node prop used to associate indentation strategies
     with node types. Such a strategy is a function from an indentation
     context to a column number or null, where null indicates that no
     definitive indentation can be determined.
     */
var indentNodeProp = /*@__PURE__*/new lezer_tree__WEBPACK_IMPORTED_MODULE_0__.NodeProp();
// Compute the indentation for a given position from the syntax tree.
function syntaxIndentation(cx, ast, pos) {
  var tree = ast.resolve(pos);
  // Enter previous nodes that end in empty error terms, which means
  // they were broken off by error recovery, so that indentation
  // works even if the constructs haven't been finished.
  for (var scan = tree, scanPos = pos;;) {
    var last = scan.childBefore(scanPos);
    if (!last) break;
    if (last.type.isError && last.from == last.to) {
      tree = scan;
      scanPos = last.from;
    } else {
      scan = last;
      scanPos = scan.to + 1;
    }
  }
  return indentFrom(tree, pos, cx);
}
function ignoreClosed(cx) {
  var _a, _b;
  return cx.pos == ((_a = cx.options) === null || _a === void 0 ? void 0 : _a.simulateBreak) && ((_b = cx.options) === null || _b === void 0 ? void 0 : _b.simulateDoubleBreak);
}
function indentStrategy(tree) {
  var strategy = tree.type.prop(indentNodeProp);
  if (strategy) return strategy;
  var first = tree.firstChild,
    close;
  if (first && (close = first.type.prop(lezer_tree__WEBPACK_IMPORTED_MODULE_0__.NodeProp.closedBy))) {
    var last = tree.lastChild,
      closed = last && close.indexOf(last.name) > -1;
    return function (cx) {
      return delimitedStrategy(cx, true, 1, undefined, closed && !ignoreClosed(cx) ? last.from : undefined);
    };
  }
  return tree.parent == null ? topIndent : null;
}
function indentFrom(node, pos, base) {
  for (; node; node = node.parent) {
    var strategy = indentStrategy(node);
    if (strategy) return strategy(new TreeIndentContext(base, pos, node));
  }
  return null;
}
function topIndent() {
  return 0;
}
/**
Objects of this type provide context information and helper
methods to indentation functions.
*/
var TreeIndentContext = /*#__PURE__*/function (_IndentContext) {
  _inherits(TreeIndentContext, _IndentContext);
  var _super2 = _createSuper(TreeIndentContext);
  /**
  @internal
  */
  function TreeIndentContext(base,
  /**
  The position at which indentation is being computed.
  */
  pos,
  /**
  The syntax tree node to which the indentation strategy
  applies.
  */
  node) {
    var _this5;
    _classCallCheck(this, TreeIndentContext);
    _this5 = _super2.call(this, base.state, base.options);
    _this5.base = base;
    _this5.pos = pos;
    _this5.node = node;
    return _this5;
  }
  /**
  Get the text directly after `this.pos`, either the entire line
  or the next 100 characters, whichever is shorter.
  */
  _createClass(TreeIndentContext, [{
    key: "textAfter",
    get: function get() {
      return this.textAfterPos(this.pos);
    }
    /**
    Get the indentation at the reference line for `this.node`, which
    is the line on which it starts, unless there is a node that is
    _not_ a parent of this node covering the start of that line. If
    so, the line at the start of that node is tried, again skipping
    on if it is covered by another such node.
    */
  }, {
    key: "baseIndent",
    get: function get() {
      var line = this.state.doc.lineAt(this.node.from);
      // Skip line starts that are covered by a sibling (or cousin, etc)
      for (;;) {
        var atBreak = this.node.resolve(line.from);
        while (atBreak.parent && atBreak.parent.from == atBreak.from) {
          atBreak = atBreak.parent;
        }
        if (isParent(atBreak, this.node)) break;
        line = this.state.doc.lineAt(atBreak.from);
      }
      return this.lineIndent(line);
    }
    /**
    Continue looking for indentations in the node's parent nodes,
    and return the result of that.
    */
  }, {
    key: "continue",
    value: function _continue() {
      var parent = this.node.parent;
      return parent ? indentFrom(parent, this.pos, this.base) : 0;
    }
  }]);
  return TreeIndentContext;
}(IndentContext);
function isParent(parent, of) {
  for (var cur = of; cur; cur = cur.parent) {
    if (parent == cur) return true;
  }
  return false;
}
// Check whether a delimited node is aligned (meaning there are
// non-skipped nodes on the same line as the opening delimiter). And
// if so, return the opening token.
function bracketedAligned(context) {
  var _a;
  var tree = context.node;
  var openToken = tree.childAfter(tree.from),
    last = tree.lastChild;
  if (!openToken) return null;
  var sim = (_a = context.options) === null || _a === void 0 ? void 0 : _a.simulateBreak;
  var openLine = context.state.doc.lineAt(openToken.from);
  var lineEnd = sim == null || sim <= openLine.from ? openLine.to : Math.min(openLine.to, sim);
  for (var pos = openToken.to;;) {
    var next = tree.childAfter(pos);
    if (!next || next == last) return null;
    if (!next.type.isSkipped) return next.from < lineEnd ? openToken : null;
    pos = next.to;
  }
}
/**
An indentation strategy for delimited (usually bracketed) nodes.
Will, by default, indent one unit more than the parent's base
indent unless the line starts with a closing token. When `align`
is true and there are non-skipped nodes on the node's opening
line, the content of the node will be aligned with the end of the
opening node, like this:

    foo(bar,
        baz)
*/
function delimitedIndent(_ref2) {
  var closing = _ref2.closing,
    _ref2$align = _ref2.align,
    align = _ref2$align === void 0 ? true : _ref2$align,
    _ref2$units = _ref2.units,
    units = _ref2$units === void 0 ? 1 : _ref2$units;
  return function (context) {
    return delimitedStrategy(context, align, units, closing);
  };
}
function delimitedStrategy(context, align, units, closing, closedAt) {
  var after = context.textAfter,
    space = after.match(/^\s*/)[0].length;
  var closed = closing && after.slice(space, space + closing.length) == closing || closedAt == context.pos + space;
  var aligned = align ? bracketedAligned(context) : null;
  if (aligned) return closed ? context.column(aligned.from) : context.column(aligned.to);
  return context.baseIndent + (closed ? 0 : context.unit * units);
}
/**
An indentation strategy that aligns a node's content to its base
indentation.
*/
var flatIndent = function flatIndent(context) {
  return context.baseIndent;
};
/**
Creates an indentation strategy that, by default, indents
continued lines one unit more than the node's base indentation.
You can provide `except` to prevent indentation of lines that
match a pattern (for example `/^else\b/` in `if`/`else`
constructs), and you can change the amount of units used with the
`units` option.
*/
function continuedIndent() {
  var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    except = _ref3.except,
    _ref3$units = _ref3.units,
    units = _ref3$units === void 0 ? 1 : _ref3$units;
  return function (context) {
    var matchExcept = except && except.test(context.textAfter);
    return context.baseIndent + (matchExcept ? 0 : units * context.unit);
  };
}
var DontIndentBeyond = 200;
/**
Enables reindentation on input. When a language defines an
`indentOnInput` field in its [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt), which must hold a regular
expression, the line at the cursor will be reindented whenever new
text is typed and the input from the start of the line up to the
cursor matches that regexp.

To avoid unneccesary reindents, it is recommended to start the
regexp with `^` (usually followed by `\s*`), and end it with `$`.
For example, `/^\s*\}$/` will reindent when a closing brace is
added at the start of a line.
*/
function indentOnInput() {
  return _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.EditorState.transactionFilter.of(function (tr) {
    if (!tr.docChanged || tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Transaction.userEvent) != "input") return tr;
    var rules = tr.startState.languageDataAt("indentOnInput", tr.startState.selection.main.head);
    if (!rules.length) return tr;
    var doc = tr.newDoc,
      head = tr.newSelection.main.head,
      line = doc.lineAt(head);
    if (head > line.from + DontIndentBeyond) return tr;
    var lineStart = doc.sliceString(line.from, head);
    if (!rules.some(function (r) {
      return r.test(lineStart);
    })) return tr;
    var state = tr.state,
      last = -1,
      changes = [];
    var _iterator9 = _createForOfIteratorHelper(state.selection.ranges),
      _step9;
    try {
      for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
        var _head = _step9.value.head;
        var _line = state.doc.lineAt(_head);
        if (_line.from == last) continue;
        last = _line.from;
        var indent = getIndentation(state, _line.from);
        if (indent == null) continue;
        var cur = /^\s*/.exec(_line.text)[0];
        var norm = indentString(state, indent);
        if (cur != norm) changes.push({
          from: _line.from,
          to: _line.from + cur.length,
          insert: norm
        });
      }
    } catch (err) {
      _iterator9.e(err);
    } finally {
      _iterator9.f();
    }
    return changes.length ? [tr, {
      changes: changes
    }] : tr;
  });
}

/**
A facet that registers a code folding service. When called with
the extent of a line, such a function should return a foldable
range that starts on that line (but continues beyond it), if one
can be found.
*/
var foldService = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define();
/**
This node prop is used to associate folding information with
syntax node types. Given a syntax node, it should check whether
that tree is foldable and return the range that can be collapsed
when it is.
*/
var foldNodeProp = /*@__PURE__*/new lezer_tree__WEBPACK_IMPORTED_MODULE_0__.NodeProp();
/**
[Fold](https://codemirror.net/6/docs/ref/#language.foldNodeProp) function that folds everything but
the first and the last child of a syntax node. Useful for nodes
that start and end with delimiters.
*/
function foldInside(node) {
  var first = node.firstChild,
    last = node.lastChild;
  return first && first.to < last.from ? {
    from: first.to,
    to: last.type.isError ? node.to : last.from
  } : null;
}
function syntaxFolding(state, start, end) {
  var tree = syntaxTree(state);
  if (tree.length == 0) return null;
  var inner = tree.resolve(end);
  var found = null;
  for (var cur = inner; cur; cur = cur.parent) {
    if (cur.to <= end || cur.from > end) continue;
    if (found && cur.from < start) break;
    var prop = cur.type.prop(foldNodeProp);
    if (prop) {
      var value = prop(cur, state);
      if (value && value.from <= end && value.from >= start && value.to > end) found = value;
    }
  }
  return found;
}
/**
Check whether the given line is foldable. First asks any fold
services registered through
[`foldService`](https://codemirror.net/6/docs/ref/#language.foldService), and if none of them return
a result, tries to query the [fold node
prop](https://codemirror.net/6/docs/ref/#language.foldNodeProp) of syntax nodes that cover the end
of the line.
*/
function foldable(state, lineStart, lineEnd) {
  var _iterator10 = _createForOfIteratorHelper(state.facet(foldService)),
    _step10;
  try {
    for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
      var service = _step10.value;
      var result = service(state, lineStart, lineEnd);
      if (result) return result;
    }
  } catch (err) {
    _iterator10.e(err);
  } finally {
    _iterator10.f();
  }
  return syntaxFolding(state, lineStart, lineEnd);
}


/***/ }),

/***/ "./node_modules/@codemirror/lint/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@codemirror/lint/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "closeLintPanel": () => (/* binding */ closeLintPanel),
/* harmony export */   "forceLinting": () => (/* binding */ forceLinting),
/* harmony export */   "lintKeymap": () => (/* binding */ lintKeymap),
/* harmony export */   "linter": () => (/* binding */ linter),
/* harmony export */   "nextDiagnostic": () => (/* binding */ nextDiagnostic),
/* harmony export */   "openLintPanel": () => (/* binding */ openLintPanel),
/* harmony export */   "setDiagnostics": () => (/* binding */ setDiagnostics)
/* harmony export */ });
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_tooltip__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/tooltip */ "./node_modules/@codemirror/tooltip/dist/index.js");
/* harmony import */ var _codemirror_panel__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/panel */ "./node_modules/@codemirror/panel/dist/index.js");
/* harmony import */ var crelt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crelt */ "./node_modules/crelt/index.es.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }





var SelectedDiagnostic = /*#__PURE__*/_createClass(function SelectedDiagnostic(from, to, diagnostic) {
  _classCallCheck(this, SelectedDiagnostic);
  this.from = from;
  this.to = to;
  this.diagnostic = diagnostic;
});
var LintState = /*#__PURE__*/function () {
  function LintState(diagnostics, panel, selected) {
    _classCallCheck(this, LintState);
    this.diagnostics = diagnostics;
    this.panel = panel;
    this.selected = selected;
  }
  _createClass(LintState, null, [{
    key: "init",
    value: function init(diagnostics, panel) {
      var ranges = _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.set(diagnostics.map(function (d) {
        return d.from < d.to ? _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.mark({
          attributes: {
            "class": "cm-lintRange cm-lintRange-" + d.severity
          },
          diagnostic: d
        }).range(d.from, d.to) : _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.widget({
          widget: new DiagnosticWidget(d),
          diagnostic: d
        }).range(d.from);
      }), true);
      return new LintState(ranges, panel, findDiagnostic(ranges));
    }
  }]);
  return LintState;
}();
function findDiagnostic(diagnostics) {
  var diagnostic = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var found = null;
  diagnostics.between(after, 1e9, function (from, to, _ref) {
    var spec = _ref.spec;
    if (diagnostic && spec.diagnostic != diagnostic) return;
    found = new SelectedDiagnostic(from, to, spec.diagnostic);
    return false;
  });
  return found;
}
function maybeEnableLint(state, effects, getState) {
  return state.field(lintState, false) ? effects : effects.concat(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.appendConfig.of([lintState.init(getState), _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.decorations.compute([lintState], function (state) {
    var _state$field = state.field(lintState),
      selected = _state$field.selected,
      panel = _state$field.panel;
    return !selected || !panel || selected.from == selected.to ? _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.none : _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.set([activeMark.range(selected.from, selected.to)]);
  }), (0,_codemirror_tooltip__WEBPACK_IMPORTED_MODULE_3__.hoverTooltip)(lintTooltip), baseTheme]));
}
/**
Returns a transaction spec which updates the current set of
diagnostics.
*/
function setDiagnostics(state, diagnostics) {
  return {
    effects: maybeEnableLint(state, [setDiagnosticsEffect.of(diagnostics)], function () {
      return LintState.init(diagnostics, null);
    })
  };
}
var setDiagnosticsEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();
var togglePanel = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();
var movePanelSelection = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();
var lintState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateField.define({
  create: function create() {
    return new LintState(_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.none, null, null);
  },
  update: function update(value, tr) {
    if (tr.docChanged) {
      var mapped = value.diagnostics.map(tr.changes),
        selected = null;
      if (value.selected) {
        var selPos = tr.changes.mapPos(value.selected.from, 1);
        selected = findDiagnostic(mapped, value.selected.diagnostic, selPos) || findDiagnostic(mapped, null, selPos);
      }
      value = new LintState(mapped, value.panel, selected);
    }
    var _iterator = _createForOfIteratorHelper(tr.effects),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var effect = _step.value;
        if (effect.is(setDiagnosticsEffect)) {
          value = LintState.init(effect.value, value.panel);
        } else if (effect.is(togglePanel)) {
          value = new LintState(value.diagnostics, effect.value ? LintPanel.open : null, value.selected);
        } else if (effect.is(movePanelSelection)) {
          value = new LintState(value.diagnostics, value.panel, effect.value);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return value;
  },
  provide: function provide(f) {
    return [_codemirror_panel__WEBPACK_IMPORTED_MODULE_4__.showPanel.from(f, function (val) {
      return val.panel;
    }), _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.decorations.from(f, function (s) {
      return s.diagnostics;
    })];
  }
});
var activeMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.mark({
  "class": "cm-lintRange cm-lintRange-active"
});
function lintTooltip(view, pos, side) {
  var _view$state$field = view.state.field(lintState),
    diagnostics = _view$state$field.diagnostics;
  var found = [],
    stackStart = 2e8,
    stackEnd = 0;
  diagnostics.between(pos - (side < 0 ? 1 : 0), pos + (side > 0 ? 1 : 0), function (from, to, _ref2) {
    var spec = _ref2.spec;
    if (pos >= from && pos <= to && (from == to || (pos > from || side > 0) && (pos < to || side < 0))) {
      found.push(spec.diagnostic);
      stackStart = Math.min(from, stackStart);
      stackEnd = Math.max(to, stackEnd);
    }
  });
  if (!found.length) return null;
  return {
    pos: stackStart,
    end: stackEnd,
    above: view.state.doc.lineAt(stackStart).to < stackEnd,
    create: function create() {
      return {
        dom: (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("ul", {
          "class": "cm-tooltip-lint"
        }, found.map(function (d) {
          return renderDiagnostic(view, d, false);
        }))
      };
    }
  };
}
/**
Command to open and focus the lint panel.
*/
var openLintPanel = function openLintPanel(view) {
  var field = view.state.field(lintState, false);
  if (!field || !field.panel) view.dispatch({
    effects: maybeEnableLint(view.state, [togglePanel.of(true)], function () {
      return LintState.init([], LintPanel.open);
    })
  });
  var panel = (0,_codemirror_panel__WEBPACK_IMPORTED_MODULE_4__.getPanel)(view, LintPanel.open);
  if (panel) panel.dom.querySelector(".cm-panel-lint ul").focus();
  return true;
};
/**
Command to close the lint panel, when open.
*/
var closeLintPanel = function closeLintPanel(view) {
  var field = view.state.field(lintState, false);
  if (!field || !field.panel) return false;
  view.dispatch({
    effects: togglePanel.of(false)
  });
  return true;
};
/**
Move the selection to the next diagnostic.
*/
var nextDiagnostic = function nextDiagnostic(view) {
  var field = view.state.field(lintState, false);
  if (!field) return false;
  var sel = view.state.selection.main,
    next = field.diagnostics.iter(sel.to + 1);
  if (!next.value) {
    next = field.diagnostics.iter(0);
    if (!next.value || next.from == sel.from && next.to == sel.to) return false;
  }
  view.dispatch({
    selection: {
      anchor: next.from,
      head: next.to
    },
    scrollIntoView: true
  });
  return true;
};
/**
A set of default key bindings for the lint functionality.

- Ctrl-Shift-m (Cmd-Shift-m on macOS): [`openLintPanel`](https://codemirror.net/6/docs/ref/#lint.openLintPanel)
- F8: [`nextDiagnostic`](https://codemirror.net/6/docs/ref/#lint.nextDiagnostic)
*/
var lintKeymap = [{
  key: "Mod-Shift-m",
  run: openLintPanel
}, {
  key: "F8",
  run: nextDiagnostic
}];
var lintPlugin = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    _classCallCheck(this, _class);
    this.view = view;
    this.timeout = -1;
    this.set = true;
    var _view$state$facet = view.state.facet(lintSource),
      delay = _view$state$facet.delay;
    this.lintTime = Date.now() + delay;
    this.run = this.run.bind(this);
    this.timeout = setTimeout(this.run, delay);
  }
  _createClass(_class, [{
    key: "run",
    value: function run() {
      var _this = this;
      var now = Date.now();
      if (now < this.lintTime - 10) {
        setTimeout(this.run, this.lintTime - now);
      } else {
        this.set = false;
        var state = this.view.state,
          _state$facet = state.facet(lintSource),
          sources = _state$facet.sources;
        Promise.all(sources.map(function (source) {
          return Promise.resolve(source(_this.view));
        })).then(function (annotations) {
          var _a, _b;
          var all = annotations.reduce(function (a, b) {
            return a.concat(b);
          });
          if (_this.view.state.doc == state.doc && (all.length || ((_b = (_a = _this.view.state.field(lintState, false)) === null || _a === void 0 ? void 0 : _a.diagnostics) === null || _b === void 0 ? void 0 : _b.size))) _this.view.dispatch(setDiagnostics(_this.view.state, all));
        }, function (error) {
          (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.logException)(_this.view.state, error);
        });
      }
    }
  }, {
    key: "update",
    value: function update(_update) {
      if (_update.docChanged) {
        var _update$state$facet = _update.state.facet(lintSource),
          delay = _update$state$facet.delay;
        this.lintTime = Date.now() + delay;
        if (!this.set) {
          this.set = true;
          this.timeout = setTimeout(this.run, delay);
        }
      }
    }
  }, {
    key: "force",
    value: function force() {
      if (this.set) {
        this.lintTime = Date.now();
        this.run();
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      clearTimeout(this.timeout);
    }
  }]);
  return _class;
}());
var lintSource = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({
  combine: function combine(input) {
    return {
      sources: input.map(function (i) {
        return i.source;
      }),
      delay: input.length ? Math.max.apply(Math, _toConsumableArray(input.map(function (i) {
        return i.delay;
      }))) : 750
    };
  },
  enables: lintPlugin
});
/**
Given a diagnostic source, this function returns an extension that
enables linting with that source. It will be called whenever the
editor is idle (after its content changed).
*/
function linter(source) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _a;
  return lintSource.of({
    source: source,
    delay: (_a = config.delay) !== null && _a !== void 0 ? _a : 750
  });
}
/**
Forces any linters [configured](https://codemirror.net/6/docs/ref/#lint.linter) to run when the
editor is idle to run right away.
*/
function forceLinting(view) {
  var plugin = view.plugin(lintPlugin);
  if (plugin) plugin.force();
}
function assignKeys(actions) {
  var assigned = [];
  if (actions) {
    var _iterator2 = _createForOfIteratorHelper(actions),
      _step2;
    try {
      actions: for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var name = _step2.value.name;
        var _loop = function _loop(i) {
          var ch = name[i];
          if (/[a-zA-Z]/.test(ch) && !assigned.some(function (c) {
            return c.toLowerCase() == ch.toLowerCase();
          })) {
            assigned.push(ch);
            return "continue|actions";
          }
        };
        for (var i = 0; i < name.length; i++) {
          var _ret = _loop(i);
          if (_ret === "continue|actions") continue actions;
        }
        assigned.push("");
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  return assigned;
}
function renderDiagnostic(view, diagnostic, inPanel) {
  var _a;
  var keys = inPanel ? assignKeys(diagnostic.actions) : [];
  return (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("li", {
    "class": "cm-diagnostic cm-diagnostic-" + diagnostic.severity
  }, (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("span", {
    "class": "cm-diagnosticText"
  }, diagnostic.message), (_a = diagnostic.actions) === null || _a === void 0 ? void 0 : _a.map(function (action, i) {
    var click = function click(e) {
      e.preventDefault();
      var found = findDiagnostic(view.state.field(lintState).diagnostics, diagnostic);
      if (found) action.apply(view, found.from, found.to);
    };
    var name = action.name,
      keyIndex = keys[i] ? name.indexOf(keys[i]) : -1;
    var nameElt = keyIndex < 0 ? name : [name.slice(0, keyIndex), (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("u", name.slice(keyIndex, keyIndex + 1)), name.slice(keyIndex + 1)];
    return (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("button", {
      "class": "cm-diagnosticAction",
      onclick: click,
      onmousedown: click,
      "aria-label": " Action: ".concat(name).concat(keyIndex < 0 ? "" : " (access key \"".concat(keys[i], ")\""), ".")
    }, nameElt);
  }), diagnostic.source && (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("div", {
    "class": "cm-diagnosticSource"
  }, diagnostic.source));
}
var DiagnosticWidget = /*#__PURE__*/function (_WidgetType) {
  _inherits(DiagnosticWidget, _WidgetType);
  var _super = _createSuper(DiagnosticWidget);
  function DiagnosticWidget(diagnostic) {
    var _this2;
    _classCallCheck(this, DiagnosticWidget);
    _this2 = _super.call(this);
    _this2.diagnostic = diagnostic;
    return _this2;
  }
  _createClass(DiagnosticWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.diagnostic == this.diagnostic;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      return (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("span", {
        "class": "cm-lintPoint cm-lintPoint-" + this.diagnostic.severity
      });
    }
  }]);
  return DiagnosticWidget;
}(_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.WidgetType);
var PanelItem = /*#__PURE__*/_createClass(function PanelItem(view, diagnostic) {
  _classCallCheck(this, PanelItem);
  this.diagnostic = diagnostic;
  this.id = "item_" + Math.floor(Math.random() * 0xffffffff).toString(16);
  this.dom = renderDiagnostic(view, diagnostic, true);
  this.dom.id = this.id;
  this.dom.setAttribute("role", "option");
});
var LintPanel = /*#__PURE__*/function () {
  function LintPanel(view) {
    var _this3 = this;
    _classCallCheck(this, LintPanel);
    this.view = view;
    this.items = [];
    var onkeydown = function onkeydown(event) {
      if (event.keyCode == 27) {
        // Escape
        closeLintPanel(_this3.view);
        _this3.view.focus();
      } else if (event.keyCode == 38 || event.keyCode == 33) {
        // ArrowUp, PageUp
        _this3.moveSelection((_this3.selectedIndex - 1 + _this3.items.length) % _this3.items.length);
      } else if (event.keyCode == 40 || event.keyCode == 34) {
        // ArrowDown, PageDown
        _this3.moveSelection((_this3.selectedIndex + 1) % _this3.items.length);
      } else if (event.keyCode == 36) {
        // Home
        _this3.moveSelection(0);
      } else if (event.keyCode == 35) {
        // End
        _this3.moveSelection(_this3.items.length - 1);
      } else if (event.keyCode == 13) {
        // Enter
        _this3.view.focus();
      } else if (event.keyCode >= 65 && event.keyCode <= 90 && _this3.selectedIndex >= 0) {
        // A-Z
        var diagnostic = _this3.items[_this3.selectedIndex].diagnostic,
          keys = assignKeys(diagnostic.actions);
        for (var i = 0; i < keys.length; i++) {
          if (keys[i].toUpperCase().charCodeAt(0) == event.keyCode) {
            var found = findDiagnostic(_this3.view.state.field(lintState).diagnostics, diagnostic);
            if (found) diagnostic.actions[i].apply(view, found.from, found.to);
          }
        }
      } else {
        return;
      }
      event.preventDefault();
    };
    var onclick = function onclick(event) {
      for (var i = 0; i < _this3.items.length; i++) {
        if (_this3.items[i].dom.contains(event.target)) _this3.moveSelection(i);
      }
    };
    this.list = (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("ul", {
      tabIndex: 0,
      role: "listbox",
      "aria-label": this.view.state.phrase("Diagnostics"),
      onkeydown: onkeydown,
      onclick: onclick
    });
    this.dom = (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("div", {
      "class": "cm-panel-lint"
    }, this.list, (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("button", {
      name: "close",
      "aria-label": this.view.state.phrase("close"),
      onclick: function onclick() {
        return closeLintPanel(_this3.view);
      }
    }, "×"));
    this.update();
  }
  _createClass(LintPanel, [{
    key: "selectedIndex",
    get: function get() {
      var selected = this.view.state.field(lintState).selected;
      if (!selected) return -1;
      for (var i = 0; i < this.items.length; i++) {
        if (this.items[i].diagnostic == selected.diagnostic) return i;
      }
      return -1;
    }
  }, {
    key: "update",
    value: function update() {
      var _this4 = this;
      var _this$view$state$fiel = this.view.state.field(lintState),
        diagnostics = _this$view$state$fiel.diagnostics,
        selected = _this$view$state$fiel.selected;
      var i = 0,
        needsSync = false,
        newSelectedItem = null;
      diagnostics.between(0, this.view.state.doc.length, function (_start, _end, _ref3) {
        var spec = _ref3.spec;
        var found = -1,
          item;
        for (var j = i; j < _this4.items.length; j++) {
          if (_this4.items[j].diagnostic == spec.diagnostic) {
            found = j;
            break;
          }
        }
        if (found < 0) {
          item = new PanelItem(_this4.view, spec.diagnostic);
          _this4.items.splice(i, 0, item);
          needsSync = true;
        } else {
          item = _this4.items[found];
          if (found > i) {
            _this4.items.splice(i, found - i);
            needsSync = true;
          }
        }
        if (selected && item.diagnostic == selected.diagnostic) {
          if (!item.dom.hasAttribute("aria-selected")) {
            item.dom.setAttribute("aria-selected", "true");
            newSelectedItem = item;
          }
        } else if (item.dom.hasAttribute("aria-selected")) {
          item.dom.removeAttribute("aria-selected");
        }
        i++;
      });
      while (i < this.items.length && !(this.items.length == 1 && this.items[0].diagnostic.from < 0)) {
        needsSync = true;
        this.items.pop();
      }
      if (this.items.length == 0) {
        this.items.push(new PanelItem(this.view, {
          from: -1,
          to: -1,
          severity: "info",
          message: this.view.state.phrase("No diagnostics")
        }));
        needsSync = true;
      }
      if (newSelectedItem) {
        this.list.setAttribute("aria-activedescendant", newSelectedItem.id);
        this.view.requestMeasure({
          key: this,
          read: function read() {
            return {
              sel: newSelectedItem.dom.getBoundingClientRect(),
              panel: _this4.list.getBoundingClientRect()
            };
          },
          write: function write(_ref4) {
            var sel = _ref4.sel,
              panel = _ref4.panel;
            if (sel.top < panel.top) _this4.list.scrollTop -= panel.top - sel.top;else if (sel.bottom > panel.bottom) _this4.list.scrollTop += sel.bottom - panel.bottom;
          }
        });
      } else if (this.selectedIndex < 0) {
        this.list.removeAttribute("aria-activedescendant");
      }
      if (needsSync) this.sync();
    }
  }, {
    key: "sync",
    value: function sync() {
      var domPos = this.list.firstChild;
      function rm() {
        var prev = domPos;
        domPos = prev.nextSibling;
        prev.remove();
      }
      var _iterator3 = _createForOfIteratorHelper(this.items),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var item = _step3.value;
          if (item.dom.parentNode == this.list) {
            while (domPos != item.dom) {
              rm();
            }
            domPos = item.dom.nextSibling;
          } else {
            this.list.insertBefore(item.dom, domPos);
          }
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      while (domPos) {
        rm();
      }
    }
  }, {
    key: "moveSelection",
    value: function moveSelection(selectedIndex) {
      if (this.selectedIndex < 0) return;
      var field = this.view.state.field(lintState);
      var selection = findDiagnostic(field.diagnostics, this.items[selectedIndex].diagnostic);
      if (!selection) return;
      this.view.dispatch({
        selection: {
          anchor: selection.from,
          head: selection.to
        },
        scrollIntoView: true,
        effects: movePanelSelection.of(selection)
      });
    }
  }], [{
    key: "open",
    value: function open(view) {
      return new LintPanel(view);
    }
  }]);
  return LintPanel;
}();
function underline(color) {
  if (typeof btoa != "function") return "none";
  var svg = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"6\" height=\"3\">\n    <path d=\"m0 3 l2 -2 l1 0 l2 2 l1 0\" stroke=\"".concat(color, "\" fill=\"none\" stroke-width=\".7\"/>\n  </svg>");
  return "url('data:image/svg+xml;base64,".concat(btoa(svg), "')");
}
var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.baseTheme({
  ".cm-diagnostic": {
    padding: "3px 6px 3px 8px",
    marginLeft: "-1px",
    display: "block",
    whiteSpace: "pre-wrap"
  },
  ".cm-diagnostic-error": {
    borderLeft: "5px solid #d11"
  },
  ".cm-diagnostic-warning": {
    borderLeft: "5px solid orange"
  },
  ".cm-diagnostic-info": {
    borderLeft: "5px solid #999"
  },
  ".cm-diagnosticAction": {
    font: "inherit",
    border: "none",
    padding: "2px 4px",
    backgroundColor: "#444",
    color: "white",
    borderRadius: "3px",
    marginLeft: "8px"
  },
  ".cm-diagnosticSource": {
    fontSize: "70%",
    opacity: .7
  },
  ".cm-lintRange": {
    backgroundPosition: "left bottom",
    backgroundRepeat: "repeat-x"
  },
  ".cm-lintRange-error": {
    backgroundImage: /*@__PURE__*/underline("#d11")
  },
  ".cm-lintRange-warning": {
    backgroundImage: /*@__PURE__*/underline("orange")
  },
  ".cm-lintRange-info": {
    backgroundImage: /*@__PURE__*/underline("#999")
  },
  ".cm-lintRange-active": {
    backgroundColor: "#ffdd9980"
  },
  ".cm-tooltip-lint": {
    padding: 0,
    margin: 0
  },
  ".cm-lintPoint": {
    position: "relative",
    "&:after": {
      content: '""',
      position: "absolute",
      bottom: 0,
      left: "-2px",
      borderLeft: "3px solid transparent",
      borderRight: "3px solid transparent",
      borderBottom: "4px solid #d11"
    }
  },
  ".cm-lintPoint-warning": {
    "&:after": {
      borderBottomColor: "orange"
    }
  },
  ".cm-lintPoint-info": {
    "&:after": {
      borderBottomColor: "#999"
    }
  },
  ".cm-panel.cm-panel-lint": {
    position: "relative",
    "& ul": {
      maxHeight: "100px",
      overflowY: "auto",
      "& [aria-selected]": {
        backgroundColor: "#ddd",
        "& u": {
          textDecoration: "underline"
        }
      },
      "&:focus [aria-selected]": {
        background_fallback: "#bdf",
        backgroundColor: "Highlight",
        color_fallback: "white",
        color: "HighlightText"
      },
      "& u": {
        textDecoration: "none"
      },
      padding: 0,
      margin: 0
    },
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "2px",
      background: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    }
  }
});


/***/ }),

/***/ "./node_modules/@codemirror/matchbrackets/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@codemirror/matchbrackets/dist/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "bracketMatching": () => (/* binding */ bracketMatching),
/* harmony export */   "matchBrackets": () => (/* binding */ matchBrackets)
/* harmony export */ });
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_language__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/language */ "./node_modules/@codemirror/language/dist/index.js");
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var lezer_tree__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lezer-tree */ "./node_modules/lezer-tree/dist/tree.es.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }




var baseTheme = _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.baseTheme({
  ".cm-matchingBracket": {
    color: "#0b0"
  },
  ".cm-nonmatchingBracket": {
    color: "#a22"
  }
});
var DefaultScanDist = 10000,
  DefaultBrackets = "()[]{}";
var bracketMatchingConfig = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({
  combine: function combine(configs) {
    return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.combineConfig)(configs, {
      afterCursor: true,
      brackets: DefaultBrackets,
      maxScanDistance: DefaultScanDist
    });
  }
});
var matchingMark = _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.mark({
    "class": "cm-matchingBracket"
  }),
  nonmatchingMark = _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.mark({
    "class": "cm-nonmatchingBracket"
  });
var bracketMatchingState = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateField.define({
  create: function create() {
    return _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.none;
  },
  update: function update(deco, tr) {
    if (!tr.docChanged && !tr.selection) return deco;
    var decorations = [];
    var config = tr.state.facet(bracketMatchingConfig);
    var _iterator = _createForOfIteratorHelper(tr.state.selection.ranges),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var range = _step.value;
        if (!range.empty) continue;
        var match = matchBrackets(tr.state, range.head, -1, config) || range.head > 0 && matchBrackets(tr.state, range.head - 1, 1, config) || config.afterCursor && (matchBrackets(tr.state, range.head, 1, config) || range.head < tr.state.doc.length && matchBrackets(tr.state, range.head + 1, -1, config));
        if (!match) continue;
        var mark = match.matched ? matchingMark : nonmatchingMark;
        decorations.push(mark.range(match.start.from, match.start.to));
        if (match.end) decorations.push(mark.range(match.end.from, match.end.to));
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.Decoration.set(decorations, true);
  },
  provide: function provide(f) {
    return _codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.decorations.from(f);
  }
});
var bracketMatchingUnique = [bracketMatchingState, baseTheme];
/// Create an extension that enables bracket matching. Whenever the
/// cursor is next to a bracket, that bracket and the one it matches
/// are highlighted. Or, when no matching bracket is found, another
/// highlighting style is used to indicate this.
function bracketMatching() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [bracketMatchingConfig.of(config), bracketMatchingUnique];
}
function matchingNodes(node, dir, brackets) {
  var byProp = node.prop(dir < 0 ? lezer_tree__WEBPACK_IMPORTED_MODULE_0__.NodeProp.openedBy : lezer_tree__WEBPACK_IMPORTED_MODULE_0__.NodeProp.closedBy);
  if (byProp) return byProp;
  if (node.name.length == 1) {
    var index = brackets.indexOf(node.name);
    if (index > -1 && index % 2 == (dir < 0 ? 1 : 0)) return [brackets[index + dir]];
  }
  return null;
}
/// Find the matching bracket for the token at `pos`, scanning
/// direction `dir`. Only the `brackets` and `maxScanDistance`
/// properties are used from `config`, if given. Returns null if no
/// bracket was found at `pos`, or a match result otherwise.
function matchBrackets(state, pos, dir) {
  var config = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  var maxScanDistance = config.maxScanDistance || DefaultScanDist,
    brackets = config.brackets || DefaultBrackets;
  var tree = (0,_codemirror_language__WEBPACK_IMPORTED_MODULE_3__.syntaxTree)(state),
    sub = tree.resolve(pos, dir),
    matches;
  if (matches = matchingNodes(sub.type, dir, brackets)) return matchMarkedBrackets(state, pos, dir, sub, matches, brackets);else return matchPlainBrackets(state, pos, dir, tree, sub.type, maxScanDistance, brackets);
}
function matchMarkedBrackets(_state, _pos, dir, token, matching, brackets) {
  var parent = token.parent,
    firstToken = {
      from: token.from,
      to: token.to
    };
  var depth = 0,
    cursor = parent === null || parent === void 0 ? void 0 : parent.cursor;
  if (cursor && (dir < 0 ? cursor.childBefore(token.from) : cursor.childAfter(token.to))) do {
    if (dir < 0 ? cursor.to <= token.from : cursor.from >= token.to) {
      if (depth == 0 && matching.indexOf(cursor.type.name) > -1) {
        return {
          start: firstToken,
          end: {
            from: cursor.from,
            to: cursor.to
          },
          matched: true
        };
      } else if (matchingNodes(cursor.type, dir, brackets)) {
        depth++;
      } else if (matchingNodes(cursor.type, -dir, brackets)) {
        depth--;
        if (depth == 0) return {
          start: firstToken,
          end: {
            from: cursor.from,
            to: cursor.to
          },
          matched: false
        };
      }
    }
  } while (dir < 0 ? cursor.prevSibling() : cursor.nextSibling());
  return {
    start: firstToken,
    matched: false
  };
}
function matchPlainBrackets(state, pos, dir, tree, tokenType, maxScanDistance, brackets) {
  var startCh = dir < 0 ? state.sliceDoc(pos - 1, pos) : state.sliceDoc(pos, pos + 1);
  var bracket = brackets.indexOf(startCh);
  if (bracket < 0 || bracket % 2 == 0 != dir > 0) return null;
  var startToken = {
    from: dir < 0 ? pos - 1 : pos,
    to: dir > 0 ? pos + 1 : pos
  };
  var iter = state.doc.iterRange(pos, dir > 0 ? state.doc.length : 0),
    depth = 0;
  for (var distance = 0; !iter.next().done && distance <= maxScanDistance;) {
    var text = iter.value;
    if (dir < 0) distance += text.length;
    var basePos = pos + distance * dir;
    for (var _pos2 = dir > 0 ? 0 : text.length - 1, end = dir > 0 ? text.length : -1; _pos2 != end; _pos2 += dir) {
      var found = brackets.indexOf(text[_pos2]);
      if (found < 0 || tree.resolve(basePos + _pos2, 1).type != tokenType) continue;
      if (found % 2 == 0 == dir > 0) {
        depth++;
      } else if (depth == 1) {
        // Closing
        return {
          start: startToken,
          end: {
            from: basePos + _pos2,
            to: basePos + _pos2 + 1
          },
          matched: found >> 1 == bracket >> 1
        };
      } else {
        depth--;
      }
    }
    if (dir > 0) distance += text.length;
  }
  return iter.done ? {
    start: startToken,
    matched: false
  } : null;
}


/***/ }),

/***/ "./node_modules/@codemirror/panel/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@codemirror/panel/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPanel": () => (/* binding */ getPanel),
/* harmony export */   "panels": () => (/* binding */ panels),
/* harmony export */   "showPanel": () => (/* binding */ showPanel)
/* harmony export */ });
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }


var panelConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Facet.define({
  combine: function combine(configs) {
    var topContainer, bottomContainer;
    var _iterator = _createForOfIteratorHelper(configs),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var c = _step.value;
        topContainer = topContainer || c.topContainer;
        bottomContainer = bottomContainer || c.bottomContainer;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return {
      topContainer: topContainer,
      bottomContainer: bottomContainer
    };
  }
});
/**
Configures the panel-managing extension.
*/
function panels(config) {
  return config ? [panelConfig.of(config)] : [];
}
/**
Get the active panel created by the given constructor, if any.
This can be useful when you need access to your panels' DOM
structure.
*/
function getPanel(view, panel) {
  var plugin = view.plugin(panelPlugin);
  var index = plugin ? plugin.specs.indexOf(panel) : -1;
  return index > -1 ? plugin.panels[index] : null;
}
var panelPlugin = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    _classCallCheck(this, _class);
    this.input = view.state.facet(showPanel);
    this.specs = this.input.filter(function (s) {
      return s;
    });
    this.panels = this.specs.map(function (spec) {
      return spec(view);
    });
    var conf = view.state.facet(panelConfig);
    this.top = new PanelGroup(view, true, conf.topContainer);
    this.bottom = new PanelGroup(view, false, conf.bottomContainer);
    this.top.sync(this.panels.filter(function (p) {
      return p.top;
    }));
    this.bottom.sync(this.panels.filter(function (p) {
      return !p.top;
    }));
    var _iterator2 = _createForOfIteratorHelper(this.panels),
      _step2;
    try {
      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        var p = _step2.value;
        p.dom.classList.add("cm-panel");
        // FIXME drop on next breaking release
        if (p["class"]) p.dom.classList.add(p["class"]);
        if (p.mount) p.mount();
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  }
  _createClass(_class, [{
    key: "update",
    value: function update(_update) {
      var conf = _update.state.facet(panelConfig);
      if (this.top.container != conf.topContainer) {
        this.top.sync([]);
        this.top = new PanelGroup(_update.view, true, conf.topContainer);
      }
      if (this.bottom.container != conf.bottomContainer) {
        this.bottom.sync([]);
        this.bottom = new PanelGroup(_update.view, false, conf.bottomContainer);
      }
      this.top.syncClasses();
      this.bottom.syncClasses();
      var input = _update.state.facet(showPanel);
      if (input != this.input) {
        var specs = input.filter(function (x) {
          return x;
        });
        var _panels = [],
          top = [],
          bottom = [],
          mount = [];
        var _iterator3 = _createForOfIteratorHelper(specs),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var spec = _step3.value;
            var known = this.specs.indexOf(spec),
              panel = void 0;
            if (known < 0) {
              panel = spec(_update.view);
              mount.push(panel);
            } else {
              panel = this.panels[known];
              if (panel.update) panel.update(_update);
            }
            _panels.push(panel);
            (panel.top ? top : bottom).push(panel);
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
        this.specs = specs;
        this.panels = _panels;
        this.top.sync(top);
        this.bottom.sync(bottom);
        for (var _i = 0, _mount = mount; _i < _mount.length; _i++) {
          var p = _mount[_i];
          p.dom.classList.add("cm-panel");
          // FIXME drop on next breaking release
          if (p["class"]) p.dom.classList.add(p["class"]);
          if (p.mount) p.mount();
        }
      } else {
        var _iterator4 = _createForOfIteratorHelper(this.panels),
          _step4;
        try {
          for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
            var _p = _step4.value;
            if (_p.update) _p.update(_update);
          }
        } catch (err) {
          _iterator4.e(err);
        } finally {
          _iterator4.f();
        }
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.top.sync([]);
      this.bottom.sync([]);
    }
  }]);
  return _class;
}(), {
  provide: /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.PluginField.scrollMargins.from(function (value) {
    return {
      top: value.top.scrollMargin(),
      bottom: value.bottom.scrollMargin()
    };
  })
});
var PanelGroup = /*#__PURE__*/function () {
  function PanelGroup(view, top, container) {
    _classCallCheck(this, PanelGroup);
    this.view = view;
    this.top = top;
    this.container = container;
    this.dom = undefined;
    this.classes = "";
    this.panels = [];
    this.syncClasses();
  }
  _createClass(PanelGroup, [{
    key: "sync",
    value: function sync(panels) {
      this.panels = panels;
      this.syncDOM();
    }
  }, {
    key: "syncDOM",
    value: function syncDOM() {
      if (this.panels.length == 0) {
        if (this.dom) {
          this.dom.remove();
          this.dom = undefined;
        }
        return;
      }
      if (!this.dom) {
        this.dom = document.createElement("div");
        this.dom.className = this.top ? "cm-panels cm-panels-top" : "cm-panels cm-panels-bottom";
        this.dom.style[this.top ? "top" : "bottom"] = "0";
        var parent = this.container || this.view.dom;
        parent.insertBefore(this.dom, this.top ? parent.firstChild : null);
      }
      var curDOM = this.dom.firstChild;
      var _iterator5 = _createForOfIteratorHelper(this.panels),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var panel = _step5.value;
          if (panel.dom.parentNode == this.dom) {
            while (curDOM != panel.dom) {
              curDOM = rm(curDOM);
            }
            curDOM = curDOM.nextSibling;
          } else {
            this.dom.insertBefore(panel.dom, curDOM);
          }
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      while (curDOM) {
        curDOM = rm(curDOM);
      }
    }
  }, {
    key: "scrollMargin",
    value: function scrollMargin() {
      return !this.dom || this.container ? 0 : Math.max(0, this.top ? this.dom.getBoundingClientRect().bottom - Math.max(0, this.view.scrollDOM.getBoundingClientRect().top) : Math.min(innerHeight, this.view.scrollDOM.getBoundingClientRect().bottom) - this.dom.getBoundingClientRect().top);
    }
  }, {
    key: "syncClasses",
    value: function syncClasses() {
      if (!this.container || this.classes == this.view.themeClasses) return;
      var _iterator6 = _createForOfIteratorHelper(this.classes.split(" ")),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var cls = _step6.value;
          if (cls) this.container.classList.remove(cls);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      var _iterator7 = _createForOfIteratorHelper((this.classes = this.view.themeClasses).split(" ")),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var _cls = _step7.value;
          if (_cls) this.container.classList.add(_cls);
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  }]);
  return PanelGroup;
}();
function rm(node) {
  var next = node.nextSibling;
  node.remove();
  return next;
}
var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_1__.EditorView.baseTheme({
  ".cm-panels": {
    boxSizing: "border-box",
    position: "sticky",
    left: 0,
    right: 0
  },
  "&light .cm-panels": {
    backgroundColor: "#f5f5f5",
    color: "black"
  },
  "&light .cm-panels-top": {
    borderBottom: "1px solid #ddd"
  },
  "&light .cm-panels-bottom": {
    borderTop: "1px solid #ddd"
  },
  "&dark .cm-panels": {
    backgroundColor: "#333338",
    color: "white"
  }
});
/**
Opening a panel is done by providing a constructor function for
the panel through this facet. (The panel is closed again when its
constructor is no longer provided.) Values of `null` are ignored.
*/
var showPanel = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.Facet.define({
  enables: [panelPlugin, baseTheme]
});


/***/ }),

/***/ "./node_modules/@codemirror/rangeset/dist/index.js":
/*!*********************************************************!*\
  !*** ./node_modules/@codemirror/rangeset/dist/index.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Range": () => (/* binding */ Range),
/* harmony export */   "RangeSet": () => (/* binding */ RangeSet),
/* harmony export */   "RangeSetBuilder": () => (/* binding */ RangeSetBuilder),
/* harmony export */   "RangeValue": () => (/* binding */ RangeValue)
/* harmony export */ });
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


/**
Each range is associated with a value, which must inherit from
this class.
*/
var RangeValue = /*#__PURE__*/function () {
  function RangeValue() {
    _classCallCheck(this, RangeValue);
  }
  _createClass(RangeValue, [{
    key: "eq",
    value:
    /**
    Compare this value with another value. The default
    implementation compares by identity.
    */
    function eq(other) {
      return this == other;
    }
    /**
    Create a [range](https://codemirror.net/6/docs/ref/#rangeset.Range) with this value.
    */
  }, {
    key: "range",
    value: function range(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      return new Range(from, to, this);
    }
  }]);
  return RangeValue;
}();
RangeValue.prototype.startSide = RangeValue.prototype.endSide = 0;
RangeValue.prototype.point = false;
RangeValue.prototype.mapMode = _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.MapMode.TrackDel;
/**
A range associates a value with a range of positions.
*/
var Range = /*#__PURE__*/_createClass(
/**
@internal
*/
function Range(
/**
The range's start position.
*/
from,
/**
Its end position.
*/
to,
/**
The value associated with this range.
*/
value) {
  _classCallCheck(this, Range);
  this.from = from;
  this.to = to;
  this.value = value;
});
function cmpRange(a, b) {
  return a.from - b.from || a.value.startSide - b.value.startSide;
}
var Chunk = /*#__PURE__*/function () {
  function Chunk(from, to, value,
  // Chunks are marked with the largest point that occurs
  // in them (or -1 for no points), so that scans that are
  // only interested in points (such as the
  // heightmap-related logic) can skip range-only chunks.
  maxPoint) {
    _classCallCheck(this, Chunk);
    this.from = from;
    this.to = to;
    this.value = value;
    this.maxPoint = maxPoint;
  }
  _createClass(Chunk, [{
    key: "length",
    get: function get() {
      return this.to[this.to.length - 1];
    }
    // Find the index of the given position and side. Use the ranges'
    // `from` pos when `end == false`, `to` when `end == true`.
  }, {
    key: "findIndex",
    value: function findIndex(pos, side, end) {
      var startAt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var arr = end ? this.to : this.from;
      for (var lo = startAt, hi = arr.length;;) {
        if (lo == hi) return lo;
        var mid = lo + hi >> 1;
        var diff = arr[mid] - pos || (end ? this.value[mid].endSide : this.value[mid].startSide) - side;
        if (mid == lo) return diff >= 0 ? lo : hi;
        if (diff >= 0) hi = mid;else lo = mid + 1;
      }
    }
  }, {
    key: "between",
    value: function between(offset, from, to, f) {
      for (var i = this.findIndex(from, -1000000000 /* Far */, true), e = this.findIndex(to, 1000000000 /* Far */, false, i); i < e; i++) {
        if (f(this.from[i] + offset, this.to[i] + offset, this.value[i]) === false) return false;
      }
    }
  }, {
    key: "map",
    value: function map(offset, changes) {
      var value = [],
        from = [],
        to = [],
        newPos = -1,
        maxPoint = -1;
      for (var i = 0; i < this.value.length; i++) {
        var val = this.value[i],
          curFrom = this.from[i] + offset,
          curTo = this.to[i] + offset,
          newFrom = void 0,
          newTo = void 0;
        if (curFrom == curTo) {
          var mapped = changes.mapPos(curFrom, val.startSide, val.mapMode);
          if (mapped == null) continue;
          newFrom = newTo = mapped;
        } else {
          newFrom = changes.mapPos(curFrom, val.startSide);
          newTo = changes.mapPos(curTo, val.endSide);
          if (newFrom > newTo || newFrom == newTo && val.startSide > 0 && val.endSide <= 0) continue;
        }
        if ((newTo - newFrom || val.endSide - val.startSide) < 0) continue;
        if (newPos < 0) newPos = newFrom;
        if (val.point) maxPoint = Math.max(maxPoint, newTo - newFrom);
        value.push(val);
        from.push(newFrom - newPos);
        to.push(newTo - newPos);
      }
      return {
        mapped: value.length ? new Chunk(from, to, value, maxPoint) : null,
        pos: newPos
      };
    }
  }]);
  return Chunk;
}(); /**
     A range set stores a collection of [ranges](https://codemirror.net/6/docs/ref/#rangeset.Range) in a
     way that makes them efficient to [map](https://codemirror.net/6/docs/ref/#rangeset.RangeSet.map) and
     [update](https://codemirror.net/6/docs/ref/#rangeset.RangeSet.update). This is an immutable data
     structure.
     */
var RangeSet = /*#__PURE__*/function () {
  /**
  @internal
  */
  function RangeSet(
  /**
  @internal
  */
  chunkPos,
  /**
  @internal
  */
  chunk) {
    var nextLayer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : RangeSet.empty;
    var
    /**
    @internal
    */
    maxPoint = arguments.length > 3 ? arguments[3] : undefined;
    _classCallCheck(this, RangeSet);
    this.chunkPos = chunkPos;
    this.chunk = chunk;
    this.nextLayer = nextLayer;
    this.maxPoint = maxPoint;
  }
  /**
  @internal
  */
  _createClass(RangeSet, [{
    key: "length",
    get: function get() {
      var last = this.chunk.length - 1;
      return last < 0 ? 0 : Math.max(this.chunkEnd(last), this.nextLayer.length);
    }
    /**
    The number of ranges in the set.
    */
  }, {
    key: "size",
    get: function get() {
      if (this.isEmpty) return 0;
      var size = this.nextLayer.size;
      var _iterator = _createForOfIteratorHelper(this.chunk),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var chunk = _step.value;
          size += chunk.value.length;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      return size;
    }
    /**
    @internal
    */
  }, {
    key: "chunkEnd",
    value: function chunkEnd(index) {
      return this.chunkPos[index] + this.chunk[index].length;
    }
    /**
    Update the range set, optionally adding new ranges or filtering
    out existing ones.
    
    (The extra type parameter is just there as a kludge to work
    around TypeScript variance issues that prevented `RangeSet<X>`
    from being a subtype of `RangeSet<Y>` when `X` is a subtype of
    `Y`.)
    */
  }, {
    key: "update",
    value: function update(updateSpec) {
      var _updateSpec$add = updateSpec.add,
        add = _updateSpec$add === void 0 ? [] : _updateSpec$add,
        _updateSpec$sort = updateSpec.sort,
        sort = _updateSpec$sort === void 0 ? false : _updateSpec$sort,
        _updateSpec$filterFro = updateSpec.filterFrom,
        filterFrom = _updateSpec$filterFro === void 0 ? 0 : _updateSpec$filterFro,
        _updateSpec$filterTo = updateSpec.filterTo,
        filterTo = _updateSpec$filterTo === void 0 ? this.length : _updateSpec$filterTo;
      var filter = updateSpec.filter;
      if (add.length == 0 && !filter) return this;
      if (sort) add.slice().sort(cmpRange);
      if (this.isEmpty) return add.length ? RangeSet.of(add) : this;
      var cur = new LayerCursor(this, null, -1)["goto"](0),
        i = 0,
        spill = [];
      var builder = new RangeSetBuilder();
      while (cur.value || i < add.length) {
        if (i < add.length && (cur.from - add[i].from || cur.startSide - add[i].value.startSide) >= 0) {
          var range = add[i++];
          if (!builder.addInner(range.from, range.to, range.value)) spill.push(range);
        } else if (cur.rangeIndex == 1 && cur.chunkIndex < this.chunk.length && (i == add.length || this.chunkEnd(cur.chunkIndex) < add[i].from) && (!filter || filterFrom > this.chunkEnd(cur.chunkIndex) || filterTo < this.chunkPos[cur.chunkIndex]) && builder.addChunk(this.chunkPos[cur.chunkIndex], this.chunk[cur.chunkIndex])) {
          cur.nextChunk();
        } else {
          if (!filter || filterFrom > cur.to || filterTo < cur.from || filter(cur.from, cur.to, cur.value)) {
            if (!builder.addInner(cur.from, cur.to, cur.value)) spill.push(new Range(cur.from, cur.to, cur.value));
          }
          cur.next();
        }
      }
      return builder.finishInner(this.nextLayer.isEmpty && !spill.length ? RangeSet.empty : this.nextLayer.update({
        add: spill,
        filter: filter,
        filterFrom: filterFrom,
        filterTo: filterTo
      }));
    }
    /**
    Map this range set through a set of changes, return the new set.
    */
  }, {
    key: "map",
    value: function map(changes) {
      if (changes.length == 0 || this.isEmpty) return this;
      var chunks = [],
        chunkPos = [],
        maxPoint = -1;
      for (var i = 0; i < this.chunk.length; i++) {
        var start = this.chunkPos[i],
          chunk = this.chunk[i];
        var touch = changes.touchesRange(start, start + chunk.length);
        if (touch === false) {
          maxPoint = Math.max(maxPoint, chunk.maxPoint);
          chunks.push(chunk);
          chunkPos.push(changes.mapPos(start));
        } else if (touch === true) {
          var _chunk$map = chunk.map(start, changes),
            mapped = _chunk$map.mapped,
            pos = _chunk$map.pos;
          if (mapped) {
            maxPoint = Math.max(maxPoint, mapped.maxPoint);
            chunks.push(mapped);
            chunkPos.push(pos);
          }
        }
      }
      var next = this.nextLayer.map(changes);
      return chunks.length == 0 ? next : new RangeSet(chunkPos, chunks, next, maxPoint);
    }
    /**
    Iterate over the ranges that touch the region `from` to `to`,
    calling `f` for each. There is no guarantee that the ranges will
    be reported in any specific order. When the callback returns
    `false`, iteration stops.
    */
  }, {
    key: "between",
    value: function between(from, to, f) {
      if (this.isEmpty) return;
      for (var i = 0; i < this.chunk.length; i++) {
        var start = this.chunkPos[i],
          chunk = this.chunk[i];
        if (to >= start && from <= start + chunk.length && chunk.between(start, from - start, to - start, f) === false) return;
      }
      this.nextLayer.between(from, to, f);
    }
    /**
    Iterate over the ranges in this set, in order, including all
    ranges that end at or after `from`.
    */
  }, {
    key: "iter",
    value: function iter() {
      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      return HeapCursor.from([this])["goto"](from);
    }
    /**
    @internal
    */
  }, {
    key: "isEmpty",
    get: function get() {
      return this.nextLayer == this;
    }
    /**
    Iterate over the ranges in a collection of sets, in order,
    starting from `from`.
    */
  }], [{
    key: "iter",
    value: function iter(sets) {
      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return HeapCursor.from(sets)["goto"](from);
    }
    /**
    Iterate over two groups of sets, calling methods on `comparator`
    to notify it of possible differences.
    */
  }, {
    key: "compare",
    value: function compare(oldSets, newSets,
    /**
    This indicates how the underlying data changed between these
    ranges, and is needed to synchronize the iteration. `from` and
    `to` are coordinates in the _new_ space, after these changes.
    */
    textDiff, comparator) {
      var minPointSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
      var a = oldSets.filter(function (set) {
        return set.maxPoint >= 500 /* BigPointSize */ || !set.isEmpty && newSets.indexOf(set) < 0 && set.maxPoint >= minPointSize;
      });
      var b = newSets.filter(function (set) {
        return set.maxPoint >= 500 /* BigPointSize */ || !set.isEmpty && oldSets.indexOf(set) < 0 && set.maxPoint >= minPointSize;
      });
      var sharedChunks = findSharedChunks(a, b);
      var sideA = new SpanCursor(a, sharedChunks, minPointSize);
      var sideB = new SpanCursor(b, sharedChunks, minPointSize);
      textDiff.iterGaps(function (fromA, fromB, length) {
        return _compare(sideA, fromA, sideB, fromB, length, comparator);
      });
      if (textDiff.empty && textDiff.length == 0) _compare(sideA, 0, sideB, 0, 0, comparator);
    }
    /**
    Compare the contents of two groups of range sets, returning true
    if they are equivalent in the given range.
    */
  }, {
    key: "eq",
    value: function eq(oldSets, newSets) {
      var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var to = arguments.length > 3 ? arguments[3] : undefined;
      if (to == null) to = 1000000000 /* Far */;
      var a = oldSets.filter(function (set) {
        return !set.isEmpty && newSets.indexOf(set) < 0;
      });
      var b = newSets.filter(function (set) {
        return !set.isEmpty && oldSets.indexOf(set) < 0;
      });
      if (a.length != b.length) return false;
      if (!a.length) return true;
      var sharedChunks = findSharedChunks(a, b);
      var sideA = new SpanCursor(a, sharedChunks, 0)["goto"](from),
        sideB = new SpanCursor(b, sharedChunks, 0)["goto"](from);
      for (;;) {
        if (sideA.to != sideB.to || !sameValues(sideA.active, sideB.active) || sideA.point && (!sideB.point || !sideA.point.eq(sideB.point))) return false;
        if (sideA.to >= to) return true;
        sideA.next();
        sideB.next();
      }
    }
    /**
    Iterate over a group of range sets at the same time, notifying
    the iterator about the ranges covering every given piece of
    content. Returns the open count (see
    [`SpanIterator.span`](https://codemirror.net/6/docs/ref/#rangeset.SpanIterator.span)) at the end
    of the iteration.
    */
  }, {
    key: "spans",
    value: function spans(sets, from, to, iterator) {
      var minPointSize = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : -1;
      var cursor = new SpanCursor(sets, null, minPointSize)["goto"](from),
        pos = from;
      var open = cursor.openStart;
      for (;;) {
        var curTo = Math.min(cursor.to, to);
        if (cursor.point) {
          iterator.point(pos, curTo, cursor.point, cursor.activeForPoint(cursor.to), open);
          open = cursor.openEnd(curTo) + (cursor.to > curTo ? 1 : 0);
        } else if (curTo > pos) {
          iterator.span(pos, curTo, cursor.active, open);
          open = cursor.openEnd(curTo);
        }
        if (cursor.to > to) break;
        pos = cursor.to;
        cursor.next();
      }
      return open;
    }
    /**
    Create a range set for the given range or array of ranges. By
    default, this expects the ranges to be _sorted_ (by start
    position and, if two start at the same position,
    `value.startSide`). You can pass `true` as second argument to
    cause the method to sort them.
    */
  }, {
    key: "of",
    value: function of(ranges) {
      var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var build = new RangeSetBuilder();
      var _iterator2 = _createForOfIteratorHelper(ranges instanceof Range ? [ranges] : sort ? lazySort(ranges) : ranges),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var range = _step2.value;
          build.add(range.from, range.to, range.value);
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return build.finish();
    }
  }]);
  return RangeSet;
}(); /**
     The empty set of ranges.
     */
RangeSet.empty = /*@__PURE__*/new RangeSet([], [], null, -1);
function lazySort(ranges) {
  if (ranges.length > 1) for (var prev = ranges[0], i = 1; i < ranges.length; i++) {
    var cur = ranges[i];
    if (cmpRange(prev, cur) > 0) return ranges.slice().sort(cmpRange);
    prev = cur;
  }
  return ranges;
}
RangeSet.empty.nextLayer = RangeSet.empty;
/**
A range set builder is a data structure that helps build up a
[range set](https://codemirror.net/6/docs/ref/#rangeset.RangeSet) directly, without first allocating
an array of [`Range`](https://codemirror.net/6/docs/ref/#rangeset.Range) objects.
*/
var RangeSetBuilder = /*#__PURE__*/function () {
  /**
  Create an empty builder.
  */
  function RangeSetBuilder() {
    _classCallCheck(this, RangeSetBuilder);
    this.chunks = [];
    this.chunkPos = [];
    this.chunkStart = -1;
    this.last = null;
    this.lastFrom = -1000000000 /* Far */;
    this.lastTo = -1000000000 /* Far */;
    this.from = [];
    this.to = [];
    this.value = [];
    this.maxPoint = -1;
    this.setMaxPoint = -1;
    this.nextLayer = null;
  }
  _createClass(RangeSetBuilder, [{
    key: "finishChunk",
    value: function finishChunk(newArrays) {
      this.chunks.push(new Chunk(this.from, this.to, this.value, this.maxPoint));
      this.chunkPos.push(this.chunkStart);
      this.chunkStart = -1;
      this.setMaxPoint = Math.max(this.setMaxPoint, this.maxPoint);
      this.maxPoint = -1;
      if (newArrays) {
        this.from = [];
        this.to = [];
        this.value = [];
      }
    }
    /**
    Add a range. Ranges should be added in sorted (by `from` and
    `value.startSide`) order.
    */
  }, {
    key: "add",
    value: function add(from, to, value) {
      if (!this.addInner(from, to, value)) (this.nextLayer || (this.nextLayer = new RangeSetBuilder())).add(from, to, value);
    }
    /**
    @internal
    */
  }, {
    key: "addInner",
    value: function addInner(from, to, value) {
      var diff = from - this.lastTo || value.startSide - this.last.endSide;
      if (diff <= 0 && (from - this.lastFrom || value.startSide - this.last.startSide) < 0) throw new Error("Ranges must be added sorted by `from` position and `startSide`");
      if (diff < 0) return false;
      if (this.from.length == 250 /* ChunkSize */) this.finishChunk(true);
      if (this.chunkStart < 0) this.chunkStart = from;
      this.from.push(from - this.chunkStart);
      this.to.push(to - this.chunkStart);
      this.last = value;
      this.lastFrom = from;
      this.lastTo = to;
      this.value.push(value);
      if (value.point) this.maxPoint = Math.max(this.maxPoint, to - from);
      return true;
    }
    /**
    @internal
    */
  }, {
    key: "addChunk",
    value: function addChunk(from, chunk) {
      if ((from - this.lastTo || chunk.value[0].startSide - this.last.endSide) < 0) return false;
      if (this.from.length) this.finishChunk(true);
      this.setMaxPoint = Math.max(this.setMaxPoint, chunk.maxPoint);
      this.chunks.push(chunk);
      this.chunkPos.push(from);
      var last = chunk.value.length - 1;
      this.last = chunk.value[last];
      this.lastFrom = chunk.from[last] + from;
      this.lastTo = chunk.to[last] + from;
      return true;
    }
    /**
    Finish the range set. Returns the new set. The builder can't be
    used anymore after this has been called.
    */
  }, {
    key: "finish",
    value: function finish() {
      return this.finishInner(RangeSet.empty);
    }
    /**
    @internal
    */
  }, {
    key: "finishInner",
    value: function finishInner(next) {
      if (this.from.length) this.finishChunk(false);
      if (this.chunks.length == 0) return next;
      var result = new RangeSet(this.chunkPos, this.chunks, this.nextLayer ? this.nextLayer.finishInner(next) : next, this.setMaxPoint);
      this.from = null; // Make sure further `add` calls produce errors
      return result;
    }
  }]);
  return RangeSetBuilder;
}();
function findSharedChunks(a, b) {
  var inA = new Map();
  var _iterator3 = _createForOfIteratorHelper(a),
    _step3;
  try {
    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
      var set = _step3.value;
      for (var i = 0; i < set.chunk.length; i++) {
        if (set.chunk[i].maxPoint < 500 /* BigPointSize */) inA.set(set.chunk[i], set.chunkPos[i]);
      }
    }
  } catch (err) {
    _iterator3.e(err);
  } finally {
    _iterator3.f();
  }
  var shared = new Set();
  var _iterator4 = _createForOfIteratorHelper(b),
    _step4;
  try {
    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
      var _set = _step4.value;
      for (var _i = 0; _i < _set.chunk.length; _i++) {
        if (inA.get(_set.chunk[_i]) == _set.chunkPos[_i]) shared.add(_set.chunk[_i]);
      }
    }
  } catch (err) {
    _iterator4.e(err);
  } finally {
    _iterator4.f();
  }
  return shared;
}
var LayerCursor = /*#__PURE__*/function () {
  function LayerCursor(layer, skip, minPoint) {
    var rank = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    _classCallCheck(this, LayerCursor);
    this.layer = layer;
    this.skip = skip;
    this.minPoint = minPoint;
    this.rank = rank;
  }
  _createClass(LayerCursor, [{
    key: "startSide",
    get: function get() {
      return this.value ? this.value.startSide : 0;
    }
  }, {
    key: "endSide",
    get: function get() {
      return this.value ? this.value.endSide : 0;
    }
  }, {
    key: "goto",
    value: function goto(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
      this.chunkIndex = this.rangeIndex = 0;
      this.gotoInner(pos, side, false);
      return this;
    }
  }, {
    key: "gotoInner",
    value: function gotoInner(pos, side, forward) {
      while (this.chunkIndex < this.layer.chunk.length) {
        var next = this.layer.chunk[this.chunkIndex];
        if (!(this.skip && this.skip.has(next) || this.layer.chunkEnd(this.chunkIndex) < pos || next.maxPoint < this.minPoint)) break;
        this.chunkIndex++;
        forward = false;
      }
      var rangeIndex = this.chunkIndex == this.layer.chunk.length ? 0 : this.layer.chunk[this.chunkIndex].findIndex(pos - this.layer.chunkPos[this.chunkIndex], side, true);
      if (!forward || this.rangeIndex < rangeIndex) this.rangeIndex = rangeIndex;
      this.next();
    }
  }, {
    key: "forward",
    value: function forward(pos, side) {
      if ((this.to - pos || this.endSide - side) < 0) this.gotoInner(pos, side, true);
    }
  }, {
    key: "next",
    value: function next() {
      for (;;) {
        if (this.chunkIndex == this.layer.chunk.length) {
          this.from = this.to = 1000000000 /* Far */;
          this.value = null;
          break;
        } else {
          var chunkPos = this.layer.chunkPos[this.chunkIndex],
            chunk = this.layer.chunk[this.chunkIndex];
          var from = chunkPos + chunk.from[this.rangeIndex];
          this.from = from;
          this.to = chunkPos + chunk.to[this.rangeIndex];
          this.value = chunk.value[this.rangeIndex];
          if (++this.rangeIndex == chunk.value.length) {
            this.chunkIndex++;
            if (this.skip) {
              while (this.chunkIndex < this.layer.chunk.length && this.skip.has(this.layer.chunk[this.chunkIndex])) {
                this.chunkIndex++;
              }
            }
            this.rangeIndex = 0;
          }
          if (this.minPoint < 0 || this.value.point && this.to - this.from >= this.minPoint) break;
        }
      }
    }
  }, {
    key: "nextChunk",
    value: function nextChunk() {
      this.chunkIndex++;
      this.rangeIndex = 0;
      this.next();
    }
  }, {
    key: "compare",
    value: function compare(other) {
      return this.from - other.from || this.startSide - other.startSide || this.to - other.to || this.endSide - other.endSide;
    }
  }]);
  return LayerCursor;
}();
var HeapCursor = /*#__PURE__*/function () {
  function HeapCursor(heap) {
    _classCallCheck(this, HeapCursor);
    this.heap = heap;
  }
  _createClass(HeapCursor, [{
    key: "startSide",
    get: function get() {
      return this.value ? this.value.startSide : 0;
    }
  }, {
    key: "goto",
    value: function goto(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
      var _iterator5 = _createForOfIteratorHelper(this.heap),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var cur = _step5.value;
          cur["goto"](pos, side);
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      for (var i = this.heap.length >> 1; i >= 0; i--) {
        heapBubble(this.heap, i);
      }
      this.next();
      return this;
    }
  }, {
    key: "forward",
    value: function forward(pos, side) {
      var _iterator6 = _createForOfIteratorHelper(this.heap),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var cur = _step6.value;
          cur.forward(pos, side);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      for (var i = this.heap.length >> 1; i >= 0; i--) {
        heapBubble(this.heap, i);
      }
      if ((this.to - pos || this.value.endSide - side) < 0) this.next();
    }
  }, {
    key: "next",
    value: function next() {
      if (this.heap.length == 0) {
        this.from = this.to = 1000000000 /* Far */;
        this.value = null;
        this.rank = -1;
      } else {
        var top = this.heap[0];
        this.from = top.from;
        this.to = top.to;
        this.value = top.value;
        this.rank = top.rank;
        if (top.value) top.next();
        heapBubble(this.heap, 0);
      }
    }
  }], [{
    key: "from",
    value: function from(sets) {
      var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var minPoint = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;
      var heap = [];
      for (var i = 0; i < sets.length; i++) {
        for (var cur = sets[i]; !cur.isEmpty; cur = cur.nextLayer) {
          if (cur.maxPoint >= minPoint) heap.push(new LayerCursor(cur, skip, minPoint, i));
        }
      }
      return heap.length == 1 ? heap[0] : new HeapCursor(heap);
    }
  }]);
  return HeapCursor;
}();
function heapBubble(heap, index) {
  for (var cur = heap[index];;) {
    var childIndex = (index << 1) + 1;
    if (childIndex >= heap.length) break;
    var child = heap[childIndex];
    if (childIndex + 1 < heap.length && child.compare(heap[childIndex + 1]) >= 0) {
      child = heap[childIndex + 1];
      childIndex++;
    }
    if (cur.compare(child) < 0) break;
    heap[childIndex] = cur;
    heap[index] = child;
    index = childIndex;
  }
}
var SpanCursor = /*#__PURE__*/function () {
  function SpanCursor(sets, skip, minPoint) {
    _classCallCheck(this, SpanCursor);
    this.minPoint = minPoint;
    this.active = [];
    this.activeTo = [];
    this.activeRank = [];
    this.minActive = -1;
    // A currently active point range, if any
    this.point = null;
    this.pointFrom = 0;
    this.pointRank = 0;
    this.to = -1000000000 /* Far */;
    this.endSide = 0;
    this.openStart = -1;
    this.cursor = HeapCursor.from(sets, skip, minPoint);
  }
  _createClass(SpanCursor, [{
    key: "goto",
    value: function goto(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1000000000;
      this.cursor["goto"](pos, side);
      this.active.length = this.activeTo.length = this.activeRank.length = 0;
      this.minActive = -1;
      this.to = pos;
      this.endSide = side;
      this.openStart = -1;
      this.next();
      return this;
    }
  }, {
    key: "forward",
    value: function forward(pos, side) {
      while (this.minActive > -1 && (this.activeTo[this.minActive] - pos || this.active[this.minActive].endSide - side) < 0) {
        this.removeActive(this.minActive);
      }
      this.cursor.forward(pos, side);
    }
  }, {
    key: "removeActive",
    value: function removeActive(index) {
      remove(this.active, index);
      remove(this.activeTo, index);
      remove(this.activeRank, index);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
  }, {
    key: "addActive",
    value: function addActive(trackOpen) {
      var i = 0,
        _this$cursor = this.cursor,
        value = _this$cursor.value,
        to = _this$cursor.to,
        rank = _this$cursor.rank;
      while (i < this.activeRank.length && this.activeRank[i] <= rank) {
        i++;
      }
      insert(this.active, i, value);
      insert(this.activeTo, i, to);
      insert(this.activeRank, i, rank);
      if (trackOpen) insert(trackOpen, i, this.cursor.from);
      this.minActive = findMinIndex(this.active, this.activeTo);
    }
    // After calling this, if `this.point` != null, the next range is a
    // point. Otherwise, it's a regular range, covered by `this.active`.
  }, {
    key: "next",
    value: function next() {
      var from = this.to,
        wasPoint = this.point;
      this.point = null;
      var trackOpen = this.openStart < 0 ? [] : null,
        trackExtra = 0;
      for (;;) {
        var a = this.minActive;
        if (a > -1 && (this.activeTo[a] - this.cursor.from || this.active[a].endSide - this.cursor.startSide) < 0) {
          if (this.activeTo[a] > from) {
            this.to = this.activeTo[a];
            this.endSide = this.active[a].endSide;
            break;
          }
          this.removeActive(a);
          if (trackOpen) remove(trackOpen, a);
        } else if (!this.cursor.value) {
          this.to = this.endSide = 1000000000 /* Far */;
          break;
        } else if (this.cursor.from > from) {
          this.to = this.cursor.from;
          this.endSide = this.cursor.startSide;
          break;
        } else {
          var nextVal = this.cursor.value;
          if (!nextVal.point) {
            // Opening a range
            this.addActive(trackOpen);
            this.cursor.next();
          } else if (wasPoint && this.cursor.to == this.to && this.cursor.from < this.cursor.to && nextVal.endSide == this.endSide) {
            // Ignore any non-empty points that end precisely at the end of the prev point
            this.cursor.next();
          } else {
            // New point
            this.point = nextVal;
            this.pointFrom = this.cursor.from;
            this.pointRank = this.cursor.rank;
            this.to = this.cursor.to;
            this.endSide = nextVal.endSide;
            if (this.cursor.from < from) trackExtra = 1;
            this.cursor.next();
            if (this.to > from) this.forward(this.to, this.endSide);
            break;
          }
        }
      }
      if (trackOpen) {
        var openStart = 0;
        while (openStart < trackOpen.length && trackOpen[openStart] < from) {
          openStart++;
        }
        this.openStart = openStart + trackExtra;
      }
    }
  }, {
    key: "activeForPoint",
    value: function activeForPoint(to) {
      if (!this.active.length) return this.active;
      var active = [];
      for (var i = this.active.length - 1; i >= 0; i--) {
        if (this.activeRank[i] < this.pointRank) break;
        if (this.activeTo[i] > to || this.activeTo[i] == to && this.active[i].endSide >= this.point.endSide) active.push(this.active[i]);
      }
      return active.reverse();
    }
  }, {
    key: "openEnd",
    value: function openEnd(to) {
      var open = 0;
      for (var i = this.activeTo.length - 1; i >= 0 && this.activeTo[i] > to; i--) {
        open++;
      }
      return open;
    }
  }]);
  return SpanCursor;
}();
function _compare(a, startA, b, startB, length, comparator) {
  a["goto"](startA);
  b["goto"](startB);
  var endB = startB + length;
  var pos = startB,
    dPos = startB - startA;
  for (;;) {
    var diff = a.to + dPos - b.to || a.endSide - b.endSide;
    var end = diff < 0 ? a.to + dPos : b.to,
      clipEnd = Math.min(end, endB);
    if (a.point || b.point) {
      if (!(a.point && b.point && (a.point == b.point || a.point.eq(b.point)) && sameValues(a.activeForPoint(a.to + dPos), b.activeForPoint(b.to)))) comparator.comparePoint(pos, clipEnd, a.point, b.point);
    } else {
      if (clipEnd > pos && !sameValues(a.active, b.active)) comparator.compareRange(pos, clipEnd, a.active, b.active);
    }
    if (end > endB) break;
    pos = end;
    if (diff <= 0) a.next();
    if (diff >= 0) b.next();
  }
}
function sameValues(a, b) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    if (a[i] != b[i] && !a[i].eq(b[i])) return false;
  }
  return true;
}
function remove(array, index) {
  for (var i = index, e = array.length - 1; i < e; i++) {
    array[i] = array[i + 1];
  }
  array.pop();
}
function insert(array, index, value) {
  for (var i = array.length - 1; i >= index; i--) {
    array[i + 1] = array[i];
  }
  array[index] = value;
}
function findMinIndex(value, array) {
  var found = -1,
    foundPos = 1000000000 /* Far */;
  for (var i = 0; i < array.length; i++) {
    if ((array[i] - foundPos || value[i].endSide - value[found].endSide) < 0) {
      found = i;
      foundPos = array[i];
    }
  }
  return found;
}


/***/ }),

/***/ "./node_modules/@codemirror/rectangular-selection/dist/index.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@codemirror/rectangular-selection/dist/index.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "rectangularSelection": () => (/* binding */ rectangularSelection)
/* harmony export */ });
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var _codemirror_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/text */ "./node_modules/@codemirror/text/dist/index.js");




// Don't compute precise column positions for line offsets above this
// (since it could get expensive). Assume offset==column for them.
var MaxOff = 2000;
function rectangleFor(state, a, b) {
  var startLine = Math.min(a.line, b.line),
    endLine = Math.max(a.line, b.line);
  var ranges = [];
  if (a.off > MaxOff || b.off > MaxOff || a.col < 0 || b.col < 0) {
    var startOff = Math.min(a.off, b.off),
      endOff = Math.max(a.off, b.off);
    for (var i = startLine; i <= endLine; i++) {
      var line = state.doc.line(i);
      if (line.length <= endOff) ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(line.from + startOff, line.to + endOff));
    }
  } else {
    var startCol = Math.min(a.col, b.col),
      endCol = Math.max(a.col, b.col);
    for (var _i = startLine; _i <= endLine; _i++) {
      var _line = state.doc.line(_i);
      var start = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.findColumn)(_line.text, startCol, state.tabSize),
        end = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.findColumn)(_line.text, endCol, state.tabSize);
      if (start < end) ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.range(_line.from + start, _line.from + end));
    }
  }
  return ranges;
}
function absoluteColumn(view, x) {
  var ref = view.coordsAtPos(view.viewport.from);
  return ref ? Math.round(Math.abs((ref.left - x) / view.defaultCharacterWidth)) : -1;
}
function getPos(view, event) {
  var offset = view.posAtCoords({
    x: event.clientX,
    y: event.clientY
  }, false);
  var line = view.state.doc.lineAt(offset),
    off = offset - line.from;
  var col = off > MaxOff ? -1 : off == line.length ? absoluteColumn(view, event.clientX) : (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.countColumn)(line.text.slice(0, offset - line.from), 0, view.state.tabSize);
  return {
    line: line.number,
    col: col,
    off: off
  };
}
function rectangleSelectionStyle(view, event) {
  var start = getPos(view, event),
    startSel = view.state.selection;
  if (!start) return null;
  return {
    update: function update(_update) {
      if (_update.docChanged) {
        var newStart = _update.changes.mapPos(_update.startState.doc.line(start.line).from);
        var newLine = _update.state.doc.lineAt(newStart);
        start = {
          line: newLine.number,
          col: start.col,
          off: Math.min(start.off, newLine.length)
        };
        startSel = startSel.map(_update.changes);
      }
    },
    get: function get(event, _extend, multiple) {
      var cur = getPos(view, event);
      if (!cur) return startSel;
      var ranges = rectangleFor(view.state, start, cur);
      if (!ranges.length) return startSel;
      if (multiple) return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.create(ranges.concat(startSel.ranges));else return _codemirror_state__WEBPACK_IMPORTED_MODULE_0__.EditorSelection.create(ranges);
    }
  };
}
/**
Create an extension that enables rectangular selections. By
default, it will react to left mouse drag with the Alt key held
down. When such a selection occurs, the text within the rectangle
that was dragged over will be selected, as one selection
[range](https://codemirror.net/6/docs/ref/#state.SelectionRange) per line.
*/
function rectangularSelection(options) {
  var filter = (options === null || options === void 0 ? void 0 : options.eventFilter) || function (e) {
    return e.altKey && e.button == 0;
  };
  return _codemirror_view__WEBPACK_IMPORTED_MODULE_2__.EditorView.mouseSelectionStyle.of(function (view, event) {
    return filter(event) ? rectangleSelectionStyle(view, event) : null;
  });
}


/***/ }),

/***/ "./node_modules/@codemirror/search/dist/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@codemirror/search/dist/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RegExpCursor": () => (/* binding */ RegExpCursor),
/* harmony export */   "SearchCursor": () => (/* binding */ SearchCursor),
/* harmony export */   "closeSearchPanel": () => (/* binding */ closeSearchPanel),
/* harmony export */   "findNext": () => (/* binding */ findNext),
/* harmony export */   "findPrevious": () => (/* binding */ findPrevious),
/* harmony export */   "gotoLine": () => (/* binding */ gotoLine),
/* harmony export */   "highlightSelectionMatches": () => (/* binding */ highlightSelectionMatches),
/* harmony export */   "openSearchPanel": () => (/* binding */ openSearchPanel),
/* harmony export */   "replaceAll": () => (/* binding */ replaceAll),
/* harmony export */   "replaceNext": () => (/* binding */ replaceNext),
/* harmony export */   "searchConfig": () => (/* binding */ searchConfig),
/* harmony export */   "searchKeymap": () => (/* binding */ searchKeymap),
/* harmony export */   "selectMatches": () => (/* binding */ selectMatches),
/* harmony export */   "selectNextOccurrence": () => (/* binding */ selectNextOccurrence),
/* harmony export */   "selectSelectionMatches": () => (/* binding */ selectSelectionMatches)
/* harmony export */ });
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_panel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/panel */ "./node_modules/@codemirror/panel/dist/index.js");
/* harmony import */ var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @codemirror/rangeset */ "./node_modules/@codemirror/rangeset/dist/index.js");
/* harmony import */ var crelt__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crelt */ "./node_modules/crelt/index.es.js");
/* harmony import */ var _codemirror_text__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/text */ "./node_modules/@codemirror/text/dist/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }






var basicNormalize = typeof String.prototype.normalize == "function" ? function (x) {
  return x.normalize("NFKD");
} : function (x) {
  return x;
};
/**
A search cursor provides an iterator over text matches in a
document.
*/
var SearchCursor = /*#__PURE__*/function () {
  /**
  Create a text cursor. The query is the search string, `from` to
  `to` provides the region to search.
  
  When `normalize` is given, it will be called, on both the query
  string and the content it is matched against, before comparing.
  You can, for example, create a case-insensitive search by
  passing `s => s.toLowerCase()`.
  
  Text is always normalized with
  [`.normalize("NFKD")`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)
  (when supported).
  */
  function SearchCursor(text, query) {
    var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : text.length;
    var normalize = arguments.length > 4 ? arguments[4] : undefined;
    _classCallCheck(this, SearchCursor);
    /**
    The current match (only holds a meaningful value after
    [`next`](https://codemirror.net/6/docs/ref/#search.SearchCursor.next) has been called and when
    `done` is false).
    */
    this.value = {
      from: 0,
      to: 0
    };
    /**
    Whether the end of the iterated region has been reached.
    */
    this.done = false;
    this.matches = [];
    this.buffer = "";
    this.bufferPos = 0;
    this.iter = text.iterRange(from, to);
    this.bufferStart = from;
    this.normalize = normalize ? function (x) {
      return normalize(basicNormalize(x));
    } : basicNormalize;
    this.query = this.normalize(query);
  }
  _createClass(SearchCursor, [{
    key: "peek",
    value: function peek() {
      if (this.bufferPos == this.buffer.length) {
        this.bufferStart += this.buffer.length;
        this.iter.next();
        if (this.iter.done) return -1;
        this.bufferPos = 0;
        this.buffer = this.iter.value;
      }
      return (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointAt)(this.buffer, this.bufferPos);
    }
    /**
    Look for the next match. Updates the iterator's
    [`value`](https://codemirror.net/6/docs/ref/#search.SearchCursor.value) and
    [`done`](https://codemirror.net/6/docs/ref/#search.SearchCursor.done) properties. Should be called
    at least once before using the cursor.
    */
  }, {
    key: "next",
    value: function next() {
      while (this.matches.length) {
        this.matches.pop();
      }
      return this.nextOverlapping();
    }
    /**
    The `next` method will ignore matches that partially overlap a
    previous match. This method behaves like `next`, but includes
    such matches.
    */
  }, {
    key: "nextOverlapping",
    value: function nextOverlapping() {
      for (;;) {
        var next = this.peek();
        if (next < 0) {
          this.done = true;
          return this;
        }
        var str = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.fromCodePoint)(next),
          start = this.bufferStart + this.bufferPos;
        this.bufferPos += (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_1__.codePointSize)(next);
        var norm = this.normalize(str);
        for (var i = 0, pos = start;; i++) {
          var code = norm.charCodeAt(i);
          var match = this.match(code, pos);
          if (match) {
            this.value = match;
            return this;
          }
          if (i == norm.length - 1) break;
          if (pos == start && i < str.length && str.charCodeAt(i) == code) pos++;
        }
      }
    }
  }, {
    key: "match",
    value: function match(code, pos) {
      var match = null;
      for (var i = 0; i < this.matches.length; i += 2) {
        var index = this.matches[i],
          keep = false;
        if (this.query.charCodeAt(index) == code) {
          if (index == this.query.length - 1) {
            match = {
              from: this.matches[i + 1],
              to: pos + 1
            };
          } else {
            this.matches[i]++;
            keep = true;
          }
        }
        if (!keep) {
          this.matches.splice(i, 2);
          i -= 2;
        }
      }
      if (this.query.charCodeAt(0) == code) {
        if (this.query.length == 1) match = {
          from: pos,
          to: pos + 1
        };else this.matches.push(1, pos);
      }
      return match;
    }
  }]);
  return SearchCursor;
}();
var empty = {
  from: -1,
  to: -1,
  match: /*@__PURE__*/ /.*/.exec("")
};
var baseFlags = "gm" + (/x/.unicode == null ? "" : "u");
/**
This class is similar to [`SearchCursor`](https://codemirror.net/6/docs/ref/#search.SearchCursor)
but searches for a regular expression pattern instead of a plain
string.
*/
var RegExpCursor = /*#__PURE__*/function () {
  /**
  Create a cursor that will search the given range in the given
  document. `query` should be the raw pattern (as you'd pass it to
  `new RegExp`).
  */
  function RegExpCursor(text, query, options) {
    var from = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    var to = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : text.length;
    _classCallCheck(this, RegExpCursor);
    this.to = to;
    this.curLine = "";
    /**
    Set to `true` when the cursor has reached the end of the search
    range.
    */
    this.done = false;
    /**
    Will contain an object with the extent of the match and the
    match object when [`next`](https://codemirror.net/6/docs/ref/#search.RegExpCursor.next)
    sucessfully finds a match.
    */
    this.value = empty;
    if (/\\[sWDnr]|\n|\r|\[\^/.test(query)) return new MultilineRegExpCursor(text, query, options, from, to);
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.iter = text.iter();
    var startLine = text.lineAt(from);
    this.curLineStart = startLine.from;
    this.matchPos = from;
    this.getLine(this.curLineStart);
  }
  _createClass(RegExpCursor, [{
    key: "getLine",
    value: function getLine(skip) {
      this.iter.next(skip);
      if (this.iter.lineBreak) {
        this.curLine = "";
      } else {
        this.curLine = this.iter.value;
        if (this.curLineStart + this.curLine.length > this.to) this.curLine = this.curLine.slice(0, this.to - this.curLineStart);
        this.iter.next();
      }
    }
  }, {
    key: "nextLine",
    value: function nextLine() {
      this.curLineStart = this.curLineStart + this.curLine.length + 1;
      if (this.curLineStart > this.to) this.curLine = "";else this.getLine(0);
    }
    /**
    Move to the next match, if there is one.
    */
  }, {
    key: "next",
    value: function next() {
      for (var off = this.matchPos - this.curLineStart;;) {
        this.re.lastIndex = off;
        var match = this.matchPos <= this.to && this.re.exec(this.curLine);
        if (match) {
          var from = this.curLineStart + match.index,
            to = from + match[0].length;
          this.matchPos = to + (from == to ? 1 : 0);
          if (from == this.curLine.length) this.nextLine();
          if (from < to || from > this.value.to) {
            this.value = {
              from: from,
              to: to,
              match: match
            };
            return this;
          }
          off = this.matchPos - this.curLineStart;
        } else if (this.curLineStart + this.curLine.length < this.to) {
          this.nextLine();
          off = 0;
        } else {
          this.done = true;
          return this;
        }
      }
    }
  }]);
  return RegExpCursor;
}();
var flattened = /*@__PURE__*/new WeakMap();
// Reusable (partially) flattened document strings
var FlattenedDoc = /*#__PURE__*/function () {
  function FlattenedDoc(from, text) {
    _classCallCheck(this, FlattenedDoc);
    this.from = from;
    this.text = text;
  }
  _createClass(FlattenedDoc, [{
    key: "to",
    get: function get() {
      return this.from + this.text.length;
    }
  }], [{
    key: "get",
    value: function get(doc, from, to) {
      var cached = flattened.get(doc);
      if (!cached || cached.from >= to || cached.to <= from) {
        var flat = new FlattenedDoc(from, doc.sliceString(from, to));
        flattened.set(doc, flat);
        return flat;
      }
      if (cached.from == from && cached.to == to) return cached;
      var text = cached.text,
        cachedFrom = cached.from;
      if (cachedFrom > from) {
        text = doc.sliceString(from, cachedFrom) + text;
        cachedFrom = from;
      }
      if (cached.to < to) text += doc.sliceString(cached.to, to);
      flattened.set(doc, new FlattenedDoc(cachedFrom, text));
      return new FlattenedDoc(from, text.slice(from - cachedFrom, to - cachedFrom));
    }
  }]);
  return FlattenedDoc;
}();
var MultilineRegExpCursor = /*#__PURE__*/function () {
  function MultilineRegExpCursor(text, query, options, from, to) {
    _classCallCheck(this, MultilineRegExpCursor);
    this.text = text;
    this.to = to;
    this.done = false;
    this.value = empty;
    this.matchPos = from;
    this.re = new RegExp(query, baseFlags + ((options === null || options === void 0 ? void 0 : options.ignoreCase) ? "i" : ""));
    this.flat = FlattenedDoc.get(text, from, this.chunkEnd(from + 5000 /* Base */));
  }
  _createClass(MultilineRegExpCursor, [{
    key: "chunkEnd",
    value: function chunkEnd(pos) {
      return pos >= this.to ? this.to : this.text.lineAt(pos).to;
    }
  }, {
    key: "next",
    value: function next() {
      for (;;) {
        var off = this.re.lastIndex = this.matchPos - this.flat.from;
        var match = this.re.exec(this.flat.text);
        // Skip empty matches directly after the last match
        if (match && !match[0] && match.index == off) {
          this.re.lastIndex = off + 1;
          match = this.re.exec(this.flat.text);
        }
        // If a match goes almost to the end of a noncomplete chunk, try
        // again, since it'll likely be able to match more
        if (match && this.flat.to < this.to && match.index + match[0].length > this.flat.text.length - 10) match = null;
        if (match) {
          var from = this.flat.from + match.index,
            to = from + match[0].length;
          this.value = {
            from: from,
            to: to,
            match: match
          };
          this.matchPos = to + (from == to ? 1 : 0);
          return this;
        } else {
          if (this.flat.to == this.to) {
            this.done = true;
            return this;
          }
          // Grow the flattened doc
          this.flat = FlattenedDoc.get(this.text, this.flat.from, this.chunkEnd(this.flat.from + this.flat.text.length * 2));
        }
      }
    }
  }]);
  return MultilineRegExpCursor;
}();
function validRegExp(source) {
  try {
    new RegExp(source, baseFlags);
    return true;
  } catch (_a) {
    return false;
  }
}
function createLineDialog(view) {
  var input = (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("input", {
    "class": "cm-textfield",
    name: "line"
  });
  var dom = (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("form", {
    "class": "cm-gotoLine",
    onkeydown: function onkeydown(event) {
      if (event.keyCode == 27) {
        // Escape
        event.preventDefault();
        view.dispatch({
          effects: dialogEffect.of(false)
        });
        view.focus();
      } else if (event.keyCode == 13) {
        // Enter
        event.preventDefault();
        go();
      }
    },
    onsubmit: function onsubmit(event) {
      event.preventDefault();
      go();
    }
  }, (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("label", view.state.phrase("Go to line"), ": ", input), " ", (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("button", {
    "class": "cm-button",
    type: "submit"
  }, view.state.phrase("go")));
  function go() {
    var match = /^([+-])?(\d+)?(:\d+)?(%)?$/.exec(input.value);
    if (!match) return;
    var state = view.state,
      startLine = state.doc.lineAt(state.selection.main.head);
    var _match = _slicedToArray(match, 5),
      sign = _match[1],
      ln = _match[2],
      cl = _match[3],
      percent = _match[4];
    var col = cl ? +cl.slice(1) : 0;
    var line = ln ? +ln : startLine.number;
    if (ln && percent) {
      var pc = line / 100;
      if (sign) pc = pc * (sign == "-" ? -1 : 1) + startLine.number / state.doc.lines;
      line = Math.round(state.doc.lines * pc);
    } else if (ln && sign) {
      line = line * (sign == "-" ? -1 : 1) + startLine.number;
    }
    var docLine = state.doc.line(Math.max(1, Math.min(state.doc.lines, line)));
    view.dispatch({
      effects: dialogEffect.of(false),
      selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(docLine.from + Math.max(0, Math.min(col, docLine.length))),
      scrollIntoView: true
    });
    view.focus();
  }
  return {
    dom: dom,
    pos: -10
  };
}
var dialogEffect = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();
var dialogField = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateField.define({
  create: function create() {
    return true;
  },
  update: function update(value, tr) {
    var _iterator = _createForOfIteratorHelper(tr.effects),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var e = _step.value;
        if (e.is(dialogEffect)) value = e.value;
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
    return value;
  },
  provide: function provide(f) {
    return _codemirror_panel__WEBPACK_IMPORTED_MODULE_3__.showPanel.from(f, function (val) {
      return val ? createLineDialog : null;
    });
  }
});
/**
Command that shows a dialog asking the user for a line number, and
when a valid position is provided, moves the cursor to that line.

Supports line numbers, relative line offsets prefixed with `+` or
`-`, document percentages suffixed with `%`, and an optional
column position by adding `:` and a second number after the line
number.

The dialog can be styled with the `panel.gotoLine` theme
selector.
*/
var gotoLine = function gotoLine(view) {
  var panel = (0,_codemirror_panel__WEBPACK_IMPORTED_MODULE_3__.getPanel)(view, createLineDialog);
  if (!panel) {
    var effects = [dialogEffect.of(true)];
    if (view.state.field(dialogField, false) == null) effects.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.appendConfig.of([dialogField, baseTheme$1]));
    view.dispatch({
      effects: effects
    });
    panel = (0,_codemirror_panel__WEBPACK_IMPORTED_MODULE_3__.getPanel)(view, createLineDialog);
  }
  if (panel) panel.dom.querySelector("input").focus();
  return true;
};
var baseTheme$1 = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.baseTheme({
  ".cm-panel.cm-gotoLine": {
    padding: "2px 6px 4px",
    "& label": {
      fontSize: "80%"
    }
  }
});
var defaultHighlightOptions = {
  highlightWordAroundCursor: false,
  minSelectionLength: 1,
  maxMatches: 100
};
var highlightConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({
  combine: function combine(options) {
    return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.combineConfig)(options, defaultHighlightOptions, {
      highlightWordAroundCursor: function highlightWordAroundCursor(a, b) {
        return a || b;
      },
      minSelectionLength: Math.min,
      maxMatches: Math.min
    });
  }
});
/**
This extension highlights text that matches the selection. It uses
the `"cm-selectionMatch"` class for the highlighting. When
`highlightWordAroundCursor` is enabled, the word at the cursor
itself will be highlighted with `"cm-selectionMatch-main"`.
*/
function highlightSelectionMatches(options) {
  var ext = [defaultTheme, matchHighlighter];
  if (options) ext.push(highlightConfig.of(options));
  return ext;
}
var matchDeco = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.mark({
  "class": "cm-selectionMatch"
});
var mainMatchDeco = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.mark({
  "class": "cm-selectionMatch cm-selectionMatch-main"
});
var matchHighlighter = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    _classCallCheck(this, _class);
    this.decorations = this.getDeco(view);
  }
  _createClass(_class, [{
    key: "update",
    value: function update(_update) {
      if (_update.selectionSet || _update.docChanged || _update.viewportChanged) this.decorations = this.getDeco(_update.view);
    }
  }, {
    key: "getDeco",
    value: function getDeco(view) {
      var conf = view.state.facet(highlightConfig);
      var state = view.state,
        sel = state.selection;
      if (sel.ranges.length > 1) return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.none;
      var range = sel.main,
        query,
        check = null;
      if (range.empty) {
        if (!conf.highlightWordAroundCursor) return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.none;
        var word = state.wordAt(range.head);
        if (!word) return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.none;
        check = state.charCategorizer(range.head);
        query = state.sliceDoc(word.from, word.to);
      } else {
        var len = range.to - range.from;
        if (len < conf.minSelectionLength || len > 200) return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.none;
        query = state.sliceDoc(range.from, range.to).trim();
        if (!query) return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.none;
      }
      var deco = [];
      var _iterator2 = _createForOfIteratorHelper(view.visibleRanges),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var part = _step2.value;
          var cursor = new SearchCursor(state.doc, query, part.from, part.to);
          while (!cursor.nextOverlapping().done) {
            var _cursor$value = cursor.value,
              from = _cursor$value.from,
              to = _cursor$value.to;
            if (!check || (from == 0 || check(state.sliceDoc(from - 1, from)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.CharCategory.Word) && (to == state.doc.length || check(state.sliceDoc(to, to + 1)) != _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.CharCategory.Word)) {
              if (check && from <= range.from && to >= range.to) deco.push(mainMatchDeco.range(from, to));else if (from >= range.to || to <= range.from) deco.push(matchDeco.range(from, to));
              if (deco.length > conf.maxMatches) return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.none;
            }
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.set(deco);
    }
  }]);
  return _class;
}(), {
  decorations: function decorations(v) {
    return v.decorations;
  }
});
var defaultTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.baseTheme({
  ".cm-selectionMatch": {
    backgroundColor: "#99ff7780"
  },
  ".cm-searchMatch .cm-selectionMatch": {
    backgroundColor: "transparent"
  }
});
// Select the words around the cursors.
var selectWord = function selectWord(_ref) {
  var state = _ref.state,
    dispatch = _ref.dispatch;
  var selection = state.selection;
  var newSel = _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create(selection.ranges.map(function (range) {
    return state.wordAt(range.head) || _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.cursor(range.head);
  }), selection.mainIndex);
  if (newSel.eq(selection)) return false;
  dispatch(state.update({
    selection: newSel
  }));
  return true;
};
// Find next occurrence of query relative to last cursor. Wrap around
// the document if there are no more matches.
function findNextOccurrence(state, query) {
  var ranges = state.selection.ranges;
  var ahead = new SearchCursor(state.doc, query, ranges[ranges.length - 1].to).next();
  if (!ahead.done) return ahead.value;
  var cursor = new SearchCursor(state.doc, query, 0, Math.max(0, ranges[ranges.length - 1].from - 1));
  while (!cursor.next().done) {
    if (!ranges.some(function (r) {
      return r.from === cursor.value.from;
    })) return cursor.value;
  }
  return null;
}
/**
Select next occurrence of the current selection.
Expand selection to the word when selection range is empty.
*/
var selectNextOccurrence = function selectNextOccurrence(_ref2) {
  var state = _ref2.state,
    dispatch = _ref2.dispatch;
  var ranges = state.selection.ranges;
  if (ranges.some(function (sel) {
    return sel.from === sel.to;
  })) return selectWord({
    state: state,
    dispatch: dispatch
  });
  var searchedText = state.sliceDoc(ranges[0].from, ranges[0].to);
  if (state.selection.ranges.some(function (r) {
    return state.sliceDoc(r.from, r.to) != searchedText;
  })) return false;
  var range = findNextOccurrence(state, searchedText);
  if (!range) return false;
  dispatch(state.update({
    selection: state.selection.addRange(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(range.from, range.to)),
    scrollIntoView: true
  }));
  return true;
};
var searchConfigFacet = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Facet.define({
  combine: function combine(configs) {
    return {
      top: configs.some(function (c) {
        return c.top;
      })
    };
  }
});
/**
Configure the behavior of the search extension.
*/
function searchConfig(config) {
  return searchConfigFacet.of(config);
}
var Query = /*#__PURE__*/function () {
  function Query(search, replace, caseInsensitive) {
    _classCallCheck(this, Query);
    this.search = search;
    this.replace = replace;
    this.caseInsensitive = caseInsensitive;
  }
  _createClass(Query, [{
    key: "eq",
    value: function eq(other) {
      return this.search == other.search && this.replace == other.replace && this.caseInsensitive == other.caseInsensitive && this.constructor == other.constructor;
    }
  }]);
  return Query;
}();
var StringQuery = /*#__PURE__*/function (_Query) {
  _inherits(StringQuery, _Query);
  var _super = _createSuper(StringQuery);
  function StringQuery(search, replace, caseInsensitive) {
    var _this;
    _classCallCheck(this, StringQuery);
    _this = _super.call(this, search, replace, caseInsensitive);
    _this.unquoted = search.replace(/\\([nrt\\])/g, function (_, ch) {
      return ch == "n" ? "\n" : ch == "r" ? "\r" : ch == "t" ? "\t" : "\\";
    });
    return _this;
  }
  _createClass(StringQuery, [{
    key: "cursor",
    value: function cursor(doc) {
      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : doc.length;
      return new SearchCursor(doc, this.unquoted, from, to, this.caseInsensitive ? function (x) {
        return x.toLowerCase();
      } : undefined);
    }
  }, {
    key: "nextMatch",
    value: function nextMatch(doc, curFrom, curTo) {
      var cursor = this.cursor(doc, curTo).nextOverlapping();
      if (cursor.done) cursor = this.cursor(doc, 0, curFrom).nextOverlapping();
      return cursor.done ? null : cursor.value;
    }
    // Searching in reverse is, rather than implementing inverted search
    // cursor, done by scanning chunk after chunk forward.
  }, {
    key: "prevMatchInRange",
    value: function prevMatchInRange(doc, from, to) {
      for (var pos = to;;) {
        var start = Math.max(from, pos - 10000 /* ChunkSize */ - this.unquoted.length);
        var cursor = this.cursor(doc, start, pos),
          range = null;
        while (!cursor.nextOverlapping().done) {
          range = cursor.value;
        }
        if (range) return range;
        if (start == from) return null;
        pos -= 10000 /* ChunkSize */;
      }
    }
  }, {
    key: "prevMatch",
    value: function prevMatch(doc, curFrom, curTo) {
      return this.prevMatchInRange(doc, 0, curFrom) || this.prevMatchInRange(doc, curTo, doc.length);
    }
  }, {
    key: "getReplacement",
    value: function getReplacement(_result) {
      return this.replace;
    }
  }, {
    key: "matchAll",
    value: function matchAll(doc, limit) {
      var cursor = this.cursor(doc),
        ranges = [];
      while (!cursor.next().done) {
        if (ranges.length >= limit) return null;
        ranges.push(cursor.value);
      }
      return ranges;
    }
  }, {
    key: "highlight",
    value: function highlight(doc, from, to, add) {
      var cursor = this.cursor(doc, Math.max(0, from - this.unquoted.length), Math.min(to + this.unquoted.length, doc.length));
      while (!cursor.next().done) {
        add(cursor.value.from, cursor.value.to);
      }
    }
  }, {
    key: "valid",
    get: function get() {
      return !!this.search;
    }
  }]);
  return StringQuery;
}(Query);
var RegExpQuery = /*#__PURE__*/function (_Query2) {
  _inherits(RegExpQuery, _Query2);
  var _super2 = _createSuper(RegExpQuery);
  function RegExpQuery(search, replace, caseInsensitive) {
    var _this2;
    _classCallCheck(this, RegExpQuery);
    _this2 = _super2.call(this, search, replace, caseInsensitive);
    _this2.valid = !!search && validRegExp(search);
    return _this2;
  }
  _createClass(RegExpQuery, [{
    key: "cursor",
    value: function cursor(doc) {
      var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : doc.length;
      return new RegExpCursor(doc, this.search, this.caseInsensitive ? {
        ignoreCase: true
      } : undefined, from, to);
    }
  }, {
    key: "nextMatch",
    value: function nextMatch(doc, curFrom, curTo) {
      var cursor = this.cursor(doc, curTo).next();
      if (cursor.done) cursor = this.cursor(doc, 0, curFrom).next();
      return cursor.done ? null : cursor.value;
    }
  }, {
    key: "prevMatchInRange",
    value: function prevMatchInRange(doc, from, to) {
      for (var size = 1;; size++) {
        var start = Math.max(from, to - size * 10000 /* ChunkSize */);
        var cursor = this.cursor(doc, start, to),
          range = null;
        while (!cursor.next().done) {
          range = cursor.value;
        }
        if (range && (start == from || range.from > start + 10)) return range;
        if (start == from) return null;
      }
    }
  }, {
    key: "prevMatch",
    value: function prevMatch(doc, curFrom, curTo) {
      return this.prevMatchInRange(doc, 0, curFrom) || this.prevMatchInRange(doc, curTo, doc.length);
    }
  }, {
    key: "getReplacement",
    value: function getReplacement(result) {
      return this.replace.replace(/\$([$&\d+])/g, function (m, i) {
        return i == "$" ? "$" : i == "&" ? result.match[0] : i != "0" && +i < result.match.length ? result.match[i] : m;
      });
    }
  }, {
    key: "matchAll",
    value: function matchAll(doc, limit) {
      var cursor = this.cursor(doc),
        ranges = [];
      while (!cursor.next().done) {
        if (ranges.length >= limit) return null;
        ranges.push(cursor.value);
      }
      return ranges;
    }
  }, {
    key: "highlight",
    value: function highlight(doc, from, to, add) {
      var cursor = this.cursor(doc, Math.max(0, from - 250 /* HighlightMargin */), Math.min(to + 250 /* HighlightMargin */, doc.length));
      while (!cursor.next().done) {
        add(cursor.value.from, cursor.value.to);
      }
    }
  }]);
  return RegExpQuery;
}(Query);
var setQuery = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();
var togglePanel = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.define();
var searchState = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateField.define({
  create: function create(state) {
    return new SearchState(defaultQuery(state), createSearchPanel);
  },
  update: function update(value, tr) {
    var _iterator3 = _createForOfIteratorHelper(tr.effects),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var effect = _step3.value;
        if (effect.is(setQuery)) value = new SearchState(effect.value, value.panel);else if (effect.is(togglePanel)) value = new SearchState(value.query, effect.value ? createSearchPanel : null);
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return value;
  },
  provide: function provide(f) {
    return _codemirror_panel__WEBPACK_IMPORTED_MODULE_3__.showPanel.from(f, function (val) {
      return val.panel;
    });
  }
});
var SearchState = /*#__PURE__*/_createClass(function SearchState(query, panel) {
  _classCallCheck(this, SearchState);
  this.query = query;
  this.panel = panel;
});
var matchMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.mark({
    "class": "cm-searchMatch"
  }),
  selectedMatchMark = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.mark({
    "class": "cm-searchMatch cm-searchMatch-selected"
  });
var searchHighlighter = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class2(view) {
    _classCallCheck(this, _class2);
    this.view = view;
    this.decorations = this.highlight(view.state.field(searchState));
  }
  _createClass(_class2, [{
    key: "update",
    value: function update(_update2) {
      var state = _update2.state.field(searchState);
      if (state != _update2.startState.field(searchState) || _update2.docChanged || _update2.selectionSet) this.decorations = this.highlight(state);
    }
  }, {
    key: "highlight",
    value: function highlight(_ref3) {
      var query = _ref3.query,
        panel = _ref3.panel;
      if (!panel || !query.valid) return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.Decoration.none;
      var view = this.view;
      var builder = new _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_5__.RangeSetBuilder();
      for (var i = 0, ranges = view.visibleRanges, l = ranges.length; i < l; i++) {
        var _ranges$i = ranges[i],
          from = _ranges$i.from,
          to = _ranges$i.to;
        while (i < l - 1 && to > ranges[i + 1].from - 2 * 250 /* HighlightMargin */) {
          to = ranges[++i].to;
        }
        query.highlight(view.state.doc, from, to, function (from, to) {
          var selected = view.state.selection.ranges.some(function (r) {
            return r.from == from && r.to == to;
          });
          builder.add(from, to, selected ? selectedMatchMark : matchMark);
        });
      }
      return builder.finish();
    }
  }]);
  return _class2;
}(), {
  decorations: function decorations(v) {
    return v.decorations;
  }
});
function searchCommand(f) {
  return function (view) {
    var state = view.state.field(searchState, false);
    return state && state.query.valid ? f(view, state) : openSearchPanel(view);
  };
}
/**
Open the search panel if it isn't already open, and move the
selection to the first match after the current main selection.
Will wrap around to the start of the document when it reaches the
end.
*/
var findNext = /*@__PURE__*/searchCommand(function (view, _ref4) {
  var query = _ref4.query;
  var _view$state$selection = view.state.selection.main,
    from = _view$state$selection.from,
    to = _view$state$selection.to;
  var next = query.nextMatch(view.state.doc, from, to);
  if (!next || next.from == from && next.to == to) return false;
  view.dispatch({
    selection: {
      anchor: next.from,
      head: next.to
    },
    scrollIntoView: true,
    effects: announceMatch(view, next)
  });
  return true;
});
/**
Move the selection to the previous instance of the search query,
before the current main selection. Will wrap past the start
of the document to start searching at the end again.
*/
var findPrevious = /*@__PURE__*/searchCommand(function (view, _ref5) {
  var query = _ref5.query;
  var state = view.state,
    _state$selection$main = state.selection.main,
    from = _state$selection$main.from,
    to = _state$selection$main.to;
  var range = query.prevMatch(state.doc, from, to);
  if (!range) return false;
  view.dispatch({
    selection: {
      anchor: range.from,
      head: range.to
    },
    scrollIntoView: true,
    effects: announceMatch(view, range)
  });
  return true;
});
/**
Select all instances of the search query.
*/
var selectMatches = /*@__PURE__*/searchCommand(function (view, _ref6) {
  var query = _ref6.query;
  var ranges = query.matchAll(view.state.doc, 1000);
  if (!ranges || !ranges.length) return false;
  view.dispatch({
    selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create(ranges.map(function (r) {
      return _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(r.from, r.to);
    }))
  });
  return true;
});
/**
Select all instances of the currently selected text.
*/
var selectSelectionMatches = function selectSelectionMatches(_ref7) {
  var state = _ref7.state,
    dispatch = _ref7.dispatch;
  var sel = state.selection;
  if (sel.ranges.length > 1 || sel.main.empty) return false;
  var _sel$main = sel.main,
    from = _sel$main.from,
    to = _sel$main.to;
  var ranges = [],
    main = 0;
  for (var cur = new SearchCursor(state.doc, state.sliceDoc(from, to)); !cur.next().done;) {
    if (ranges.length > 1000) return false;
    if (cur.value.from == from) main = ranges.length;
    ranges.push(_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.range(cur.value.from, cur.value.to));
  }
  dispatch(state.update({
    selection: _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.EditorSelection.create(ranges, main)
  }));
  return true;
};
/**
Replace the current match of the search query.
*/
var replaceNext = /*@__PURE__*/searchCommand(function (view, _ref8) {
  var query = _ref8.query;
  var state = view.state,
    _state$selection$main2 = state.selection.main,
    from = _state$selection$main2.from,
    to = _state$selection$main2.to;
  var next = query.nextMatch(state.doc, from, from);
  if (!next) return false;
  var changes = [],
    selection,
    replacement;
  if (next.from == from && next.to == to) {
    replacement = state.toText(query.getReplacement(next));
    changes.push({
      from: next.from,
      to: next.to,
      insert: replacement
    });
    next = query.nextMatch(state.doc, next.from, next.to);
  }
  if (next) {
    var off = changes.length == 0 || changes[0].from >= next.to ? 0 : next.to - next.from - replacement.length;
    selection = {
      anchor: next.from - off,
      head: next.to - off
    };
  }
  view.dispatch({
    changes: changes,
    selection: selection,
    scrollIntoView: !!selection,
    effects: next ? announceMatch(view, next) : undefined
  });
  return true;
});
/**
Replace all instances of the search query with the given
replacement.
*/
var replaceAll = /*@__PURE__*/searchCommand(function (view, _ref9) {
  var query = _ref9.query;
  var changes = query.matchAll(view.state.doc, 1e9).map(function (match) {
    var from = match.from,
      to = match.to;
    return {
      from: from,
      to: to,
      insert: query.getReplacement(match)
    };
  });
  if (!changes.length) return false;
  view.dispatch({
    changes: changes
  });
  return true;
});
function createSearchPanel(view) {
  var _view$state$field = view.state.field(searchState),
    query = _view$state$field.query;
  return {
    dom: buildPanel({
      view: view,
      query: query,
      updateQuery: function updateQuery(q) {
        if (!query.eq(q)) {
          query = q;
          view.dispatch({
            effects: setQuery.of(query)
          });
        }
      }
    }),
    mount: function mount() {
      this.dom.querySelector("[name=search]").select();
    },
    pos: 80,
    top: view.state.facet(searchConfigFacet).top
  };
}
function defaultQuery(state, fallback) {
  var sel = state.selection.main;
  var selText = sel.empty || sel.to > sel.from + 100 ? "" : state.sliceDoc(sel.from, sel.to);
  return fallback && !selText ? fallback : new StringQuery(selText.replace(/\n/g, "\\n"), "", (fallback === null || fallback === void 0 ? void 0 : fallback.caseInsensitive) || false);
}
/**
Make sure the search panel is open and focused.
*/
var openSearchPanel = function openSearchPanel(view) {
  var state = view.state.field(searchState, false);
  if (state && state.panel) {
    var panel = (0,_codemirror_panel__WEBPACK_IMPORTED_MODULE_3__.getPanel)(view, createSearchPanel);
    if (!panel) return false;
    panel.dom.querySelector("[name=search]").focus();
  } else {
    view.dispatch({
      effects: [togglePanel.of(true), state ? setQuery.of(defaultQuery(view.state, state.query)) : _codemirror_state__WEBPACK_IMPORTED_MODULE_2__.StateEffect.appendConfig.of(searchExtensions)]
    });
  }
  return true;
};
/**
Close the search panel.
*/
var closeSearchPanel = function closeSearchPanel(view) {
  var state = view.state.field(searchState, false);
  if (!state || !state.panel) return false;
  var panel = (0,_codemirror_panel__WEBPACK_IMPORTED_MODULE_3__.getPanel)(view, createSearchPanel);
  if (panel && panel.dom.contains(view.root.activeElement)) view.focus();
  view.dispatch({
    effects: togglePanel.of(false)
  });
  return true;
};
/**
Default search-related key bindings.

 - Mod-f: [`openSearchPanel`](https://codemirror.net/6/docs/ref/#search.openSearchPanel)
 - F3, Mod-g: [`findNext`](https://codemirror.net/6/docs/ref/#search.findNext)
 - Shift-F3, Shift-Mod-g: [`findPrevious`](https://codemirror.net/6/docs/ref/#search.findPrevious)
 - Alt-g: [`gotoLine`](https://codemirror.net/6/docs/ref/#search.gotoLine)
 - Mod-d: [`selectNextOccurrence`](https://codemirror.net/6/docs/ref/#search.selectNextOccurrence)
*/
var searchKeymap = [{
  key: "Mod-f",
  run: openSearchPanel,
  scope: "editor search-panel"
}, {
  key: "F3",
  run: findNext,
  shift: findPrevious,
  scope: "editor search-panel"
}, {
  key: "Mod-g",
  run: findNext,
  shift: findPrevious,
  scope: "editor search-panel"
}, {
  key: "Escape",
  run: closeSearchPanel,
  scope: "editor search-panel"
}, {
  key: "Mod-Shift-l",
  run: selectSelectionMatches
}, {
  key: "Alt-g",
  run: gotoLine
}, {
  key: "Mod-d",
  run: selectNextOccurrence
}];
function buildPanel(conf) {
  function phrase(phrase) {
    return conf.view.state.phrase(phrase);
  }
  var searchField = (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("input", {
    value: conf.query.search,
    placeholder: phrase("Find"),
    "aria-label": phrase("Find"),
    "class": "cm-textfield",
    name: "search",
    onchange: update,
    onkeyup: update
  });
  var replaceField = (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("input", {
    value: conf.query.replace,
    placeholder: phrase("Replace"),
    "aria-label": phrase("Replace"),
    "class": "cm-textfield",
    name: "replace",
    onchange: update,
    onkeyup: update
  });
  var caseField = (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("input", {
    type: "checkbox",
    name: "case",
    checked: !conf.query.caseInsensitive,
    onchange: update
  });
  var reField = (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("input", {
    type: "checkbox",
    name: "re",
    checked: conf.query instanceof RegExpQuery,
    onchange: update
  });
  function update() {
    conf.updateQuery(new (reField.checked ? RegExpQuery : StringQuery)(searchField.value, replaceField.value, !caseField.checked));
  }
  function keydown(e) {
    if ((0,_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.runScopeHandlers)(conf.view, e, "search-panel")) {
      e.preventDefault();
    } else if (e.keyCode == 13 && e.target == searchField) {
      e.preventDefault();
      (e.shiftKey ? findPrevious : findNext)(conf.view);
    } else if (e.keyCode == 13 && e.target == replaceField) {
      e.preventDefault();
      replaceNext(conf.view);
    }
  }
  function button(name, onclick, content) {
    return (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("button", {
      "class": "cm-button",
      name: name,
      onclick: onclick
    }, content);
  }
  var panel = (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("div", {
    onkeydown: keydown,
    "class": "cm-search"
  }, [searchField, button("next", function () {
    return findNext(conf.view);
  }, [phrase("next")]), button("prev", function () {
    return findPrevious(conf.view);
  }, [phrase("previous")]), button("select", function () {
    return selectMatches(conf.view);
  }, [phrase("all")]), (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("label", null, [caseField, phrase("match case")]), (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("label", null, [reField, phrase("regexp")]), (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("br"), replaceField, button("replace", function () {
    return replaceNext(conf.view);
  }, [phrase("replace")]), button("replaceAll", function () {
    return replaceAll(conf.view);
  }, [phrase("replace all")]), (0,crelt__WEBPACK_IMPORTED_MODULE_0__["default"])("button", {
    name: "close",
    onclick: function onclick() {
      return closeSearchPanel(conf.view);
    },
    "aria-label": phrase("close")
  }, ["×"])]);
  return panel;
}
var AnnounceMargin = 30;
var Break = /[\s\.,:;?!]/;
function announceMatch(view, _ref10) {
  var from = _ref10.from,
    to = _ref10.to;
  var lineStart = view.state.doc.lineAt(from).from,
    lineEnd = view.state.doc.lineAt(to).to;
  var start = Math.max(lineStart, from - AnnounceMargin),
    end = Math.min(lineEnd, to + AnnounceMargin);
  var text = view.state.sliceDoc(start, end);
  if (start != lineStart) {
    for (var i = 0; i < AnnounceMargin; i++) {
      if (!Break.test(text[i + 1]) && Break.test(text[i])) {
        text = text.slice(i);
        break;
      }
    }
  }
  if (end != lineEnd) {
    for (var _i2 = text.length - 1; _i2 > text.length - AnnounceMargin; _i2--) {
      if (!Break.test(text[_i2 - 1]) && Break.test(text[_i2])) {
        text = text.slice(0, _i2);
        break;
      }
    }
  }
  return _codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.announce.of("".concat(view.state.phrase("current match"), ". ").concat(text, " ").concat(view.state.phrase("on line"), " ").concat(view.state.doc.lineAt(from).number));
}
var baseTheme = /*@__PURE__*/_codemirror_view__WEBPACK_IMPORTED_MODULE_4__.EditorView.baseTheme({
  ".cm-panel.cm-search": {
    padding: "2px 6px 4px",
    position: "relative",
    "& [name=close]": {
      position: "absolute",
      top: "0",
      right: "4px",
      backgroundColor: "inherit",
      border: "none",
      font: "inherit",
      padding: 0,
      margin: 0
    },
    "& input, & button, & label": {
      margin: ".2em .6em .2em 0"
    },
    "& input[type=checkbox]": {
      marginRight: ".2em"
    },
    "& label": {
      fontSize: "80%",
      whiteSpace: "pre"
    }
  },
  "&light .cm-searchMatch": {
    backgroundColor: "#ffff0054"
  },
  "&dark .cm-searchMatch": {
    backgroundColor: "#00ffff8a"
  },
  "&light .cm-searchMatch-selected": {
    backgroundColor: "#ff6a0054"
  },
  "&dark .cm-searchMatch-selected": {
    backgroundColor: "#ff00ff8a"
  }
});
var searchExtensions = [searchState, /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_2__.Prec.override(searchHighlighter), baseTheme];


/***/ }),

/***/ "./node_modules/@codemirror/state/dist/index.js":
/*!******************************************************!*\
  !*** ./node_modules/@codemirror/state/dist/index.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Annotation": () => (/* binding */ Annotation),
/* harmony export */   "AnnotationType": () => (/* binding */ AnnotationType),
/* harmony export */   "ChangeDesc": () => (/* binding */ ChangeDesc),
/* harmony export */   "ChangeSet": () => (/* binding */ ChangeSet),
/* harmony export */   "CharCategory": () => (/* binding */ CharCategory),
/* harmony export */   "Compartment": () => (/* binding */ Compartment),
/* harmony export */   "EditorSelection": () => (/* binding */ EditorSelection),
/* harmony export */   "EditorState": () => (/* binding */ EditorState),
/* harmony export */   "Facet": () => (/* binding */ Facet),
/* harmony export */   "MapMode": () => (/* binding */ MapMode),
/* harmony export */   "Prec": () => (/* binding */ Prec),
/* harmony export */   "SelectionRange": () => (/* binding */ SelectionRange),
/* harmony export */   "StateEffect": () => (/* binding */ StateEffect),
/* harmony export */   "StateEffectType": () => (/* binding */ StateEffectType),
/* harmony export */   "StateField": () => (/* binding */ StateField),
/* harmony export */   "Text": () => (/* reexport safe */ _codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text),
/* harmony export */   "Transaction": () => (/* binding */ Transaction),
/* harmony export */   "combineConfig": () => (/* binding */ combineConfig)
/* harmony export */ });
/* harmony import */ var _codemirror_text__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/text */ "./node_modules/@codemirror/text/dist/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


var DefaultSplit = /\r\n?|\n/;
/**
Distinguishes different ways in which positions can be mapped.
*/
var MapMode = /*@__PURE__*/function (MapMode) {
  /**
  Map a position to a valid new position, even when its context
  was deleted.
  */
  MapMode[MapMode["Simple"] = 0] = "Simple";
  /**
  Return null if deletion happens across the position.
  */
  MapMode[MapMode["TrackDel"] = 1] = "TrackDel";
  /**
  Return null if the character _before_ the position is deleted.
  */
  MapMode[MapMode["TrackBefore"] = 2] = "TrackBefore";
  /**
  Return null if the character _after_ the position is deleted.
  */
  MapMode[MapMode["TrackAfter"] = 3] = "TrackAfter";
  return MapMode;
}(MapMode || (MapMode = {}));
/**
A change description is a variant of [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet)
that doesn't store the inserted text. As such, it can't be
applied, but is cheaper to store and manipulate.
*/
var ChangeDesc = /*#__PURE__*/function () {
  // Sections are encoded as pairs of integers. The first is the
  // length in the current document, and the second is -1 for
  // unaffected sections, and the length of the replacement content
  // otherwise. So an insertion would be (0, n>0), a deletion (n>0,
  // 0), and a replacement two positive numbers.
  /**
  @internal
  */
  function ChangeDesc(
  /**
  @internal
  */
  sections) {
    _classCallCheck(this, ChangeDesc);
    this.sections = sections;
  }
  /**
  The length of the document before the change.
  */
  _createClass(ChangeDesc, [{
    key: "length",
    get: function get() {
      var result = 0;
      for (var i = 0; i < this.sections.length; i += 2) {
        result += this.sections[i];
      }
      return result;
    }
    /**
    The length of the document after the change.
    */
  }, {
    key: "newLength",
    get: function get() {
      var result = 0;
      for (var i = 0; i < this.sections.length; i += 2) {
        var ins = this.sections[i + 1];
        result += ins < 0 ? this.sections[i] : ins;
      }
      return result;
    }
    /**
    False when there are actual changes in this set.
    */
  }, {
    key: "empty",
    get: function get() {
      return this.sections.length == 0 || this.sections.length == 2 && this.sections[1] < 0;
    }
    /**
    Iterate over the unchanged parts left by these changes.
    */
  }, {
    key: "iterGaps",
    value: function iterGaps(f) {
      for (var i = 0, posA = 0, posB = 0; i < this.sections.length;) {
        var len = this.sections[i++],
          ins = this.sections[i++];
        if (ins < 0) {
          f(posA, posB, len);
          posB += len;
        } else {
          posB += ins;
        }
        posA += len;
      }
    }
    /**
    Iterate over the ranges changed by these changes. (See
    [`ChangeSet.iterChanges`](https://codemirror.net/6/docs/ref/#state.ChangeSet.iterChanges) for a
    variant that also provides you with the inserted text.)
    
    When `individual` is true, adjacent changes (which are kept
    separate for [position mapping](https://codemirror.net/6/docs/ref/#state.ChangeDesc.mapPos)) are
    reported separately.
    */
  }, {
    key: "iterChangedRanges",
    value: function iterChangedRanges(f) {
      var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      _iterChanges(this, f, individual);
    }
    /**
    Get a description of the inverted form of these changes.
    */
  }, {
    key: "invertedDesc",
    get: function get() {
      var sections = [];
      for (var i = 0; i < this.sections.length;) {
        var len = this.sections[i++],
          ins = this.sections[i++];
        if (ins < 0) sections.push(len, ins);else sections.push(ins, len);
      }
      return new ChangeDesc(sections);
    }
    /**
    Compute the combined effect of applying another set of changes
    after this one. The length of the document after this set should
    match the length before `other`.
    */
  }, {
    key: "composeDesc",
    value: function composeDesc(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other);
    }
    /**
    Map this description, which should start with the same document
    as `other`, over another set of changes, so that it can be
    applied after it. When `before` is true, map as if the changes
    in `other` happened before the ones in `this`.
    */
  }, {
    key: "mapDesc",
    value: function mapDesc(other) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return other.empty ? this : mapSet(this, other, before);
    }
  }, {
    key: "mapPos",
    value: function mapPos(pos) {
      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var mode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MapMode.Simple;
      var posA = 0,
        posB = 0;
      for (var i = 0; i < this.sections.length;) {
        var len = this.sections[i++],
          ins = this.sections[i++],
          endA = posA + len;
        if (ins < 0) {
          if (endA > pos) return posB + (pos - posA);
          posB += len;
        } else {
          if (mode != MapMode.Simple && endA >= pos && (mode == MapMode.TrackDel && posA < pos && endA > pos || mode == MapMode.TrackBefore && posA < pos || mode == MapMode.TrackAfter && endA > pos)) return null;
          if (endA > pos || endA == pos && assoc < 0 && !len) return pos == posA || assoc < 0 ? posB : posB + ins;
          posB += ins;
        }
        posA = endA;
      }
      if (pos > posA) throw new RangeError("Position ".concat(pos, " is out of range for changeset of length ").concat(posA));
      return posB;
    }
    /**
    Check whether these changes touch a given range. When one of the
    changes entirely covers the range, the string `"cover"` is
    returned.
    */
  }, {
    key: "touchesRange",
    value: function touchesRange(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      for (var i = 0, pos = 0; i < this.sections.length && pos <= to;) {
        var len = this.sections[i++],
          ins = this.sections[i++],
          end = pos + len;
        if (ins >= 0 && pos <= to && end >= from) return pos < from && end > to ? "cover" : true;
        pos = end;
      }
      return false;
    }
    /**
    @internal
    */
  }, {
    key: "toString",
    value: function toString() {
      var result = "";
      for (var i = 0; i < this.sections.length;) {
        var len = this.sections[i++],
          ins = this.sections[i++];
        result += (result ? " " : "") + len + (ins >= 0 ? ":" + ins : "");
      }
      return result;
    }
    /**
    Serialize this change desc to a JSON-representable value.
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      return this.sections;
    }
    /**
    Create a change desc from its JSON representation (as produced
    by [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeDesc.toJSON).
    */
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!Array.isArray(json) || json.length % 2 || json.some(function (a) {
        return typeof a != "number";
      })) throw new RangeError("Invalid JSON representation of ChangeDesc");
      return new ChangeDesc(json);
    }
  }]);
  return ChangeDesc;
}(); /**
     A change set represents a group of modifications to a document. It
     stores the document length, and can only be applied to documents
     with exactly that length.
     */
var ChangeSet = /*#__PURE__*/function (_ChangeDesc) {
  _inherits(ChangeSet, _ChangeDesc);
  var _super = _createSuper(ChangeSet);
  /**
  @internal
  */
  function ChangeSet(sections,
  /**
  @internal
  */
  inserted) {
    var _this;
    _classCallCheck(this, ChangeSet);
    _this = _super.call(this, sections);
    _this.inserted = inserted;
    return _this;
  }
  /**
  Apply the changes to a document, returning the modified
  document.
  */
  _createClass(ChangeSet, [{
    key: "apply",
    value: function apply(doc) {
      if (this.length != doc.length) throw new RangeError("Applying change set to a document with the wrong length");
      _iterChanges(this, function (fromA, toA, fromB, _toB, text) {
        return doc = doc.replace(fromB, fromB + (toA - fromA), text);
      }, false);
      return doc;
    }
  }, {
    key: "mapDesc",
    value: function mapDesc(other) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return mapSet(this, other, before, true);
    }
    /**
    Given the document as it existed _before_ the changes, return a
    change set that represents the inverse of this set, which could
    be used to go from the document created by the changes back to
    the document as it existed before the changes.
    */
  }, {
    key: "invert",
    value: function invert(doc) {
      var sections = this.sections.slice(),
        inserted = [];
      for (var i = 0, pos = 0; i < sections.length; i += 2) {
        var len = sections[i],
          ins = sections[i + 1];
        if (ins >= 0) {
          sections[i] = ins;
          sections[i + 1] = len;
          var index = i >> 1;
          while (inserted.length < index) {
            inserted.push(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text.empty);
          }
          inserted.push(len ? doc.slice(pos, pos + len) : _codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text.empty);
        }
        pos += len;
      }
      return new ChangeSet(sections, inserted);
    }
    /**
    Combine two subsequent change sets into a single set. `other`
    must start in the document produced by `this`. If `this` goes
    `docA` → `docB` and `other` represents `docB` → `docC`, the
    returned value will represent the change `docA` → `docC`.
    */
  }, {
    key: "compose",
    value: function compose(other) {
      return this.empty ? other : other.empty ? this : composeSets(this, other, true);
    }
    /**
    Given another change set starting in the same document, maps this
    change set over the other, producing a new change set that can be
    applied to the document produced by applying `other`. When
    `before` is `true`, order changes as if `this` comes before
    `other`, otherwise (the default) treat `other` as coming first.
    
    Given two changes `A` and `B`, `A.compose(B.map(A))` and
    `B.compose(A.map(B, true))` will produce the same document. This
    provides a basic form of [operational
    transformation](https://en.wikipedia.org/wiki/Operational_transformation),
    and can be used for collaborative editing.
    */
  }, {
    key: "map",
    value: function map(other) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return other.empty ? this : mapSet(this, other, before, true);
    }
    /**
    Iterate over the changed ranges in the document, calling `f` for
    each.
    
    When `individual` is true, adjacent changes are reported
    separately.
    */
  }, {
    key: "iterChanges",
    value: function iterChanges(f) {
      var individual = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      _iterChanges(this, f, individual);
    }
    /**
    Get a [change description](https://codemirror.net/6/docs/ref/#state.ChangeDesc) for this change
    set.
    */
  }, {
    key: "desc",
    get: function get() {
      return new ChangeDesc(this.sections);
    }
    /**
    @internal
    */
  }, {
    key: "filter",
    value: function filter(ranges) {
      var resultSections = [],
        resultInserted = [],
        filteredSections = [];
      var iter = new SectionIter(this);
      done: for (var i = 0, pos = 0;;) {
        var next = i == ranges.length ? 1e9 : ranges[i++];
        while (pos < next || pos == next && iter.len == 0) {
          if (iter.done) break done;
          var len = Math.min(iter.len, next - pos);
          addSection(filteredSections, len, -1);
          var ins = iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0;
          addSection(resultSections, len, ins);
          if (ins > 0) addInsert(resultInserted, resultSections, iter.text);
          iter.forward(len);
          pos += len;
        }
        var end = ranges[i++];
        while (pos < end) {
          if (iter.done) break done;
          var _len = Math.min(iter.len, end - pos);
          addSection(resultSections, _len, -1);
          addSection(filteredSections, _len, iter.ins == -1 ? -1 : iter.off == 0 ? iter.ins : 0);
          iter.forward(_len);
          pos += _len;
        }
      }
      return {
        changes: new ChangeSet(resultSections, resultInserted),
        filtered: new ChangeDesc(filteredSections)
      };
    }
    /**
    Serialize this change set to a JSON-representable value.
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      var parts = [];
      for (var i = 0; i < this.sections.length; i += 2) {
        var len = this.sections[i],
          ins = this.sections[i + 1];
        if (ins < 0) parts.push(len);else if (ins == 0) parts.push([len]);else parts.push([len].concat(this.inserted[i >> 1].toJSON()));
      }
      return parts;
    }
    /**
    Create a change set for the given changes, for a document of the
    given length, using `lineSep` as line separator.
    */
  }], [{
    key: "of",
    value: function of(changes, length, lineSep) {
      var sections = [],
        inserted = [],
        pos = 0;
      var total = null;
      function flush() {
        var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        if (!force && !sections.length) return;
        if (pos < length) addSection(sections, length - pos, -1);
        var set = new ChangeSet(sections, inserted);
        total = total ? total.compose(set.map(total)) : set;
        sections = [];
        inserted = [];
        pos = 0;
      }
      function process(spec) {
        if (Array.isArray(spec)) {
          var _iterator = _createForOfIteratorHelper(spec),
            _step;
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var sub = _step.value;
              process(sub);
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        } else if (spec instanceof ChangeSet) {
          if (spec.length != length) throw new RangeError("Mismatched change set length (got ".concat(spec.length, ", expected ").concat(length, ")"));
          flush();
          total = total ? total.compose(spec.map(total)) : spec;
        } else {
          var from = spec.from,
            _spec$to = spec.to,
            to = _spec$to === void 0 ? from : _spec$to,
            insert = spec.insert;
          if (from > to || from < 0 || to > length) throw new RangeError("Invalid change range ".concat(from, " to ").concat(to, " (in doc of length ").concat(length, ")"));
          var insText = !insert ? _codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text.empty : typeof insert == "string" ? _codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text.of(insert.split(lineSep || DefaultSplit)) : insert;
          var insLen = insText.length;
          if (from == to && insLen == 0) return;
          if (from < pos) flush();
          if (from > pos) addSection(sections, from - pos, -1);
          addSection(sections, to - from, insLen);
          addInsert(inserted, sections, insText);
          pos = to;
        }
      }
      process(changes);
      flush(!total);
      return total;
    }
    /**
    Create an empty changeset of the given length.
    */
  }, {
    key: "empty",
    value: function empty(length) {
      return new ChangeSet(length ? [length, -1] : [], []);
    }
    /**
    Create a changeset from its JSON representation (as produced by
    [`toJSON`](https://codemirror.net/6/docs/ref/#state.ChangeSet.toJSON).
    */
  }, {
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!Array.isArray(json)) throw new RangeError("Invalid JSON representation of ChangeSet");
      var sections = [],
        inserted = [];
      for (var i = 0; i < json.length; i++) {
        var part = json[i];
        if (typeof part == "number") {
          sections.push(part, -1);
        } else if (!Array.isArray(part) || typeof part[0] != "number" || part.some(function (e, i) {
          return i && typeof e != "string";
        })) {
          throw new RangeError("Invalid JSON representation of ChangeSet");
        } else if (part.length == 1) {
          sections.push(part[0], 0);
        } else {
          while (inserted.length < i) {
            inserted.push(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text.empty);
          }
          inserted[i] = _codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text.of(part.slice(1));
          sections.push(part[0], inserted[i].length);
        }
      }
      return new ChangeSet(sections, inserted);
    }
  }]);
  return ChangeSet;
}(ChangeDesc);
function addSection(sections, len, ins) {
  var forceJoin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  if (len == 0 && ins <= 0) return;
  var last = sections.length - 2;
  if (last >= 0 && ins <= 0 && ins == sections[last + 1]) sections[last] += len;else if (len == 0 && sections[last] == 0) sections[last + 1] += ins;else if (forceJoin) {
    sections[last] += len;
    sections[last + 1] += ins;
  } else sections.push(len, ins);
}
function addInsert(values, sections, value) {
  if (value.length == 0) return;
  var index = sections.length - 2 >> 1;
  if (index < values.length) {
    values[values.length - 1] = values[values.length - 1].append(value);
  } else {
    while (values.length < index) {
      values.push(_codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text.empty);
    }
    values.push(value);
  }
}
function _iterChanges(desc, f, individual) {
  var inserted = desc.inserted;
  for (var posA = 0, posB = 0, i = 0; i < desc.sections.length;) {
    var len = desc.sections[i++],
      ins = desc.sections[i++];
    if (ins < 0) {
      posA += len;
      posB += len;
    } else {
      var endA = posA,
        endB = posB,
        text = _codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text.empty;
      for (;;) {
        endA += len;
        endB += ins;
        if (ins && inserted) text = text.append(inserted[i - 2 >> 1]);
        if (individual || i == desc.sections.length || desc.sections[i + 1] < 0) break;
        len = desc.sections[i++];
        ins = desc.sections[i++];
      }
      f(posA, endA, posB, endB, text);
      posA = endA;
      posB = endB;
    }
  }
}
function mapSet(setA, setB, before) {
  var mkSet = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
  var sections = [],
    insert = mkSet ? [] : null;
  var a = new SectionIter(setA),
    b = new SectionIter(setB);
  for (var posA = 0, posB = 0;;) {
    if (a.ins == -1) {
      posA += a.len;
      a.next();
    } else if (b.ins == -1 && posB < posA) {
      var skip = Math.min(b.len, posA - posB);
      b.forward(skip);
      addSection(sections, skip, -1);
      posB += skip;
    } else if (b.ins >= 0 && (a.done || posB < posA || posB == posA && (b.len < a.len || b.len == a.len && !before))) {
      addSection(sections, b.ins, -1);
      while (posA > posB && !a.done && posA + a.len < posB + b.len) {
        posA += a.len;
        a.next();
      }
      posB += b.len;
      b.next();
    } else if (a.ins >= 0) {
      var len = 0,
        end = posA + a.len;
      for (;;) {
        if (b.ins >= 0 && posB > posA && posB + b.len < end) {
          len += b.ins;
          posB += b.len;
          b.next();
        } else if (b.ins == -1 && posB < end) {
          var _skip = Math.min(b.len, end - posB);
          len += _skip;
          b.forward(_skip);
          posB += _skip;
        } else {
          break;
        }
      }
      addSection(sections, len, a.ins);
      if (insert) addInsert(insert, sections, a.text);
      posA = end;
      a.next();
    } else if (a.done && b.done) {
      return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
    } else {
      throw new Error("Mismatched change set lengths");
    }
  }
}
function composeSets(setA, setB) {
  var mkSet = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var sections = [];
  var insert = mkSet ? [] : null;
  var a = new SectionIter(setA),
    b = new SectionIter(setB);
  for (var open = false;;) {
    if (a.done && b.done) {
      return insert ? new ChangeSet(sections, insert) : new ChangeDesc(sections);
    } else if (a.ins == 0) {
      // Deletion in A
      addSection(sections, a.len, 0, open);
      a.next();
    } else if (b.len == 0 && !b.done) {
      // Insertion in B
      addSection(sections, 0, b.ins, open);
      if (insert) addInsert(insert, sections, b.text);
      b.next();
    } else if (a.done || b.done) {
      throw new Error("Mismatched change set lengths");
    } else {
      var len = Math.min(a.len2, b.len),
        sectionLen = sections.length;
      if (a.ins == -1) {
        var insB = b.ins == -1 ? -1 : b.off ? 0 : b.ins;
        addSection(sections, len, insB, open);
        if (insert && insB) addInsert(insert, sections, b.text);
      } else if (b.ins == -1) {
        addSection(sections, a.off ? 0 : a.len, len, open);
        if (insert) addInsert(insert, sections, a.textBit(len));
      } else {
        addSection(sections, a.off ? 0 : a.len, b.off ? 0 : b.ins, open);
        if (insert && !b.off) addInsert(insert, sections, b.text);
      }
      open = (a.ins > len || b.ins >= 0 && b.len > len) && (open || sections.length > sectionLen);
      a.forward2(len);
      b.forward(len);
    }
  }
}
var SectionIter = /*#__PURE__*/function () {
  function SectionIter(set) {
    _classCallCheck(this, SectionIter);
    this.set = set;
    this.i = 0;
    this.next();
  }
  _createClass(SectionIter, [{
    key: "next",
    value: function next() {
      var sections = this.set.sections;
      if (this.i < sections.length) {
        this.len = sections[this.i++];
        this.ins = sections[this.i++];
      } else {
        this.len = 0;
        this.ins = -2;
      }
      this.off = 0;
    }
  }, {
    key: "done",
    get: function get() {
      return this.ins == -2;
    }
  }, {
    key: "len2",
    get: function get() {
      return this.ins < 0 ? this.len : this.ins;
    }
  }, {
    key: "text",
    get: function get() {
      var inserted = this.set.inserted,
        index = this.i - 2 >> 1;
      return index >= inserted.length ? _codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text.empty : inserted[index];
    }
  }, {
    key: "textBit",
    value: function textBit(len) {
      var inserted = this.set.inserted,
        index = this.i - 2 >> 1;
      return index >= inserted.length && !len ? _codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text.empty : inserted[index].slice(this.off, len == null ? undefined : this.off + len);
    }
  }, {
    key: "forward",
    value: function forward(len) {
      if (len == this.len) this.next();else {
        this.len -= len;
        this.off += len;
      }
    }
  }, {
    key: "forward2",
    value: function forward2(len) {
      if (this.ins == -1) this.forward(len);else if (len == this.ins) this.next();else {
        this.ins -= len;
        this.off += len;
      }
    }
  }]);
  return SectionIter;
}(); /**
     A single selection range. When
     [`allowMultipleSelections`](https://codemirror.net/6/docs/ref/#state.EditorState^allowMultipleSelections)
     is enabled, a [selection](https://codemirror.net/6/docs/ref/#state.EditorSelection) may hold
     multiple ranges. By default, selections hold exactly one range.
     */
var SelectionRange = /*#__PURE__*/function () {
  /**
  @internal
  */
  function SelectionRange(
  /**
  The lower boundary of the range.
  */
  from,
  /**
  The upper boundary of the range.
  */
  to, flags) {
    _classCallCheck(this, SelectionRange);
    this.from = from;
    this.to = to;
    this.flags = flags;
  }
  /**
  The anchor of the range—the side that doesn't move when you
  extend it.
  */
  _createClass(SelectionRange, [{
    key: "anchor",
    get: function get() {
      return this.flags & 16 /* Inverted */ ? this.to : this.from;
    }
    /**
    The head of the range, which is moved when the range is
    [extended](https://codemirror.net/6/docs/ref/#state.SelectionRange.extend).
    */
  }, {
    key: "head",
    get: function get() {
      return this.flags & 16 /* Inverted */ ? this.from : this.to;
    }
    /**
    True when `anchor` and `head` are at the same position.
    */
  }, {
    key: "empty",
    get: function get() {
      return this.from == this.to;
    }
    /**
    If this is a cursor that is explicitly associated with the
    character on one of its sides, this returns the side. -1 means
    the character before its position, 1 the character after, and 0
    means no association.
    */
  }, {
    key: "assoc",
    get: function get() {
      return this.flags & 4 /* AssocBefore */ ? -1 : this.flags & 8 /* AssocAfter */ ? 1 : 0;
    }
    /**
    The bidirectional text level associated with this cursor, if
    any.
    */
  }, {
    key: "bidiLevel",
    get: function get() {
      var level = this.flags & 3 /* BidiLevelMask */;
      return level == 3 ? null : level;
    }
    /**
    The goal column (stored vertical offset) associated with a
    cursor. This is used to preserve the vertical position when
    [moving](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) across
    lines of different length.
    */
  }, {
    key: "goalColumn",
    get: function get() {
      var value = this.flags >> 5 /* GoalColumnOffset */;
      return value == 33554431 /* NoGoalColumn */ ? undefined : value;
    }
    /**
    Map this range through a change, producing a valid range in the
    updated document.
    */
  }, {
    key: "map",
    value: function map(change) {
      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      var from = change.mapPos(this.from, assoc),
        to = change.mapPos(this.to, assoc);
      return from == this.from && to == this.to ? this : new SelectionRange(from, to, this.flags);
    }
    /**
    Extend this range to cover at least `from` to `to`.
    */
  }, {
    key: "extend",
    value: function extend(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      if (from <= this.anchor && to >= this.anchor) return EditorSelection.range(from, to);
      var head = Math.abs(from - this.anchor) > Math.abs(to - this.anchor) ? from : to;
      return EditorSelection.range(this.anchor, head);
    }
    /**
    Compare this range to another range.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      return this.anchor == other.anchor && this.head == other.head;
    }
    /**
    Return a JSON-serializable object representing the range.
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        anchor: this.anchor,
        head: this.head
      };
    }
    /**
    Convert a JSON representation of a range to a `SelectionRange`
    instance.
    */
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!json || typeof json.anchor != "number" || typeof json.head != "number") throw new RangeError("Invalid JSON representation for SelectionRange");
      return EditorSelection.range(json.anchor, json.head);
    }
  }]);
  return SelectionRange;
}(); /**
     An editor selection holds one or more selection ranges.
     */
var EditorSelection = /*#__PURE__*/function () {
  /**
  @internal
  */
  function EditorSelection(
  /**
  The ranges in the selection, sorted by position. Ranges cannot
  overlap (but they may touch, if they aren't empty).
  */
  ranges) {
    var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    _classCallCheck(this, EditorSelection);
    this.ranges = ranges;
    this.mainIndex = mainIndex;
  }
  /**
  Map a selection through a change. Used to adjust the selection
  position for changes.
  */
  _createClass(EditorSelection, [{
    key: "map",
    value: function map(change) {
      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;
      if (change.empty) return this;
      return EditorSelection.create(this.ranges.map(function (r) {
        return r.map(change, assoc);
      }), this.mainIndex);
    }
    /**
    Compare this selection to another selection.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      if (this.ranges.length != other.ranges.length || this.mainIndex != other.mainIndex) return false;
      for (var i = 0; i < this.ranges.length; i++) {
        if (!this.ranges[i].eq(other.ranges[i])) return false;
      }
      return true;
    }
    /**
    Get the primary selection range. Usually, you should make sure
    your code applies to _all_ ranges, by using methods like
    [`changeByRange`](https://codemirror.net/6/docs/ref/#state.EditorState.changeByRange).
    */
  }, {
    key: "main",
    get: function get() {
      return this.ranges[this.mainIndex];
    }
    /**
    Make sure the selection only has one range. Returns a selection
    holding only the main range from this selection.
    */
  }, {
    key: "asSingle",
    value: function asSingle() {
      return this.ranges.length == 1 ? this : new EditorSelection([this.main]);
    }
    /**
    Extend this selection with an extra range.
    */
  }, {
    key: "addRange",
    value: function addRange(range) {
      var main = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      return EditorSelection.create([range].concat(this.ranges), main ? 0 : this.mainIndex + 1);
    }
    /**
    Replace a given range with another range, and then normalize the
    selection to merge and sort ranges if necessary.
    */
  }, {
    key: "replaceRange",
    value: function replaceRange(range) {
      var which = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.mainIndex;
      var ranges = this.ranges.slice();
      ranges[which] = range;
      return EditorSelection.create(ranges, this.mainIndex);
    }
    /**
    Convert this selection to an object that can be serialized to
    JSON.
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      return {
        ranges: this.ranges.map(function (r) {
          return r.toJSON();
        }),
        main: this.mainIndex
      };
    }
    /**
    Create a selection from a JSON representation.
    */
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      if (!json || !Array.isArray(json.ranges) || typeof json.main != "number" || json.main >= json.ranges.length) throw new RangeError("Invalid JSON representation for EditorSelection");
      return new EditorSelection(json.ranges.map(function (r) {
        return SelectionRange.fromJSON(r);
      }), json.main);
    }
    /**
    Create a selection holding a single range.
    */
  }, {
    key: "single",
    value: function single(anchor) {
      var head = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : anchor;
      return new EditorSelection([EditorSelection.range(anchor, head)], 0);
    }
    /**
    Sort and merge the given set of ranges, creating a valid
    selection.
    */
  }, {
    key: "create",
    value: function create(ranges) {
      var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      if (ranges.length == 0) throw new RangeError("A selection needs at least one range");
      for (var pos = 0, i = 0; i < ranges.length; i++) {
        var range = ranges[i];
        if (range.empty ? range.from <= pos : range.from < pos) return normalized(ranges.slice(), mainIndex);
        pos = range.to;
      }
      return new EditorSelection(ranges, mainIndex);
    }
    /**
    Create a cursor selection range at the given position. You can
    safely ignore the optional arguments in most situations.
    */
  }, {
    key: "cursor",
    value: function cursor(pos) {
      var assoc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var bidiLevel = arguments.length > 2 ? arguments[2] : undefined;
      var goalColumn = arguments.length > 3 ? arguments[3] : undefined;
      return new SelectionRange(pos, pos, (assoc == 0 ? 0 : assoc < 0 ? 4 /* AssocBefore */ : 8 /* AssocAfter */) | (bidiLevel == null ? 3 : Math.min(2, bidiLevel)) | (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */);
    }
    /**
    Create a selection range.
    */
  }, {
    key: "range",
    value: function range(anchor, head, goalColumn) {
      var goal = (goalColumn !== null && goalColumn !== void 0 ? goalColumn : 33554431 /* NoGoalColumn */) << 5 /* GoalColumnOffset */;
      return head < anchor ? new SelectionRange(head, anchor, 16 /* Inverted */ | goal) : new SelectionRange(anchor, head, goal);
    }
  }]);
  return EditorSelection;
}();
function normalized(ranges) {
  var mainIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var main = ranges[mainIndex];
  ranges.sort(function (a, b) {
    return a.from - b.from;
  });
  mainIndex = ranges.indexOf(main);
  for (var i = 1; i < ranges.length; i++) {
    var range = ranges[i],
      prev = ranges[i - 1];
    if (range.empty ? range.from <= prev.to : range.from < prev.to) {
      var from = prev.from,
        to = Math.max(range.to, prev.to);
      if (i <= mainIndex) mainIndex--;
      ranges.splice(--i, 2, range.anchor > range.head ? EditorSelection.range(to, from) : EditorSelection.range(from, to));
    }
  }
  return new EditorSelection(ranges, mainIndex);
}
function checkSelection(selection, docLength) {
  var _iterator2 = _createForOfIteratorHelper(selection.ranges),
    _step2;
  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var range = _step2.value;
      if (range.to > docLength) throw new RangeError("Selection points outside of document");
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }
}
var nextID = 0;
/**
A facet is a labeled value that is associated with an editor
state. It takes inputs from any number of extensions, and combines
those into a single output value.

Examples of facets are the [theme](https://codemirror.net/6/docs/ref/#view.EditorView^theme) styles
associated with an editor or the [tab
size](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) (which is reduced to a single
value, using the input with the hightest precedence).
*/
var Facet = /*#__PURE__*/function () {
  function Facet(
  /**
  @internal
  */
  combine,
  /**
  @internal
  */
  compareInput,
  /**
  @internal
  */
  compare, isStatic,
  /**
  @internal
  */
  extensions) {
    _classCallCheck(this, Facet);
    this.combine = combine;
    this.compareInput = compareInput;
    this.compare = compare;
    this.isStatic = isStatic;
    this.extensions = extensions;
    /**
    @internal
    */
    this.id = nextID++;
    this["default"] = combine([]);
  }
  /**
  Define a new facet.
  */
  _createClass(Facet, [{
    key: "of",
    value:
    /**
    Returns an extension that adds the given value for this facet.
    */
    function of(value) {
      return new FacetProvider([], this, 0 /* Static */, value);
    }
    /**
    Create an extension that computes a value for the facet from a
    state. You must take care to declare the parts of the state that
    this value depends on, since your function is only called again
    for a new state when one of those parts changed.
    
    In most cases, you'll want to use the
    [`provide`](https://codemirror.net/6/docs/ref/#state.StateField^define^config.provide) option when
    defining a field instead.
    */
  }, {
    key: "compute",
    value: function compute(deps, get) {
      if (this.isStatic) throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 1 /* Single */, get);
    }
    /**
    Create an extension that computes zero or more values for this
    facet from a state.
    */
  }, {
    key: "computeN",
    value: function computeN(deps, get) {
      if (this.isStatic) throw new Error("Can't compute a static facet");
      return new FacetProvider(deps, this, 2 /* Multi */, get);
    }
  }, {
    key: "from",
    value: function from(field, get) {
      if (!get) get = function get(x) {
        return x;
      };
      return this.compute([field], function (state) {
        return get(state.field(field));
      });
    }
  }], [{
    key: "define",
    value: function define() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return new Facet(config.combine || function (a) {
        return a;
      }, config.compareInput || function (a, b) {
        return a === b;
      }, config.compare || (!config.combine ? sameArray : function (a, b) {
        return a === b;
      }), !!config["static"], config.enables);
    }
  }]);
  return Facet;
}();
function sameArray(a, b) {
  return a == b || a.length == b.length && a.every(function (e, i) {
    return e === b[i];
  });
}
var FacetProvider = /*#__PURE__*/function () {
  function FacetProvider(dependencies, facet, type, value) {
    _classCallCheck(this, FacetProvider);
    this.dependencies = dependencies;
    this.facet = facet;
    this.type = type;
    this.value = value;
    this.id = nextID++;
  }
  _createClass(FacetProvider, [{
    key: "dynamicSlot",
    value: function dynamicSlot(addresses) {
      var _a;
      var getter = this.value;
      var compare = this.facet.compareInput;
      var idx = addresses[this.id] >> 1,
        multi = this.type == 2 /* Multi */;
      var depDoc = false,
        depSel = false,
        depAddrs = [];
      var _iterator3 = _createForOfIteratorHelper(this.dependencies),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var dep = _step3.value;
          if (dep == "doc") depDoc = true;else if (dep == "selection") depSel = true;else if ((((_a = addresses[dep.id]) !== null && _a !== void 0 ? _a : 1) & 1) == 0) depAddrs.push(addresses[dep.id]);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return function (state, tr) {
        if (!tr || tr.reconfigured) {
          state.values[idx] = getter(state);
          return 1 /* Changed */;
        } else {
          var depChanged = depDoc && tr.docChanged || depSel && (tr.docChanged || tr.selection) || depAddrs.some(function (addr) {
            return (ensureAddr(state, addr) & 1 /* Changed */) > 0;
          });
          if (!depChanged) return 0;
          var newVal = getter(state),
            oldVal = tr.startState.values[idx];
          if (multi ? compareArray(newVal, oldVal, compare) : compare(newVal, oldVal)) return 0;
          state.values[idx] = newVal;
          return 1 /* Changed */;
        }
      };
    }
  }]);
  return FacetProvider;
}();
function compareArray(a, b, compare) {
  if (a.length != b.length) return false;
  for (var i = 0; i < a.length; i++) {
    if (!compare(a[i], b[i])) return false;
  }
  return true;
}
function dynamicFacetSlot(addresses, facet, providers) {
  var providerAddrs = providers.map(function (p) {
    return addresses[p.id];
  });
  var providerTypes = providers.map(function (p) {
    return p.type;
  });
  var dynamic = providerAddrs.filter(function (p) {
    return !(p & 1);
  });
  var idx = addresses[facet.id] >> 1;
  return function (state, tr) {
    var oldAddr = !tr ? null : tr.reconfigured ? tr.startState.config.address[facet.id] : idx << 1;
    var changed = oldAddr == null;
    var _iterator4 = _createForOfIteratorHelper(dynamic),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var dynAddr = _step4.value;
        if (ensureAddr(state, dynAddr) & 1 /* Changed */) changed = true;
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
    if (!changed) return 0;
    var values = [];
    for (var i = 0; i < providerAddrs.length; i++) {
      var value = getAddr(state, providerAddrs[i]);
      if (providerTypes[i] == 2 /* Multi */) {
        var _iterator5 = _createForOfIteratorHelper(value),
          _step5;
        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var val = _step5.value;
            values.push(val);
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }
      } else values.push(value);
    }
    var newVal = facet.combine(values);
    if (oldAddr != null && facet.compare(newVal, getAddr(tr.startState, oldAddr))) return 0;
    state.values[idx] = newVal;
    return 1 /* Changed */;
  };
}

function maybeIndex(state, id) {
  var found = state.config.address[id];
  return found == null ? null : found >> 1;
}
var initField = /*@__PURE__*/Facet.define({
  "static": true
});
/**
Fields can store additional information in an editor state, and
keep it in sync with the rest of the state.
*/
var StateField = /*#__PURE__*/function () {
  function StateField(
  /**
  @internal
  */
  id, createF, updateF, compareF,
  /**
  @internal
  */
  spec) {
    _classCallCheck(this, StateField);
    this.id = id;
    this.createF = createF;
    this.updateF = updateF;
    this.compareF = compareF;
    this.spec = spec;
    /**
    @internal
    */
    this.provides = undefined;
  }
  /**
  Define a state field.
  */
  _createClass(StateField, [{
    key: "create",
    value: function create(state) {
      var _this2 = this;
      var init = state.facet(initField).find(function (i) {
        return i.field == _this2;
      });
      return ((init === null || init === void 0 ? void 0 : init.create) || this.createF)(state);
    }
    /**
    @internal
    */
  }, {
    key: "slot",
    value: function slot(addresses) {
      var _this3 = this;
      var idx = addresses[this.id] >> 1;
      return function (state, tr) {
        if (!tr || tr.reconfigured && maybeIndex(tr.startState, _this3.id) == null) {
          state.values[idx] = _this3.create(state);
          return 1 /* Changed */;
        }

        var oldVal,
          changed = 0;
        if (tr.reconfigured) {
          oldVal = tr.startState.values[maybeIndex(tr.startState, _this3.id)];
          changed = 1 /* Changed */;
        } else {
          oldVal = tr.startState.values[idx];
        }
        var value = _this3.updateF(oldVal, tr);
        if (!changed && !_this3.compareF(oldVal, value)) changed = 1 /* Changed */;
        if (changed) state.values[idx] = value;
        return changed;
      };
    }
    /**
    Returns an extension that enables this field and overrides the
    way it is initialized. Can be useful when you need to provide a
    non-default starting value for the field.
    */
  }, {
    key: "init",
    value: function init(create) {
      return [this, initField.of({
        field: this,
        create: create
      })];
    }
    /**
    State field instances can be used as
    [`Extension`](https://codemirror.net/6/docs/ref/#state.Extension) values to enable the field in a
    given state.
    */
  }, {
    key: "extension",
    get: function get() {
      return this;
    }
  }], [{
    key: "define",
    value: function define(config) {
      var field = new StateField(nextID++, config.create, config.update, config.compare || function (a, b) {
        return a === b;
      }, config);
      if (config.provide) field.provides = config.provide(field);
      return field;
    }
  }]);
  return StateField;
}();
var Prec_ = {
  fallback: 3,
  "default": 2,
  extend: 1,
  override: 0
};
function prec(value) {
  return function (ext) {
    return new PrecExtension(ext, value);
  };
}
/**
By default extensions are registered in the order they are found
in the flattened form of nested array that was provided.
Individual extension values can be assigned a precedence to
override this. Extensions that do not have a precedence set get
the precedence of the nearest parent with a precedence, or
[`default`](https://codemirror.net/6/docs/ref/#state.Prec.default) if there is no such parent. The
final ordering of extensions is determined by first sorting by
precedence and then by order within each precedence.
*/
var Prec = {
  /**
  A precedence below the default precedence, which will cause
  default-precedence extensions to override it even if they are
  specified later in the extension ordering.
  */
  fallback: /*@__PURE__*/prec(Prec_.fallback),
  /**
  The regular default precedence.
  */
  "default": /*@__PURE__*/prec(Prec_["default"]),
  /**
  A higher-than-default precedence.
  */
  extend: /*@__PURE__*/prec(Prec_.extend),
  /**
  Precedence above the `default` and `extend` precedences.
  */
  override: /*@__PURE__*/prec(Prec_.override)
};
var PrecExtension = /*#__PURE__*/_createClass(function PrecExtension(inner, prec) {
  _classCallCheck(this, PrecExtension);
  this.inner = inner;
  this.prec = prec;
}); /**
    Extension compartments can be used to make a configuration
    dynamic. By [wrapping](https://codemirror.net/6/docs/ref/#state.Compartment.of) part of your
    configuration in a compartment, you can later
    [replace](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure) that part through a
    transaction.
    */
var Compartment = /*#__PURE__*/function () {
  function Compartment() {
    _classCallCheck(this, Compartment);
  }
  _createClass(Compartment, [{
    key: "of",
    value:
    /**
    Create an instance of this compartment to add to your [state
    configuration](https://codemirror.net/6/docs/ref/#state.EditorStateConfig.extensions).
    */
    function of(ext) {
      return new CompartmentInstance(this, ext);
    }
    /**
    Create an [effect](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) that
    reconfigures this compartment.
    */
  }, {
    key: "reconfigure",
    value: function reconfigure(content) {
      return Compartment.reconfigure.of({
        compartment: this,
        extension: content
      });
    }
    /**
    Get the current content of the compartment in the state, or
    `undefined` if it isn't present.
    */
  }, {
    key: "get",
    value: function get(state) {
      return state.config.compartments.get(this);
    }
  }]);
  return Compartment;
}();
var CompartmentInstance = /*#__PURE__*/_createClass(function CompartmentInstance(compartment, inner) {
  _classCallCheck(this, CompartmentInstance);
  this.compartment = compartment;
  this.inner = inner;
});
var Configuration = /*#__PURE__*/function () {
  function Configuration(base, compartments, dynamicSlots, address, staticValues) {
    _classCallCheck(this, Configuration);
    this.base = base;
    this.compartments = compartments;
    this.dynamicSlots = dynamicSlots;
    this.address = address;
    this.staticValues = staticValues;
    this.statusTemplate = [];
    while (this.statusTemplate.length < dynamicSlots.length) {
      this.statusTemplate.push(0 /* Uninitialized */);
    }
  }
  _createClass(Configuration, [{
    key: "staticFacet",
    value: function staticFacet(facet) {
      var addr = this.address[facet.id];
      return addr == null ? facet["default"] : this.staticValues[addr >> 1];
    }
  }], [{
    key: "resolve",
    value: function resolve(base, compartments, oldState) {
      var fields = [];
      var facets = Object.create(null);
      var newCompartments = new Map();
      var _iterator6 = _createForOfIteratorHelper(flatten(base, compartments, newCompartments)),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var ext = _step6.value;
          if (ext instanceof StateField) fields.push(ext);else (facets[ext.facet.id] || (facets[ext.facet.id] = [])).push(ext);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      var address = Object.create(null);
      var staticValues = [];
      var dynamicSlots = [];
      var _loop = function _loop() {
        var field = _fields[_i];
        address[field.id] = dynamicSlots.length << 1;
        dynamicSlots.push(function (a) {
          return field.slot(a);
        });
      };
      for (var _i = 0, _fields = fields; _i < _fields.length; _i++) {
        _loop();
      }
      var _loop2 = function _loop2(id) {
        var providers = facets[id],
          facet = providers[0].facet;
        if (providers.every(function (p) {
          return p.type == 0;
        } /* Static */)) {
          address[facet.id] = staticValues.length << 1 | 1;
          var value = facet.combine(providers.map(function (p) {
            return p.value;
          }));
          var oldAddr = oldState ? oldState.config.address[facet.id] : null;
          if (oldAddr != null) {
            var oldVal = getAddr(oldState, oldAddr);
            if (facet.compare(value, oldVal)) value = oldVal;
          }
          staticValues.push(value);
        } else {
          var _iterator7 = _createForOfIteratorHelper(providers),
            _step7;
          try {
            var _loop3 = function _loop3() {
              var p = _step7.value;
              if (p.type == 0 /* Static */) {
                address[p.id] = staticValues.length << 1 | 1;
                staticValues.push(p.value);
              } else {
                address[p.id] = dynamicSlots.length << 1;
                dynamicSlots.push(function (a) {
                  return p.dynamicSlot(a);
                });
              }
            };
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              _loop3();
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
          address[facet.id] = dynamicSlots.length << 1;
          dynamicSlots.push(function (a) {
            return dynamicFacetSlot(a, facet, providers);
          });
        }
      };
      for (var id in facets) {
        _loop2(id);
      }
      return new Configuration(base, newCompartments, dynamicSlots.map(function (f) {
        return f(address);
      }), address, staticValues);
    }
  }]);
  return Configuration;
}();
function flatten(extension, compartments, newCompartments) {
  var result = [[], [], [], []];
  var seen = new Map();
  function inner(ext, prec) {
    var known = seen.get(ext);
    if (known != null) {
      if (known >= prec) return;
      var found = result[known].indexOf(ext);
      if (found > -1) result[known].splice(found, 1);
      if (ext instanceof CompartmentInstance) newCompartments["delete"](ext.compartment);
    }
    seen.set(ext, prec);
    if (Array.isArray(ext)) {
      var _iterator8 = _createForOfIteratorHelper(ext),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var e = _step8.value;
          inner(e, prec);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
    } else if (ext instanceof CompartmentInstance) {
      if (newCompartments.has(ext.compartment)) throw new RangeError("Duplicate use of compartment in extensions");
      var content = compartments.get(ext.compartment) || ext.inner;
      newCompartments.set(ext.compartment, content);
      inner(content, prec);
    } else if (ext instanceof PrecExtension) {
      inner(ext.inner, ext.prec);
    } else if (ext instanceof StateField) {
      result[prec].push(ext);
      if (ext.provides) inner(ext.provides, prec);
    } else if (ext instanceof FacetProvider) {
      result[prec].push(ext);
      if (ext.facet.extensions) inner(ext.facet.extensions, prec);
    } else {
      var _content = ext.extension;
      if (!_content) throw new Error("Unrecognized extension value in extension set (".concat(ext, "). This sometimes happens because multiple instances of @codemirror/state are loaded, breaking instanceof checks."));
      inner(_content, prec);
    }
  }
  inner(extension, Prec_["default"]);
  return result.reduce(function (a, b) {
    return a.concat(b);
  });
}
function ensureAddr(state, addr) {
  if (addr & 1) return 2 /* Computed */;
  var idx = addr >> 1;
  var status = state.status[idx];
  if (status == 4 /* Computing */) throw new Error("Cyclic dependency between fields and/or facets");
  if (status & 2 /* Computed */) return status;
  state.status[idx] = 4 /* Computing */;
  var changed = state.config.dynamicSlots[idx](state, state.applying);
  return state.status[idx] = 2 /* Computed */ | changed;
}
function getAddr(state, addr) {
  return addr & 1 ? state.config.staticValues[addr >> 1] : state.values[addr >> 1];
}
var languageData = /*@__PURE__*/Facet.define();
var allowMultipleSelections = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.some(function (v) {
      return v;
    });
  },
  "static": true
});
var lineSeparator = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.length ? values[0] : undefined;
  },
  "static": true
});
var changeFilter = /*@__PURE__*/Facet.define();
var transactionFilter = /*@__PURE__*/Facet.define();
var transactionExtender = /*@__PURE__*/Facet.define();

/**
Annotations are tagged values that are used to add metadata to
transactions in an extensible way. They should be used to model
things that effect the entire transaction (such as its [time
stamp](https://codemirror.net/6/docs/ref/#state.Transaction^time) or information about its
[origin](https://codemirror.net/6/docs/ref/#state.Transaction^userEvent)). For effects that happen
_alongside_ the other changes made by the transaction, [state
effects](https://codemirror.net/6/docs/ref/#state.StateEffect) are more appropriate.
*/
var Annotation = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Annotation(
  /**
  The annotation type.
  */
  type,
  /**
  The value of this annotation.
  */
  value) {
    _classCallCheck(this, Annotation);
    this.type = type;
    this.value = value;
  }
  /**
  Define a new type of annotation.
  */
  _createClass(Annotation, null, [{
    key: "define",
    value: function define() {
      return new AnnotationType();
    }
  }]);
  return Annotation;
}(); /**
     Marker that identifies a type of [annotation](https://codemirror.net/6/docs/ref/#state.Annotation).
     */
var AnnotationType = /*#__PURE__*/function () {
  function AnnotationType() {
    _classCallCheck(this, AnnotationType);
  }
  _createClass(AnnotationType, [{
    key: "of",
    value:
    /**
    Create an instance of this annotation.
    */
    function of(value) {
      return new Annotation(this, value);
    }
  }]);
  return AnnotationType;
}(); /**
     Representation of a type of state effect. Defined with
     [`StateEffect.define`](https://codemirror.net/6/docs/ref/#state.StateEffect^define).
     */
var StateEffectType = /*#__PURE__*/function () {
  /**
  @internal
  */
  function StateEffectType(
  // The `any` types in these function types are there to work
  // around TypeScript issue #37631, where the type guard on
  // `StateEffect.is` mysteriously stops working when these properly
  // have type `Value`.
  /**
  @internal
  */
  map) {
    _classCallCheck(this, StateEffectType);
    this.map = map;
  }
  /**
  Create a [state effect](https://codemirror.net/6/docs/ref/#state.StateEffect) instance of this
  type.
  */
  _createClass(StateEffectType, [{
    key: "of",
    value: function of(value) {
      return new StateEffect(this, value);
    }
  }]);
  return StateEffectType;
}(); /**
     State effects can be used to represent additional effects
     associated with a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction.effects). They
     are often useful to model changes to custom [state
     fields](https://codemirror.net/6/docs/ref/#state.StateField), when those changes aren't implicit in
     document or selection changes.
     */
var StateEffect = /*#__PURE__*/function () {
  /**
  @internal
  */
  function StateEffect(
  /**
  @internal
  */
  type,
  /**
  The value of this effect.
  */
  value) {
    _classCallCheck(this, StateEffect);
    this.type = type;
    this.value = value;
  }
  /**
  Map this effect through a position mapping. Will return
  `undefined` when that ends up deleting the effect.
  */
  _createClass(StateEffect, [{
    key: "map",
    value: function map(mapping) {
      var mapped = this.type.map(this.value, mapping);
      return mapped === undefined ? undefined : mapped == this.value ? this : new StateEffect(this.type, mapped);
    }
    /**
    Tells you whether this effect object is of a given
    [type](https://codemirror.net/6/docs/ref/#state.StateEffectType).
    */
  }, {
    key: "is",
    value: function is(type) {
      return this.type == type;
    }
    /**
    Define a new effect type. The type parameter indicates the type
    of values that his effect holds.
    */
  }], [{
    key: "define",
    value: function define() {
      var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return new StateEffectType(spec.map || function (v) {
        return v;
      });
    }
    /**
    Map an array of effects through a change set.
    */
  }, {
    key: "mapEffects",
    value: function mapEffects(effects, mapping) {
      if (!effects.length) return effects;
      var result = [];
      var _iterator9 = _createForOfIteratorHelper(effects),
        _step9;
      try {
        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
          var effect = _step9.value;
          var mapped = effect.map(mapping);
          if (mapped) result.push(mapped);
        }
      } catch (err) {
        _iterator9.e(err);
      } finally {
        _iterator9.f();
      }
      return result;
    }
  }]);
  return StateEffect;
}(); /**
     This effect can be used to reconfigure the root extensions of
     the editor. Doing this will discard any extensions
     [appended](https://codemirror.net/6/docs/ref/#state.StateEffect^appendConfig), but does not reset
     the content of [reconfigured](https://codemirror.net/6/docs/ref/#state.Compartment.reconfigure)
     compartments.
     */
StateEffect.reconfigure = /*@__PURE__*/StateEffect.define();
/**
Append extensions to the top-level configuration of the editor.
*/
StateEffect.appendConfig = /*@__PURE__*/StateEffect.define();
/**
Changes to the editor state are grouped into transactions.
Typically, a user action creates a single transaction, which may
contain any number of document changes, may change the selection,
or have other effects. Create a transaction by calling
[`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
*/
var Transaction = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Transaction(
  /**
  The state from which the transaction starts.
  */
  startState,
  /**
  The document changes made by this transaction.
  */
  changes,
  /**
  The selection set by this transaction, or undefined if it
  doesn't explicitly set a selection.
  */
  selection,
  /**
  The effects added to the transaction.
  */
  effects,
  /**
  @internal
  */
  annotations,
  /**
  Whether the selection should be scrolled into view after this
  transaction is dispatched.
  */
  scrollIntoView) {
    _classCallCheck(this, Transaction);
    this.startState = startState;
    this.changes = changes;
    this.selection = selection;
    this.effects = effects;
    this.annotations = annotations;
    this.scrollIntoView = scrollIntoView;
    /**
    @internal
    */
    this._doc = null;
    /**
    @internal
    */
    this._state = null;
    if (selection) checkSelection(selection, changes.newLength);
    if (!annotations.some(function (a) {
      return a.type == Transaction.time;
    })) this.annotations = annotations.concat(Transaction.time.of(Date.now()));
  }
  /**
  The new document produced by the transaction. Contrary to
  [`.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state)`.doc`, accessing this won't
  force the entire new state to be computed right away, so it is
  recommended that [transaction
  filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) use this getter
  when they need to look at the new document.
  */
  _createClass(Transaction, [{
    key: "newDoc",
    get: function get() {
      return this._doc || (this._doc = this.changes.apply(this.startState.doc));
    }
    /**
    The new selection produced by the transaction. If
    [`this.selection`](https://codemirror.net/6/docs/ref/#state.Transaction.selection) is undefined,
    this will [map](https://codemirror.net/6/docs/ref/#state.EditorSelection.map) the start state's
    current selection through the changes made by the transaction.
    */
  }, {
    key: "newSelection",
    get: function get() {
      return this.selection || this.startState.selection.map(this.changes);
    }
    /**
    The new state created by the transaction. Computed on demand
    (but retained for subsequent access), so itis recommended not to
    access it in [transaction
    filters](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter) when possible.
    */
  }, {
    key: "state",
    get: function get() {
      if (!this._state) this.startState.applyTransaction(this);
      return this._state;
    }
    /**
    Get the value of the given annotation type, if any.
    */
  }, {
    key: "annotation",
    value: function annotation(type) {
      var _iterator10 = _createForOfIteratorHelper(this.annotations),
        _step10;
      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var ann = _step10.value;
          if (ann.type == type) return ann.value;
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
      return undefined;
    }
    /**
    Indicates whether the transaction changed the document.
    */
  }, {
    key: "docChanged",
    get: function get() {
      return !this.changes.empty;
    }
    /**
    Indicates whether this transaction reconfigures the state
    (through a [configuration compartment](https://codemirror.net/6/docs/ref/#state.Compartment) or
    with a top-level configuration
    [effect](https://codemirror.net/6/docs/ref/#state.StateEffect^reconfigure).
    */
  }, {
    key: "reconfigured",
    get: function get() {
      return this.startState.config != this.state.config;
    }
  }]);
  return Transaction;
}(); /**
     Annotation used to store transaction timestamps.
     */
Transaction.time = /*@__PURE__*/Annotation.define();
/**
Annotation used to associate a transaction with a user interface
event. The view will set this to...

 - `"input"` when the user types text
 - `"delete"` when the user deletes the selection or text near the selection
 - `"keyboardselection"` when moving the selection via the keyboard
 - `"pointerselection"` when moving the selection through the pointing device
 - `"paste"` when pasting content
 - `"cut"` when cutting
 - `"drop"` when content is inserted via drag-and-drop
*/
Transaction.userEvent = /*@__PURE__*/Annotation.define();
/**
Annotation indicating whether a transaction should be added to
the undo history or not.
*/
Transaction.addToHistory = /*@__PURE__*/Annotation.define();
/**
Annotation indicating (when present and true) that a transaction
represents a change made by some other actor, not the user. This
is used, for example, to tag other people's changes in
collaborative editing.
*/
Transaction.remote = /*@__PURE__*/Annotation.define();
function joinRanges(a, b) {
  var result = [];
  for (var iA = 0, iB = 0;;) {
    var from = void 0,
      to = void 0;
    if (iA < a.length && (iB == b.length || b[iB] >= a[iA])) {
      from = a[iA++];
      to = a[iA++];
    } else if (iB < b.length) {
      from = b[iB++];
      to = b[iB++];
    } else return result;
    if (!result.length || result[result.length - 1] < from) result.push(from, to);else if (result[result.length - 1] < to) result[result.length - 1] = to;
  }
}
function mergeTransaction(a, b, sequential) {
  var _a;
  var mapForA, mapForB, changes;
  if (sequential) {
    mapForA = b.changes;
    mapForB = ChangeSet.empty(b.changes.length);
    changes = a.changes.compose(b.changes);
  } else {
    mapForA = b.changes.map(a.changes);
    mapForB = a.changes.mapDesc(b.changes, true);
    changes = a.changes.compose(mapForA);
  }
  return {
    changes: changes,
    selection: b.selection ? b.selection.map(mapForB) : (_a = a.selection) === null || _a === void 0 ? void 0 : _a.map(mapForA),
    effects: StateEffect.mapEffects(a.effects, mapForA).concat(StateEffect.mapEffects(b.effects, mapForB)),
    annotations: a.annotations.length ? a.annotations.concat(b.annotations) : b.annotations,
    scrollIntoView: a.scrollIntoView || b.scrollIntoView
  };
}
function resolveTransactionInner(state, spec, docSize) {
  var sel = spec.selection;
  return {
    changes: spec.changes instanceof ChangeSet ? spec.changes : ChangeSet.of(spec.changes || [], docSize, state.facet(lineSeparator)),
    selection: sel && (sel instanceof EditorSelection ? sel : EditorSelection.single(sel.anchor, sel.head)),
    effects: asArray(spec.effects),
    annotations: asArray(spec.annotations),
    scrollIntoView: !!spec.scrollIntoView
  };
}
function resolveTransaction(state, specs, filter) {
  var s = resolveTransactionInner(state, specs.length ? specs[0] : {}, state.doc.length);
  if (specs.length && specs[0].filter === false) filter = false;
  for (var i = 1; i < specs.length; i++) {
    if (specs[i].filter === false) filter = false;
    var seq = !!specs[i].sequential;
    s = mergeTransaction(s, resolveTransactionInner(state, specs[i], seq ? s.changes.newLength : state.doc.length), seq);
  }
  var tr = new Transaction(state, s.changes, s.selection, s.effects, s.annotations, s.scrollIntoView);
  return extendTransaction(filter ? filterTransaction(tr) : tr);
}
// Finish a transaction by applying filters if necessary.
function filterTransaction(tr) {
  var state = tr.startState;
  // Change filters
  var result = true;
  var _iterator11 = _createForOfIteratorHelper(state.facet(changeFilter)),
    _step11;
  try {
    for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
      var filter = _step11.value;
      var value = filter(tr);
      if (value === false) {
        result = false;
        break;
      }
      if (Array.isArray(value)) result = result === true ? value : joinRanges(result, value);
    }
  } catch (err) {
    _iterator11.e(err);
  } finally {
    _iterator11.f();
  }
  if (result !== true) {
    var changes, back;
    if (result === false) {
      back = tr.changes.invertedDesc;
      changes = ChangeSet.empty(state.doc.length);
    } else {
      var filtered = tr.changes.filter(result);
      changes = filtered.changes;
      back = filtered.filtered.invertedDesc;
    }
    tr = new Transaction(state, changes, tr.selection && tr.selection.map(back), StateEffect.mapEffects(tr.effects, back), tr.annotations, tr.scrollIntoView);
  }
  // Transaction filters
  var filters = state.facet(transactionFilter);
  for (var i = filters.length - 1; i >= 0; i--) {
    var _filtered = filters[i](tr);
    if (_filtered instanceof Transaction) tr = _filtered;else if (Array.isArray(_filtered) && _filtered.length == 1 && _filtered[0] instanceof Transaction) tr = _filtered[0];else tr = resolveTransaction(state, asArray(_filtered), false);
  }
  return tr;
}
function extendTransaction(tr) {
  var state = tr.startState,
    extenders = state.facet(transactionExtender),
    spec = tr;
  for (var i = extenders.length - 1; i >= 0; i--) {
    var extension = extenders[i](tr);
    if (extension && Object.keys(extension).length) spec = mergeTransaction(tr, resolveTransactionInner(state, extension, tr.changes.newLength), true);
  }
  return spec == tr ? tr : new Transaction(state, tr.changes, tr.selection, spec.effects, spec.annotations, spec.scrollIntoView);
}
var none = [];
function asArray(value) {
  return value == null ? none : Array.isArray(value) ? value : [value];
}

/**
The categories produced by a [character
categorizer](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer). These are used
do things like selecting by word.
*/
var CharCategory = /*@__PURE__*/function (CharCategory) {
  /**
  Word characters.
  */
  CharCategory[CharCategory["Word"] = 0] = "Word";
  /**
  Whitespace.
  */
  CharCategory[CharCategory["Space"] = 1] = "Space";
  /**
  Anything else.
  */
  CharCategory[CharCategory["Other"] = 2] = "Other";
  return CharCategory;
}(CharCategory || (CharCategory = {}));
var nonASCIISingleCaseWordChar = /[\u00df\u0587\u0590-\u05f4\u0600-\u06ff\u3040-\u309f\u30a0-\u30ff\u3400-\u4db5\u4e00-\u9fcc\uac00-\ud7af]/;
var wordChar;
try {
  wordChar = /*@__PURE__*/new RegExp("[\\p{Alphabetic}\\p{Number}_]", "u");
} catch (_) {}
function hasWordChar(str) {
  if (wordChar) return wordChar.test(str);
  for (var i = 0; i < str.length; i++) {
    var ch = str[i];
    if (/\w/.test(ch) || ch > "\x80" && (ch.toUpperCase() != ch.toLowerCase() || nonASCIISingleCaseWordChar.test(ch))) return true;
  }
  return false;
}
function makeCategorizer(wordChars) {
  return function (_char) {
    if (!/\S/.test(_char)) return CharCategory.Space;
    if (hasWordChar(_char)) return CharCategory.Word;
    for (var i = 0; i < wordChars.length; i++) {
      if (_char.indexOf(wordChars[i]) > -1) return CharCategory.Word;
    }
    return CharCategory.Other;
  };
}

/**
The editor state class is a persistent (immutable) data structure.
To update a state, you [create](https://codemirror.net/6/docs/ref/#state.EditorState.update) a
[transaction](https://codemirror.net/6/docs/ref/#state.Transaction), which produces a _new_ state
instance, without modifying the original object.

As such, _never_ mutate properties of a state directly. That'll
just break things.
*/
var EditorState = /*#__PURE__*/function () {
  /**
  @internal
  */
  function EditorState(
  /**
  @internal
  */
  config,
  /**
  The current document.
  */
  doc,
  /**
  The current selection.
  */
  selection) {
    var tr = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
    _classCallCheck(this, EditorState);
    this.config = config;
    this.doc = doc;
    this.selection = selection;
    /**
    @internal
    */
    this.applying = null;
    this.status = config.statusTemplate.slice();
    if (tr && tr.startState.config == config) {
      this.values = tr.startState.values.slice();
    } else {
      this.values = config.dynamicSlots.map(function (_) {
        return null;
      });
      // Copy over old values for shared facets/fields if this is a reconfigure
      if (tr) for (var id in config.address) {
        var cur = config.address[id],
          prev = tr.startState.config.address[id];
        if (prev != null && (cur & 1) == 0) this.values[cur >> 1] = getAddr(tr.startState, prev);
      }
    }
    this.applying = tr;
    // Fill in the computed state immediately, so that further queries
    // for it made during the update return this state
    if (tr) tr._state = this;
    for (var i = 0; i < this.config.dynamicSlots.length; i++) {
      ensureAddr(this, i << 1);
    }
    this.applying = null;
  }
  _createClass(EditorState, [{
    key: "field",
    value: function field(_field) {
      var require = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      var addr = this.config.address[_field.id];
      if (addr == null) {
        if (require) throw new RangeError("Field is not present in this state");
        return undefined;
      }
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Create a [transaction](https://codemirror.net/6/docs/ref/#state.Transaction) that updates this
    state. Any number of [transaction specs](https://codemirror.net/6/docs/ref/#state.TransactionSpec)
    can be passed. Unless
    [`sequential`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.sequential) is set, the
    [changes](https://codemirror.net/6/docs/ref/#state.TransactionSpec.changes) (if any) of each spec
    are assumed to start in the _current_ document (not the document
    produced by previous specs), and its
    [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) and
    [effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects) are assumed to refer
    to the document created by its _own_ changes. The resulting
    transaction contains the combined effect of all the different
    specs. For [selection](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection), later
    specs take precedence over earlier ones.
    */
  }, {
    key: "update",
    value: function update() {
      for (var _len2 = arguments.length, specs = new Array(_len2), _key = 0; _key < _len2; _key++) {
        specs[_key] = arguments[_key];
      }
      return resolveTransaction(this, specs, true);
    }
    /**
    @internal
    */
  }, {
    key: "applyTransaction",
    value: function applyTransaction(tr) {
      var conf = this.config,
        _conf = conf,
        base = _conf.base,
        compartments = _conf.compartments;
      var _iterator12 = _createForOfIteratorHelper(tr.effects),
        _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var effect = _step12.value;
          if (effect.is(Compartment.reconfigure)) {
            if (conf) {
              compartments = new Map();
              conf.compartments.forEach(function (val, key) {
                return compartments.set(key, val);
              });
              conf = null;
            }
            compartments.set(effect.value.compartment, effect.value.extension);
          } else if (effect.is(StateEffect.reconfigure)) {
            conf = null;
            base = effect.value;
          } else if (effect.is(StateEffect.appendConfig)) {
            conf = null;
            base = asArray(base).concat(effect.value);
          }
        }
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      new EditorState(conf || Configuration.resolve(base, compartments, this), tr.newDoc, tr.newSelection, tr);
    }
    /**
    Create a [transaction spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec) that
    replaces every selection range with the given content.
    */
  }, {
    key: "replaceSelection",
    value: function replaceSelection(text) {
      if (typeof text == "string") text = this.toText(text);
      return this.changeByRange(function (range) {
        return {
          changes: {
            from: range.from,
            to: range.to,
            insert: text
          },
          range: EditorSelection.cursor(range.from + text.length)
        };
      });
    }
    /**
    Create a set of changes and a new selection by running the given
    function for each range in the active selection. The function
    can return an optional set of changes (in the coordinate space
    of the start document), plus an updated range (in the coordinate
    space of the document produced by the call's own changes). This
    method will merge all the changes and ranges into a single
    changeset and selection, and return it as a [transaction
    spec](https://codemirror.net/6/docs/ref/#state.TransactionSpec), which can be passed to
    [`update`](https://codemirror.net/6/docs/ref/#state.EditorState.update).
    */
  }, {
    key: "changeByRange",
    value: function changeByRange(f) {
      var sel = this.selection;
      var result1 = f(sel.ranges[0]);
      var changes = this.changes(result1.changes),
        ranges = [result1.range];
      var effects = asArray(result1.effects);
      for (var i = 1; i < sel.ranges.length; i++) {
        var result = f(sel.ranges[i]);
        var newChanges = this.changes(result.changes),
          newMapped = newChanges.map(changes);
        for (var j = 0; j < i; j++) {
          ranges[j] = ranges[j].map(newMapped);
        }
        var mapBy = changes.mapDesc(newChanges, true);
        ranges.push(result.range.map(mapBy));
        changes = changes.compose(newMapped);
        effects = StateEffect.mapEffects(effects, newMapped).concat(StateEffect.mapEffects(asArray(result.effects), mapBy));
      }
      return {
        changes: changes,
        selection: EditorSelection.create(ranges, sel.mainIndex),
        effects: effects
      };
    }
    /**
    Create a [change set](https://codemirror.net/6/docs/ref/#state.ChangeSet) from the given change
    description, taking the state's document length and line
    separator into account.
    */
  }, {
    key: "changes",
    value: function changes() {
      var spec = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      if (spec instanceof ChangeSet) return spec;
      return ChangeSet.of(spec, this.doc.length, this.facet(EditorState.lineSeparator));
    }
    /**
    Using the state's [line
    separator](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator), create a
    [`Text`](https://codemirror.net/6/docs/ref/#text.Text) instance from the given string.
    */
  }, {
    key: "toText",
    value: function toText(string) {
      return _codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text.of(string.split(this.facet(EditorState.lineSeparator) || DefaultSplit));
    }
    /**
    Return the given range of the document as a string.
    */
  }, {
    key: "sliceDoc",
    value: function sliceDoc() {
      var from = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.doc.length;
      return this.doc.sliceString(from, to, this.lineBreak);
    }
    /**
    Get the value of a state [facet](https://codemirror.net/6/docs/ref/#state.Facet).
    */
  }, {
    key: "facet",
    value: function facet(_facet) {
      var addr = this.config.address[_facet.id];
      if (addr == null) return _facet["default"];
      ensureAddr(this, addr);
      return getAddr(this, addr);
    }
    /**
    Convert this state to a JSON-serializable object. When custom
    fields should be serialized, you can pass them in as an object
    mapping property names (in the resulting object, which should
    not use `doc` or `selection`) to fields.
    */
  }, {
    key: "toJSON",
    value: function toJSON(fields) {
      var result = {
        doc: this.sliceDoc(),
        selection: this.selection.toJSON()
      };
      if (fields) for (var prop in fields) {
        var value = fields[prop];
        if (value instanceof StateField) result[prop] = value.spec.toJSON(this.field(fields[prop]), this);
      }
      return result;
    }
    /**
    Deserialize a state from its JSON representation. When custom
    fields should be deserialized, pass the same object you passed
    to [`toJSON`](https://codemirror.net/6/docs/ref/#state.EditorState.toJSON) when serializing as
    third argument.
    */
  }, {
    key: "tabSize",
    get:
    /**
    The size (in columns) of a tab in the document, determined by
    the [`tabSize`](https://codemirror.net/6/docs/ref/#state.EditorState^tabSize) facet.
    */
    function get() {
      return this.facet(EditorState.tabSize);
    }
    /**
    Get the proper [line-break](https://codemirror.net/6/docs/ref/#state.EditorState^lineSeparator)
    string for this state.
    */
  }, {
    key: "lineBreak",
    get: function get() {
      return this.facet(EditorState.lineSeparator) || "\n";
    }
    /**
    Look up a translation for the given phrase (via the
    [`phrases`](https://codemirror.net/6/docs/ref/#state.EditorState^phrases) facet), or return the
    original string if no translation is found.
    */
  }, {
    key: "phrase",
    value: function phrase(_phrase) {
      var _iterator13 = _createForOfIteratorHelper(this.facet(EditorState.phrases)),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var map = _step13.value;
          if (Object.prototype.hasOwnProperty.call(map, _phrase)) return map[_phrase];
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
      return _phrase;
    }
    /**
    Find the values for a given language data field, provided by the
    the [`languageData`](https://codemirror.net/6/docs/ref/#state.EditorState^languageData) facet.
    */
  }, {
    key: "languageDataAt",
    value: function languageDataAt(name, pos) {
      var values = [];
      var _iterator14 = _createForOfIteratorHelper(this.facet(languageData)),
        _step14;
      try {
        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
          var provider = _step14.value;
          var _iterator15 = _createForOfIteratorHelper(provider(this, pos)),
            _step15;
          try {
            for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
              var result = _step15.value;
              if (Object.prototype.hasOwnProperty.call(result, name)) values.push(result[name]);
            }
          } catch (err) {
            _iterator15.e(err);
          } finally {
            _iterator15.f();
          }
        }
      } catch (err) {
        _iterator14.e(err);
      } finally {
        _iterator14.f();
      }
      return values;
    }
    /**
    Return a function that can categorize strings (expected to
    represent a single [grapheme cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak))
    into one of:
    
     - Word (contains an alphanumeric character or a character
       explicitly listed in the local language's `"wordChars"`
       language data, which should be a string)
     - Space (contains only whitespace)
     - Other (anything else)
    */
  }, {
    key: "charCategorizer",
    value: function charCategorizer(at) {
      return makeCategorizer(this.languageDataAt("wordChars", at).join(""));
    }
    /**
    Find the word at the given position, meaning the range
    containing all [word](https://codemirror.net/6/docs/ref/#state.CharCategory.Word) characters
    around it. If no word characters are adjacent to the position,
    this returns null.
    */
  }, {
    key: "wordAt",
    value: function wordAt(pos) {
      var _this$doc$lineAt = this.doc.lineAt(pos),
        text = _this$doc$lineAt.text,
        from = _this$doc$lineAt.from,
        length = _this$doc$lineAt.length;
      var cat = this.charCategorizer(pos);
      var start = pos - from,
        end = pos - from;
      while (start > 0) {
        var prev = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(text, start, false);
        if (cat(text.slice(prev, start)) != CharCategory.Word) break;
        start = prev;
      }
      while (end < length) {
        var next = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_0__.findClusterBreak)(text, end);
        if (cat(text.slice(end, next)) != CharCategory.Word) break;
        end = next;
      }
      return start == end ? EditorSelection.range(start + from, end + from) : null;
    }
  }], [{
    key: "fromJSON",
    value: function fromJSON(json) {
      var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var fields = arguments.length > 2 ? arguments[2] : undefined;
      if (!json || typeof json.doc != "string") throw new RangeError("Invalid JSON representation for EditorState");
      var fieldInit = [];
      if (fields) {
        var _loop4 = function _loop4(prop) {
          var field = fields[prop],
            value = json[prop];
          fieldInit.push(field.init(function (state) {
            return field.spec.fromJSON(value, state);
          }));
        };
        for (var prop in fields) {
          _loop4(prop);
        }
      }
      return EditorState.create({
        doc: json.doc,
        selection: EditorSelection.fromJSON(json.selection),
        extensions: config.extensions ? fieldInit.concat([config.extensions]) : fieldInit
      });
    }
    /**
    Create a new state. You'll usually only need this when
    initializing an editor—updated states are created by applying
    transactions.
    */
  }, {
    key: "create",
    value: function create() {
      var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var configuration = Configuration.resolve(config.extensions || [], new Map());
      var doc = config.doc instanceof _codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text ? config.doc : _codemirror_text__WEBPACK_IMPORTED_MODULE_0__.Text.of((config.doc || "").split(configuration.staticFacet(EditorState.lineSeparator) || DefaultSplit));
      var selection = !config.selection ? EditorSelection.single(0) : config.selection instanceof EditorSelection ? config.selection : EditorSelection.single(config.selection.anchor, config.selection.head);
      checkSelection(selection, doc.length);
      if (!configuration.staticFacet(allowMultipleSelections)) selection = selection.asSingle();
      return new EditorState(configuration, doc, selection);
    }
  }]);
  return EditorState;
}(); /**
     A facet that, when enabled, causes the editor to allow multiple
     ranges to be selected. Be careful though, because by default the
     editor relies on the native DOM selection, which cannot handle
     multiple selections. An extension like
     [`drawSelection`](https://codemirror.net/6/docs/ref/#view.drawSelection) can be used to make
     secondary selections visible to the user.
     */
EditorState.allowMultipleSelections = allowMultipleSelections;
/**
Configures the tab size to use in this state. The first
(highest-precedence) value of the facet is used. If no value is
given, this defaults to 4.
*/
EditorState.tabSize = /*@__PURE__*/Facet.define({
  combine: function combine(values) {
    return values.length ? values[0] : 4;
  }
});
/**
The line separator to use. By default, any of `"\n"`, `"\r\n"`
and `"\r"` is treated as a separator when splitting lines, and
lines are joined with `"\n"`.

When you configure a value here, only that precise separator
will be used, allowing you to round-trip documents through the
editor without normalizing line separators.
*/
EditorState.lineSeparator = lineSeparator;
/**
Registers translation phrases. The
[`phrase`](https://codemirror.net/6/docs/ref/#state.EditorState.phrase) method will look through
all objects registered with this facet to find translations for
its argument.
*/
EditorState.phrases = /*@__PURE__*/Facet.define();
/**
A facet used to register [language
data](https://codemirror.net/6/docs/ref/#state.EditorState.languageDataAt) providers.
*/
EditorState.languageData = languageData;
/**
Facet used to register change filters, which are called for each
transaction (unless explicitly
[disabled](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter)), and can suppress
part of the transaction's changes.

Such a function can return `true` to indicate that it doesn't
want to do anything, `false` to completely stop the changes in
the transaction, or a set of ranges in which changes should be
suppressed. Such ranges are represented as an array of numbers,
with each pair of two number indicating the start and end of a
range. So for example `[10, 20, 100, 110]` suppresses changes
between 10 and 20, and between 100 and 110.
*/
EditorState.changeFilter = changeFilter;
/**
Facet used to register a hook that gets a chance to update or
replace transaction specs before they are applied. This will
only be applied for transactions that don't have
[`filter`](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter) set to `false`. You
can either return a single (possibly the input transaction), or
an array of specs (which will be combined in the same way as the
arguments to [`EditorState.update`](https://codemirror.net/6/docs/ref/#state.EditorState.update)).

When possible, it is recommended to avoid accessing
[`Transaction.state`](https://codemirror.net/6/docs/ref/#state.Transaction.state) in a filter,
since it will force creation of a state that will then be
discarded again, if the transaction is actually filtered.

(This functionality should be used with care. Indiscriminately
modifying transaction is likely to break something or degrade
the user experience.)
*/
EditorState.transactionFilter = transactionFilter;
/**
This is a more limited form of
[`transactionFilter`](https://codemirror.net/6/docs/ref/#state.EditorState^transactionFilter),
which can only add
[annotations](https://codemirror.net/6/docs/ref/#state.TransactionSpec.annotations) and
[effects](https://codemirror.net/6/docs/ref/#state.TransactionSpec.effects). _But_, this type
of filter runs even the transaction has disabled regular
[filtering](https://codemirror.net/6/docs/ref/#state.TransactionSpec.filter), making it suitable
for effects that don't need to touch the changes or selection,
but do want to process every transaction.

Extenders run _after_ filters, when both are applied.
*/
EditorState.transactionExtender = transactionExtender;
Compartment.reconfigure = /*@__PURE__*/StateEffect.define();

/**
Utility function for combining behaviors to fill in a config
object from an array of provided configs. Will, by default, error
when a field gets two values that aren't `===`-equal, but you can
provide combine functions per field to do something else.
*/
function combineConfig(configs, defaults) {
  var combine = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  var result = {};
  var _iterator16 = _createForOfIteratorHelper(configs),
    _step16;
  try {
    for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
      var config = _step16.value;
      for (var _i2 = 0, _Object$keys = Object.keys(config); _i2 < _Object$keys.length; _i2++) {
        var _key2 = _Object$keys[_i2];
        var value = config[_key2],
          current = result[_key2];
        if (current === undefined) result[_key2] = value;else if (current === value || value === undefined) ; // No conflict
        else if (Object.hasOwnProperty.call(combine, _key2)) result[_key2] = combine[_key2](current, value);else throw new Error("Config merge conflict for field " + _key2);
      }
    }
  } catch (err) {
    _iterator16.e(err);
  } finally {
    _iterator16.f();
  }
  for (var key in defaults) {
    if (result[key] === undefined) result[key] = defaults[key];
  }
  return result;
}


/***/ }),

/***/ "./node_modules/@codemirror/text/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@codemirror/text/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Line": () => (/* binding */ Line),
/* harmony export */   "Text": () => (/* binding */ Text),
/* harmony export */   "codePointAt": () => (/* binding */ codePointAt),
/* harmony export */   "codePointSize": () => (/* binding */ codePointSize),
/* harmony export */   "countColumn": () => (/* binding */ countColumn),
/* harmony export */   "findClusterBreak": () => (/* binding */ findClusterBreak),
/* harmony export */   "findColumn": () => (/* binding */ findColumn),
/* harmony export */   "fromCodePoint": () => (/* binding */ fromCodePoint)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
// Compressed representation of the Grapheme_Cluster_Break=Extend
// information from
// http://www.unicode.org/Public/13.0.0/ucd/auxiliary/GraphemeBreakProperty.txt.
// Each pair of elements represents a range, as an offet from the
// previous range and a length. Numbers are in base-36, with the empty
// string being a shorthand for 1.
var extend = /*@__PURE__*/"lc,34,7n,7,7b,19,,,,2,,2,,,20,b,1c,l,g,,2t,7,2,6,2,2,,4,z,,u,r,2j,b,1m,9,9,,o,4,,9,,3,,5,17,3,3b,f,,w,1j,,,,4,8,4,,3,7,a,2,t,,1m,,,,2,4,8,,9,,a,2,q,,2,2,1l,,4,2,4,2,2,3,3,,u,2,3,,b,2,1l,,4,5,,2,4,,k,2,m,6,,,1m,,,2,,4,8,,7,3,a,2,u,,1n,,,,c,,9,,14,,3,,1l,3,5,3,,4,7,2,b,2,t,,1m,,2,,2,,3,,5,2,7,2,b,2,s,2,1l,2,,,2,4,8,,9,,a,2,t,,20,,4,,2,3,,,8,,29,,2,7,c,8,2q,,2,9,b,6,22,2,r,,,,,,1j,e,,5,,2,5,b,,10,9,,2u,4,,6,,2,2,2,p,2,4,3,g,4,d,,2,2,6,,f,,jj,3,qa,3,t,3,t,2,u,2,1s,2,,7,8,,2,b,9,,19,3,3b,2,y,,3a,3,4,2,9,,6,3,63,2,2,,1m,,,7,,,,,2,8,6,a,2,,1c,h,1r,4,1c,7,,,5,,14,9,c,2,w,4,2,2,,3,1k,,,2,3,,,3,1m,8,2,2,48,3,,d,,7,4,,6,,3,2,5i,1m,,5,ek,,5f,x,2da,3,3x,,2o,w,fe,6,2x,2,n9w,4,,a,w,2,28,2,7k,,3,,4,,p,2,5,,47,2,q,i,d,,12,8,p,b,1a,3,1c,,2,4,2,2,13,,1v,6,2,2,2,2,c,,8,,1b,,1f,,,3,2,2,5,2,,,16,2,8,,6m,,2,,4,,fn4,,kh,g,g,g,a6,2,gt,,6a,,45,5,1ae,3,,2,5,4,14,3,4,,4l,2,fx,4,ar,2,49,b,4w,,1i,f,1k,3,1d,4,2,2,1x,3,10,5,,8,1q,,c,2,1g,9,a,4,2,,2n,3,2,,,2,6,,4g,,3,8,l,2,1l,2,,,,,m,,e,7,3,5,5f,8,2,3,,,n,,29,,2,6,,,2,,,2,,2,6j,,2,4,6,2,,2,r,2,2d,8,2,,,2,2y,,,,2,6,,,2t,3,2,4,,5,77,9,,2,6t,,a,2,,,4,,40,4,2,2,4,,w,a,14,6,2,4,8,,9,6,2,3,1a,d,,2,ba,7,,6,,,2a,m,2,7,,2,,2,3e,6,3,,,2,,7,,,20,2,3,,,,9n,2,f0b,5,1n,7,t4,,1r,4,29,,f5k,2,43q,,,3,4,5,8,8,2,7,u,4,44,3,1iz,1j,4,1e,8,,e,,m,5,,f,11s,7,,h,2,7,,2,,5,79,7,c5,4,15s,7,31,7,240,5,gx7k,2o,3k,6o".split(",").map(function (s) {
  return s ? parseInt(s, 36) : 1;
});
// Convert offsets into absolute values
for (var i = 1; i < extend.length; i++) {
  extend[i] += extend[i - 1];
}
function isExtendingChar(code) {
  for (var _i = 1; _i < extend.length; _i += 2) {
    if (extend[_i] > code) return extend[_i - 1] <= code;
  }
  return false;
}
function isRegionalIndicator(code) {
  return code >= 0x1F1E6 && code <= 0x1F1FF;
}
var ZWJ = 0x200d;
/**
Returns a next grapheme cluster break _after_ (not equal to)
`pos`, if `forward` is true, or before otherwise. Returns `pos`
itself if no further cluster break is available in the string.
Moves across surrogate pairs, extending characters, characters
joined with zero-width joiners, and flag emoji.
*/
function findClusterBreak(str, pos) {
  var forward = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  return (forward ? nextClusterBreak : prevClusterBreak)(str, pos);
}
function nextClusterBreak(str, pos) {
  if (pos == str.length) return pos;
  // If pos is in the middle of a surrogate pair, move to its start
  if (pos && surrogateLow(str.charCodeAt(pos)) && surrogateHigh(str.charCodeAt(pos - 1))) pos--;
  var prev = codePointAt(str, pos);
  pos += codePointSize(prev);
  while (pos < str.length) {
    var next = codePointAt(str, pos);
    if (prev == ZWJ || next == ZWJ || isExtendingChar(next)) {
      pos += codePointSize(next);
      prev = next;
    } else if (isRegionalIndicator(next)) {
      var countBefore = 0,
        _i2 = pos - 2;
      while (_i2 >= 0 && isRegionalIndicator(codePointAt(str, _i2))) {
        countBefore++;
        _i2 -= 2;
      }
      if (countBefore % 2 == 0) break;else pos += 2;
    } else {
      break;
    }
  }
  return pos;
}
function prevClusterBreak(str, pos) {
  while (pos > 0) {
    var found = nextClusterBreak(str, pos - 2);
    if (found < pos) return found;
    pos--;
  }
  return 0;
}
function surrogateLow(ch) {
  return ch >= 0xDC00 && ch < 0xE000;
}
function surrogateHigh(ch) {
  return ch >= 0xD800 && ch < 0xDC00;
}
/**
Find the code point at the given position in a string (like the
[`codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)
string method).
*/
function codePointAt(str, pos) {
  var code0 = str.charCodeAt(pos);
  if (!surrogateHigh(code0) || pos + 1 == str.length) return code0;
  var code1 = str.charCodeAt(pos + 1);
  if (!surrogateLow(code1)) return code0;
  return (code0 - 0xd800 << 10) + (code1 - 0xdc00) + 0x10000;
}
/**
Given a Unicode codepoint, return the JavaScript string that
respresents it (like
[`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)).
*/
function fromCodePoint(code) {
  if (code <= 0xffff) return String.fromCharCode(code);
  code -= 0x10000;
  return String.fromCharCode((code >> 10) + 0xd800, (code & 1023) + 0xdc00);
}
/**
The first character that takes up two positions in a JavaScript
string. It is often useful to compare with this after calling
`codePointAt`, to figure out whether your character takes up 1 or
2 index positions.
*/
function codePointSize(code) {
  return code < 0x10000 ? 1 : 2;
}

/**
Count the column position at the given offset into the string,
taking extending characters and tab size into account.
*/
function countColumn(string, n, tabSize) {
  for (var _i3 = 0; _i3 < string.length;) {
    if (string.charCodeAt(_i3) == 9) {
      n += tabSize - n % tabSize;
      _i3++;
    } else {
      n++;
      _i3 = findClusterBreak(string, _i3);
    }
  }
  return n;
}
/**
Find the offset that corresponds to the given column position in a
string, taking extending characters and tab size into account.
*/
function findColumn(string, col, tabSize) {
  var _compat = arguments[3];
  if (_compat != null) {
    col = tabSize;
    tabSize = _compat;
  } // FIXME remove at next major version
  for (var _i4 = 0, n = 0; _i4 < string.length;) {
    if (n >= col) return _i4;
    n += string.charCodeAt(_i4) == 9 ? tabSize - n % tabSize : 1;
    _i4 = findClusterBreak(string, _i4);
  }
  return string.length;
}

/**
The data structure for documents.
*/
var Text = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Text() {
    _classCallCheck(this, Text);
  }
  /**
  Get the line description around the given position.
  */
  _createClass(Text, [{
    key: "lineAt",
    value: function lineAt(pos) {
      if (pos < 0 || pos > this.length) throw new RangeError("Invalid position ".concat(pos, " in document of length ").concat(this.length));
      return this.lineInner(pos, false, 1, 0);
    }
    /**
    Get the description for the given (1-based) line number.
    */
  }, {
    key: "line",
    value: function line(n) {
      if (n < 1 || n > this.lines) throw new RangeError("Invalid line number ".concat(n, " in ").concat(this.lines, "-line document"));
      return this.lineInner(n, true, 1, 0);
    }
    /**
    Replace a range of the text with the given content.
    */
  }, {
    key: "replace",
    value: function replace(from, to, text) {
      var parts = [];
      this.decompose(0, from, parts, 2 /* To */);
      if (text.length) text.decompose(0, text.length, parts, 1 /* From */ | 2 /* To */);
      this.decompose(to, this.length, parts, 1 /* From */);
      return TextNode.from(parts, this.length - (to - from) + text.length);
    }
    /**
    Append another document to this one.
    */
  }, {
    key: "append",
    value: function append(other) {
      return this.replace(this.length, this.length, other);
    }
    /**
    Retrieve the text between the given points.
    */
  }, {
    key: "slice",
    value: function slice(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
      var parts = [];
      this.decompose(from, to, parts, 0);
      return TextNode.from(parts, to - from);
    }
    /**
    Test whether this text is equal to another instance.
    */
  }, {
    key: "eq",
    value: function eq(other) {
      if (other == this) return true;
      if (other.length != this.length || other.lines != this.lines) return false;
      var a = new RawTextCursor(this),
        b = new RawTextCursor(other);
      for (;;) {
        a.next();
        b.next();
        if (a.lineBreak != b.lineBreak || a.done != b.done || a.value != b.value) return false;
        if (a.done) return true;
      }
    }
    /**
    Iterate over the text. When `dir` is `-1`, iteration happens
    from end to start. This will return lines and the breaks between
    them as separate strings, and for long lines, might split lines
    themselves into multiple chunks as well.
    */
  }, {
    key: "iter",
    value: function iter() {
      var dir = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
      return new RawTextCursor(this, dir);
    }
    /**
    Iterate over a range of the text. When `from` > `to`, the
    iterator will run in reverse.
    */
  }, {
    key: "iterRange",
    value: function iterRange(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
      return new PartialTextCursor(this, from, to);
    }
    /**
    @internal
    */
  }, {
    key: "toString",
    value: function toString() {
      return this.sliceString(0);
    }
    /**
    Convert the document to an array of lines (which can be
    deserialized again via [`Text.of`](https://codemirror.net/6/docs/ref/#text.Text^of)).
    */
  }, {
    key: "toJSON",
    value: function toJSON() {
      var lines = [];
      this.flatten(lines);
      return lines;
    }
    /**
    Create a `Text` instance for the given array of lines.
    */
  }], [{
    key: "of",
    value: function of(text) {
      if (text.length == 0) throw new RangeError("A document must have at least one line");
      if (text.length == 1 && !text[0]) return Text.empty;
      return text.length <= 32 /* Branch */ ? new TextLeaf(text) : TextNode.from(TextLeaf.split(text, []));
    }
  }]);
  return Text;
}();
if (typeof Symbol != "undefined") Text.prototype[Symbol.iterator] = function () {
  return this.iter();
};
// Leaves store an array of line strings. There are always line breaks
// between these strings. Leaves are limited in size and have to be
// contained in TextNode instances for bigger documents.
var TextLeaf = /*#__PURE__*/function (_Text) {
  _inherits(TextLeaf, _Text);
  var _super = _createSuper(TextLeaf);
  function TextLeaf(text) {
    var _this;
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : textLength(text);
    _classCallCheck(this, TextLeaf);
    _this = _super.call(this);
    _this.text = text;
    _this.length = length;
    return _this;
  }
  _createClass(TextLeaf, [{
    key: "lines",
    get: function get() {
      return this.text.length;
    }
  }, {
    key: "children",
    get: function get() {
      return null;
    }
  }, {
    key: "lineInner",
    value: function lineInner(target, isLine, line, offset) {
      for (var _i5 = 0;; _i5++) {
        var string = this.text[_i5],
          end = offset + string.length;
        if ((isLine ? line : end) >= target) return new Line(offset, end, line, string);
        offset = end + 1;
        line++;
      }
    }
  }, {
    key: "decompose",
    value: function decompose(from, to, target, open) {
      var text = from <= 0 && to >= this.length ? this : new TextLeaf(sliceText(this.text, from, to), Math.min(to, this.length) - Math.max(0, from));
      if (open & 1 /* From */) {
        var prev = target.pop();
        var joined = appendText(text.text, prev.text.slice(), 0, text.length);
        if (joined.length <= 32 /* Branch */) {
          target.push(new TextLeaf(joined, prev.length + text.length));
        } else {
          var mid = joined.length >> 1;
          target.push(new TextLeaf(joined.slice(0, mid)), new TextLeaf(joined.slice(mid)));
        }
      } else {
        target.push(text);
      }
    }
  }, {
    key: "replace",
    value: function replace(from, to, text) {
      if (!(text instanceof TextLeaf)) return _get(_getPrototypeOf(TextLeaf.prototype), "replace", this).call(this, from, to, text);
      var lines = appendText(this.text, appendText(text.text, sliceText(this.text, 0, from)), to);
      var newLen = this.length + text.length - (to - from);
      if (lines.length <= 32 /* Branch */) return new TextLeaf(lines, newLen);
      return TextNode.from(TextLeaf.split(lines, []), newLen);
    }
  }, {
    key: "sliceString",
    value: function sliceString(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
      var lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "\n";
      var result = "";
      for (var pos = 0, _i6 = 0; pos <= to && _i6 < this.text.length; _i6++) {
        var line = this.text[_i6],
          end = pos + line.length;
        if (pos > from && _i6) result += lineSep;
        if (from < end && to > pos) result += line.slice(Math.max(0, from - pos), to - pos);
        pos = end + 1;
      }
      return result;
    }
  }, {
    key: "flatten",
    value: function flatten(target) {
      var _iterator = _createForOfIteratorHelper(this.text),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var line = _step.value;
          target.push(line);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }], [{
    key: "split",
    value: function split(text, target) {
      var part = [],
        len = -1;
      var _iterator2 = _createForOfIteratorHelper(text),
        _step2;
      try {
        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
          var line = _step2.value;
          part.push(line);
          len += line.length + 1;
          if (part.length == 32 /* Branch */) {
            target.push(new TextLeaf(part, len));
            part = [];
            len = -1;
          }
        }
      } catch (err) {
        _iterator2.e(err);
      } finally {
        _iterator2.f();
      }
      if (len > -1) target.push(new TextLeaf(part, len));
      return target;
    }
  }]);
  return TextLeaf;
}(Text); // Nodes provide the tree structure of the `Text` type. They store a
// number of other nodes or leaves, taking care to balance themselves
// on changes. There are implied line breaks _between_ the children of
// a node (but not before the first or after the last child).
var TextNode = /*#__PURE__*/function (_Text2) {
  _inherits(TextNode, _Text2);
  var _super2 = _createSuper(TextNode);
  function TextNode(children, length) {
    var _this2;
    _classCallCheck(this, TextNode);
    _this2 = _super2.call(this);
    _this2.children = children;
    _this2.length = length;
    _this2.lines = 0;
    var _iterator3 = _createForOfIteratorHelper(children),
      _step3;
    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var child = _step3.value;
        _this2.lines += child.lines;
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }
    return _this2;
  }
  _createClass(TextNode, [{
    key: "lineInner",
    value: function lineInner(target, isLine, line, offset) {
      for (var _i7 = 0;; _i7++) {
        var child = this.children[_i7],
          end = offset + child.length,
          endLine = line + child.lines - 1;
        if ((isLine ? endLine : end) >= target) return child.lineInner(target, isLine, line, offset);
        offset = end + 1;
        line = endLine + 1;
      }
    }
  }, {
    key: "decompose",
    value: function decompose(from, to, target, open) {
      for (var _i8 = 0, pos = 0; pos <= to && _i8 < this.children.length; _i8++) {
        var child = this.children[_i8],
          end = pos + child.length;
        if (from <= end && to >= pos) {
          var childOpen = open & ((pos <= from ? 1 /* From */ : 0) | (end >= to ? 2 /* To */ : 0));
          if (pos >= from && end <= to && !childOpen) target.push(child);else child.decompose(from - pos, to - pos, target, childOpen);
        }
        pos = end + 1;
      }
    }
  }, {
    key: "replace",
    value: function replace(from, to, text) {
      if (text.lines < this.lines) for (var _i9 = 0, pos = 0; _i9 < this.children.length; _i9++) {
        var child = this.children[_i9],
          end = pos + child.length;
        // Fast path: if the change only affects one child and the
        // child's size remains in the acceptable range, only update
        // that child
        if (from >= pos && to <= end) {
          var updated = child.replace(from - pos, to - pos, text);
          var totalLines = this.lines - child.lines + updated.lines;
          if (updated.lines < totalLines >> 5 /* BranchShift */ - 1 && updated.lines > totalLines >> 5 /* BranchShift */ + 1) {
            var copy = this.children.slice();
            copy[_i9] = updated;
            return new TextNode(copy, this.length - (to - from) + text.length);
          }
          return _get(_getPrototypeOf(TextNode.prototype), "replace", this).call(this, pos, end, updated);
        }
        pos = end + 1;
      }
      return _get(_getPrototypeOf(TextNode.prototype), "replace", this).call(this, from, to, text);
    }
  }, {
    key: "sliceString",
    value: function sliceString(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.length;
      var lineSep = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "\n";
      var result = "";
      for (var _i10 = 0, pos = 0; _i10 < this.children.length && pos <= to; _i10++) {
        var child = this.children[_i10],
          end = pos + child.length;
        if (pos > from && _i10) result += lineSep;
        if (from < end && to > pos) result += child.sliceString(from - pos, to - pos, lineSep);
        pos = end + 1;
      }
      return result;
    }
  }, {
    key: "flatten",
    value: function flatten(target) {
      var _iterator4 = _createForOfIteratorHelper(this.children),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var child = _step4.value;
          child.flatten(target);
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
    }
  }], [{
    key: "from",
    value: function from(children) {
      var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : children.reduce(function (l, ch) {
        return l + ch.length + 1;
      }, -1);
      var lines = 0;
      var _iterator5 = _createForOfIteratorHelper(children),
        _step5;
      try {
        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
          var _ch = _step5.value;
          lines += _ch.lines;
        }
      } catch (err) {
        _iterator5.e(err);
      } finally {
        _iterator5.f();
      }
      if (lines < 32 /* Branch */) {
        var flat = [];
        var _iterator6 = _createForOfIteratorHelper(children),
          _step6;
        try {
          for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
            var ch = _step6.value;
            ch.flatten(flat);
          }
        } catch (err) {
          _iterator6.e(err);
        } finally {
          _iterator6.f();
        }
        return new TextLeaf(flat, length);
      }
      var chunk = Math.max(32 /* Branch */, lines >> 5 /* BranchShift */),
        maxChunk = chunk << 1,
        minChunk = chunk >> 1;
      var chunked = [],
        currentLines = 0,
        currentLen = -1,
        currentChunk = [];
      function add(child) {
        var last;
        if (child.lines > maxChunk && child instanceof TextNode) {
          var _iterator7 = _createForOfIteratorHelper(child.children),
            _step7;
          try {
            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
              var node = _step7.value;
              add(node);
            }
          } catch (err) {
            _iterator7.e(err);
          } finally {
            _iterator7.f();
          }
        } else if (child.lines > minChunk && (currentLines > minChunk || !currentLines)) {
          flush();
          chunked.push(child);
        } else if (child instanceof TextLeaf && currentLines && (last = currentChunk[currentChunk.length - 1]) instanceof TextLeaf && child.lines + last.lines <= 32 /* Branch */) {
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk[currentChunk.length - 1] = new TextLeaf(last.text.concat(child.text), last.length + 1 + child.length);
        } else {
          if (currentLines + child.lines > chunk) flush();
          currentLines += child.lines;
          currentLen += child.length + 1;
          currentChunk.push(child);
        }
      }
      function flush() {
        if (currentLines == 0) return;
        chunked.push(currentChunk.length == 1 ? currentChunk[0] : TextNode.from(currentChunk, currentLen));
        currentLen = -1;
        currentLines = currentChunk.length = 0;
      }
      var _iterator8 = _createForOfIteratorHelper(children),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var child = _step8.value;
          add(child);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      flush();
      return chunked.length == 1 ? chunked[0] : new TextNode(chunked, length);
    }
  }]);
  return TextNode;
}(Text);
Text.empty = /*@__PURE__*/new TextLeaf([""], 0);
function textLength(text) {
  var length = -1;
  var _iterator9 = _createForOfIteratorHelper(text),
    _step9;
  try {
    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
      var line = _step9.value;
      length += line.length + 1;
    }
  } catch (err) {
    _iterator9.e(err);
  } finally {
    _iterator9.f();
  }
  return length;
}
function appendText(text, target) {
  var from = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  var to = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1e9;
  for (var pos = 0, _i11 = 0, first = true; _i11 < text.length && pos <= to; _i11++) {
    var line = text[_i11],
      end = pos + line.length;
    if (end >= from) {
      if (end > to) line = line.slice(0, to - pos);
      if (pos < from) line = line.slice(from - pos);
      if (first) {
        target[target.length - 1] += line;
        first = false;
      } else target.push(line);
    }
    pos = end + 1;
  }
  return target;
}
function sliceText(text, from, to) {
  return appendText(text, [""], from, to);
}
var RawTextCursor = /*#__PURE__*/function () {
  function RawTextCursor(text) {
    var dir = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
    _classCallCheck(this, RawTextCursor);
    this.dir = dir;
    this.done = false;
    this.lineBreak = false;
    this.value = "";
    this.nodes = [text];
    this.offsets = [dir > 0 ? 1 : (text instanceof TextLeaf ? text.text.length : text.children.length) << 1];
  }
  _createClass(RawTextCursor, [{
    key: "nextInner",
    value: function nextInner(skip, dir) {
      this.done = this.lineBreak = false;
      for (;;) {
        var last = this.nodes.length - 1;
        var top = this.nodes[last],
          offsetValue = this.offsets[last],
          offset = offsetValue >> 1;
        var size = top instanceof TextLeaf ? top.text.length : top.children.length;
        if (offset == (dir > 0 ? size : 0)) {
          if (last == 0) {
            this.done = true;
            this.value = "";
            return this;
          }
          if (dir > 0) this.offsets[last - 1]++;
          this.nodes.pop();
          this.offsets.pop();
        } else if ((offsetValue & 1) == (dir > 0 ? 0 : 1)) {
          this.offsets[last] += dir;
          if (skip == 0) {
            this.lineBreak = true;
            this.value = "\n";
            return this;
          }
          skip--;
        } else if (top instanceof TextLeaf) {
          // Move to the next string
          var next = top.text[offset + (dir < 0 ? -1 : 0)];
          this.offsets[last] += dir;
          if (next.length > Math.max(0, skip)) {
            this.value = skip == 0 ? next : dir > 0 ? next.slice(skip) : next.slice(0, next.length - skip);
            return this;
          }
          skip -= next.length;
        } else {
          var _next = top.children[offset + (dir < 0 ? -1 : 0)];
          if (skip > _next.length) {
            skip -= _next.length;
            this.offsets[last] += dir;
          } else {
            if (dir < 0) this.offsets[last]--;
            this.nodes.push(_next);
            this.offsets.push(dir > 0 ? 1 : (_next instanceof TextLeaf ? _next.text.length : _next.children.length) << 1);
          }
        }
      }
    }
  }, {
    key: "next",
    value: function next() {
      var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if (skip < 0) {
        this.nextInner(-skip, -this.dir);
        skip = this.value.length;
      }
      return this.nextInner(skip, this.dir);
    }
  }]);
  return RawTextCursor;
}();
var PartialTextCursor = /*#__PURE__*/function () {
  function PartialTextCursor(text, start, end) {
    _classCallCheck(this, PartialTextCursor);
    this.value = "";
    this.done = false;
    this.cursor = new RawTextCursor(text, start > end ? -1 : 1);
    this.pos = start > end ? text.length : 0;
    this.from = Math.min(start, end);
    this.to = Math.max(start, end);
  }
  _createClass(PartialTextCursor, [{
    key: "nextInner",
    value: function nextInner(skip, dir) {
      if (dir < 0 ? this.pos <= this.from : this.pos >= this.to) {
        this.value = "";
        this.done = true;
        return this;
      }
      this.done = false;
      skip += Math.max(0, dir < 0 ? this.pos - this.to : this.from - this.pos);
      var limit = dir < 0 ? this.pos - this.from : this.to - this.pos;
      if (skip > limit) skip = limit;
      limit -= skip;
      var _this$cursor$next = this.cursor.next(skip),
        value = _this$cursor$next.value;
      this.pos += (value.length + skip) * dir;
      this.value = value.length <= limit ? value : dir < 0 ? value.slice(value.length - limit) : value.slice(0, limit);
      return this;
    }
  }, {
    key: "next",
    value: function next() {
      var skip = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
      if (skip < 0) skip = Math.max(skip, this.from - this.pos);else if (skip > 0) skip = Math.min(skip, this.to - this.pos);
      return this.nextInner(skip, this.cursor.dir);
    }
  }, {
    key: "lineBreak",
    get: function get() {
      return this.cursor.lineBreak && this.value != "";
    }
  }]);
  return PartialTextCursor;
}(); /**
     This type describes a line in the document. It is created
     on-demand when lines are [queried](https://codemirror.net/6/docs/ref/#text.Text.lineAt).
     */
var Line = /*#__PURE__*/function () {
  /**
  @internal
  */
  function Line(
  /**
  The position of the start of the line.
  */
  from,
  /**
  The position at the end of the line (_before_ the line break,
  or at the end of document for the last line).
  */
  to,
  /**
  This line's line number (1-based).
  */
  number,
  /**
  The line's content.
  */
  text) {
    _classCallCheck(this, Line);
    this.from = from;
    this.to = to;
    this.number = number;
    this.text = text;
  }
  /**
  The length of the line (not including any line break after it).
  */
  _createClass(Line, [{
    key: "length",
    get: function get() {
      return this.to - this.from;
    }
  }]);
  return Line;
}();


/***/ }),

/***/ "./node_modules/@codemirror/tooltip/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@codemirror/tooltip/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "hoverTooltip": () => (/* binding */ hoverTooltip),
/* harmony export */   "showTooltip": () => (/* binding */ showTooltip),
/* harmony export */   "tooltips": () => (/* binding */ tooltips)
/* harmony export */ });
/* harmony import */ var _codemirror_view__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @codemirror/view */ "./node_modules/@codemirror/view/dist/index.js");
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


var ios = typeof navigator != "undefined" && !/Edge\/(\d+)/.exec(navigator.userAgent) && /Apple Computer/.test(navigator.vendor) && (/Mobile\/\w+/.test(navigator.userAgent) || navigator.maxTouchPoints > 2);
var Outside = "-10000px";
var tooltipPlugin = _codemirror_view__WEBPACK_IMPORTED_MODULE_0__.ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    var _this = this;
    _classCallCheck(this, _class);
    this.view = view;
    this.inView = true;
    this.measureReq = {
      read: this.readMeasure.bind(this),
      write: this.writeMeasure.bind(this),
      key: this
    };
    this.input = view.state.facet(showTooltip);
    this.tooltips = this.input.filter(function (t) {
      return t;
    });
    this.tooltipViews = this.tooltips.map(function (tp) {
      return _this.createTooltip(tp);
    });
  }
  _createClass(_class, [{
    key: "update",
    value: function update(_update) {
      var input = _update.state.facet(showTooltip);
      if (input == this.input) {
        var _iterator = _createForOfIteratorHelper(this.tooltipViews),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var t = _step.value;
            if (t.update) t.update(_update);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else {
        var _tooltips = input.filter(function (x) {
          return x;
        });
        var views = [];
        for (var i = 0; i < _tooltips.length; i++) {
          var tip = _tooltips[i],
            known = -1;
          if (!tip) continue;
          for (var _i = 0; _i < this.tooltips.length; _i++) {
            var other = this.tooltips[_i];
            if (other && other.create == tip.create) known = _i;
          }
          if (known < 0) {
            views[i] = this.createTooltip(tip);
          } else {
            var tooltipView = views[i] = this.tooltipViews[known];
            if (tooltipView.update) tooltipView.update(_update);
          }
        }
        var _iterator2 = _createForOfIteratorHelper(this.tooltipViews),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var _t = _step2.value;
            if (views.indexOf(_t) < 0) _t.dom.remove();
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        this.input = input;
        this.tooltips = _tooltips;
        this.tooltipViews = views;
        this.maybeMeasure();
      }
    }
  }, {
    key: "createTooltip",
    value: function createTooltip(tooltip) {
      var tooltipView = tooltip.create(this.view);
      tooltipView.dom.classList.add("cm-tooltip");
      // FIXME drop this on the next breaking release
      if (tooltip["class"]) tooltipView.dom.classList.add(tooltip["class"]);
      tooltipView.dom.style.top = Outside;
      this.view.dom.appendChild(tooltipView.dom);
      if (tooltipView.mount) tooltipView.mount(this.view);
      return tooltipView;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _iterator3 = _createForOfIteratorHelper(this.tooltipViews),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var dom = _step3.value.dom;
          dom.remove();
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
    }
  }, {
    key: "readMeasure",
    value: function readMeasure() {
      var _this2 = this;
      return {
        editor: this.view.dom.getBoundingClientRect(),
        pos: this.tooltips.map(function (t) {
          return _this2.view.coordsAtPos(t.pos);
        }),
        size: this.tooltipViews.map(function (_ref) {
          var dom = _ref.dom;
          return dom.getBoundingClientRect();
        }),
        innerWidth: window.innerWidth,
        innerHeight: window.innerHeight
      };
    }
  }, {
    key: "writeMeasure",
    value: function writeMeasure(measured) {
      var editor = measured.editor;
      for (var i = 0; i < this.tooltipViews.length; i++) {
        var tooltip = this.tooltips[i],
          tView = this.tooltipViews[i],
          dom = tView.dom;
        var pos = measured.pos[i],
          size = measured.size[i];
        // Hide tooltips that are outside of the editor.
        if (!pos || pos.bottom <= editor.top || pos.top >= editor.bottom || pos.right <= editor.left || pos.left >= editor.right) {
          dom.style.top = Outside;
          continue;
        }
        var width = size.right - size.left,
          height = size.bottom - size.top;
        var left = this.view.textDirection == _codemirror_view__WEBPACK_IMPORTED_MODULE_0__.Direction.LTR ? Math.min(pos.left, measured.innerWidth - width) : Math.max(0, pos.left - width);
        var above = !!tooltip.above;
        if (!tooltip.strictSide && (above ? pos.top - (size.bottom - size.top) < 0 : pos.bottom + (size.bottom - size.top) > measured.innerHeight)) above = !above;
        if (ios) {
          dom.style.top = (above ? pos.top - height : pos.bottom) - editor.top + "px";
          dom.style.left = left - editor.left + "px";
          dom.style.position = "absolute";
        } else {
          dom.style.top = (above ? pos.top - height : pos.bottom) + "px";
          dom.style.left = left + "px";
        }
        dom.classList.toggle("cm-tooltip-above", above);
        dom.classList.toggle("cm-tooltip-below", !above);
        if (tView.positioned) tView.positioned();
      }
    }
  }, {
    key: "maybeMeasure",
    value: function maybeMeasure() {
      if (this.tooltips.length) {
        if (this.view.inView || this.inView) this.view.requestMeasure(this.measureReq);
        this.inView = this.view.inView;
      }
    }
  }]);
  return _class;
}(), {
  eventHandlers: {
    scroll: function scroll() {
      this.maybeMeasure();
    }
  }
});
var baseTheme = _codemirror_view__WEBPACK_IMPORTED_MODULE_0__.EditorView.baseTheme({
  ".cm-tooltip": {
    position: "fixed",
    zIndex: 100
  },
  "&light .cm-tooltip": {
    border: "1px solid #ddd",
    backgroundColor: "#f5f5f5"
  },
  "&dark .cm-tooltip": {
    backgroundColor: "#333338",
    color: "white"
  }
});
// FIXME backward-compat shim. Delete on next major version.
/**
@internal
*/
function tooltips() {
  return [];
}
/**
Behavior by which an extension can provide a tooltip to be shown.
*/
var showTooltip = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.Facet.define({
  enables: [tooltipPlugin, baseTheme]
});
var HoverTime = 750,
  HoverMaxDist = 6;
var HoverPlugin = /*#__PURE__*/function () {
  function HoverPlugin(view, source, field, setHover) {
    _classCallCheck(this, HoverPlugin);
    this.view = view;
    this.source = source;
    this.field = field;
    this.setHover = setHover;
    this.lastMouseMove = null;
    this.hoverTimeout = -1;
    this.restartTimeout = -1;
    this.pending = null;
    this.checkHover = this.checkHover.bind(this);
    view.dom.addEventListener("mouseleave", this.mouseleave = this.mouseleave.bind(this));
    view.dom.addEventListener("mousemove", this.mousemove = this.mousemove.bind(this));
  }
  _createClass(HoverPlugin, [{
    key: "update",
    value: function update() {
      var _this3 = this;
      if (this.pending) {
        this.pending = null;
        clearTimeout(this.restartTimeout);
        this.restartTimeout = setTimeout(function () {
          return _this3.startHover();
        }, 20);
      }
    }
  }, {
    key: "active",
    get: function get() {
      return this.view.state.field(this.field);
    }
  }, {
    key: "checkHover",
    value: function checkHover() {
      this.hoverTimeout = -1;
      if (this.active) return;
      var now = Date.now(),
        lastMove = this.lastMouseMove;
      if (now - lastMove.timeStamp < HoverTime) this.hoverTimeout = setTimeout(this.checkHover, HoverTime - (now - lastMove.timeStamp));else this.startHover();
    }
  }, {
    key: "startHover",
    value: function startHover() {
      var _this4 = this;
      var _a;
      clearTimeout(this.restartTimeout);
      var lastMove = this.lastMouseMove;
      var coords = {
        x: lastMove.clientX,
        y: lastMove.clientY
      };
      var pos = this.view.contentDOM.contains(lastMove.target) ? this.view.posAtCoords(coords) : null;
      if (pos == null) return;
      var posCoords = this.view.coordsAtPos(pos);
      if (posCoords == null || coords.y < posCoords.top || coords.y > posCoords.bottom || coords.x < posCoords.left - this.view.defaultCharacterWidth || coords.x > posCoords.right + this.view.defaultCharacterWidth) return;
      var bidi = this.view.bidiSpans(this.view.state.doc.lineAt(pos)).find(function (s) {
        return s.from <= pos && s.to >= pos;
      });
      var rtl = bidi && bidi.dir == _codemirror_view__WEBPACK_IMPORTED_MODULE_0__.Direction.RTL ? -1 : 1;
      var open = this.source(this.view, pos, coords.x < posCoords.left ? -rtl : rtl);
      if ((_a = open) === null || _a === void 0 ? void 0 : _a.then) {
        var pending = this.pending = {
          pos: pos
        };
        open.then(function (result) {
          if (_this4.pending == pending) {
            _this4.pending = null;
            if (result) _this4.view.dispatch({
              effects: _this4.setHover.of(result)
            });
          }
        }, function (e) {
          return (0,_codemirror_view__WEBPACK_IMPORTED_MODULE_0__.logException)(_this4.view.state, e, "hover tooltip");
        });
      } else if (open) {
        this.view.dispatch({
          effects: this.setHover.of(open)
        });
      }
    }
  }, {
    key: "mousemove",
    value: function mousemove(event) {
      var _a;
      this.lastMouseMove = event;
      if (this.hoverTimeout < 0) this.hoverTimeout = setTimeout(this.checkHover, HoverTime);
      var tooltip = this.active;
      if (tooltip && !isInTooltip(event.target) || this.pending) {
        var _ref2 = tooltip || this.pending,
          pos = _ref2.pos,
          end = (_a = tooltip === null || tooltip === void 0 ? void 0 : tooltip.end) !== null && _a !== void 0 ? _a : pos;
        if (pos == end ? this.view.posAtCoords({
          x: event.clientX,
          y: event.clientY
        }) != pos : !isOverRange(this.view, pos, end, event.clientX, event.clientY, HoverMaxDist)) {
          this.view.dispatch({
            effects: this.setHover.of(null)
          });
          this.pending = null;
        }
      }
    }
  }, {
    key: "mouseleave",
    value: function mouseleave() {
      clearTimeout(this.hoverTimeout);
      this.hoverTimeout = -1;
      if (this.active) this.view.dispatch({
        effects: this.setHover.of(null)
      });
    }
  }, {
    key: "destroy",
    value: function destroy() {
      clearTimeout(this.hoverTimeout);
      this.view.dom.removeEventListener("mouseleave", this.mouseleave);
      this.view.dom.removeEventListener("mousemove", this.mousemove);
    }
  }]);
  return HoverPlugin;
}();
function isInTooltip(elt) {
  for (var cur = elt; cur; cur = cur.parentNode) {
    if (cur.nodeType == 1 && cur.classList.contains("cm-tooltip")) return true;
  }
  return false;
}
function isOverRange(view, from, to, x, y, margin) {
  var range = document.createRange();
  var fromDOM = view.domAtPos(from),
    toDOM = view.domAtPos(to);
  range.setEnd(toDOM.node, toDOM.offset);
  range.setStart(fromDOM.node, fromDOM.offset);
  var rects = range.getClientRects();
  range.detach();
  for (var i = 0; i < rects.length; i++) {
    var rect = rects[i];
    var dist = Math.max(rect.top - y, y - rect.bottom, rect.left - x, x - rect.right);
    if (dist <= margin) return true;
  }
  return false;
}
/**
Enable a hover tooltip, which shows up when the pointer hovers
over ranges of text. The callback is called when the mouse hovers
over the document text. It should, if there is a tooltip
associated with position `pos` return the tooltip description
(either directly or in a promise). The `side` argument indicates
on which side of the position the pointer is—it will be -1 if the
pointer is before the position, 1 if after the position.
*/
function hoverTooltip(source) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var setHover = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateEffect.define();
  var hoverState = _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.StateField.define({
    create: function create() {
      return null;
    },
    update: function update(value, tr) {
      if (value && options.hideOnChange && (tr.docChanged || tr.selection)) return null;
      var _iterator4 = _createForOfIteratorHelper(tr.effects),
        _step4;
      try {
        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
          var effect = _step4.value;
          if (effect.is(setHover)) return effect.value;
        }
      } catch (err) {
        _iterator4.e(err);
      } finally {
        _iterator4.f();
      }
      if (value && tr.docChanged) {
        var newPos = tr.changes.mapPos(value.pos, -1, _codemirror_state__WEBPACK_IMPORTED_MODULE_1__.MapMode.TrackDel);
        if (newPos == null) return null;
        var copy = Object.assign(Object.create(null), value);
        copy.pos = newPos;
        if (value.end != null) copy.end = tr.changes.mapPos(value.end);
        return copy;
      }
      return value;
    },
    provide: function provide(f) {
      return showTooltip.from(f);
    }
  });
  return [hoverState, _codemirror_view__WEBPACK_IMPORTED_MODULE_0__.ViewPlugin.define(function (view) {
    return new HoverPlugin(view, source, hoverState, setHover);
  })];
}


/***/ }),

/***/ "./node_modules/@codemirror/view/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@codemirror/view/dist/index.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BidiSpan": () => (/* binding */ BidiSpan),
/* harmony export */   "BlockInfo": () => (/* binding */ BlockInfo),
/* harmony export */   "BlockType": () => (/* binding */ BlockType),
/* harmony export */   "Decoration": () => (/* binding */ Decoration),
/* harmony export */   "Direction": () => (/* binding */ Direction),
/* harmony export */   "EditorView": () => (/* binding */ EditorView),
/* harmony export */   "MatchDecorator": () => (/* binding */ MatchDecorator),
/* harmony export */   "PluginField": () => (/* binding */ PluginField),
/* harmony export */   "PluginFieldProvider": () => (/* binding */ PluginFieldProvider),
/* harmony export */   "Range": () => (/* reexport safe */ _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.Range),
/* harmony export */   "ViewPlugin": () => (/* binding */ ViewPlugin),
/* harmony export */   "ViewUpdate": () => (/* binding */ ViewUpdate),
/* harmony export */   "WidgetType": () => (/* binding */ WidgetType),
/* harmony export */   "__test": () => (/* binding */ __test),
/* harmony export */   "drawSelection": () => (/* binding */ drawSelection),
/* harmony export */   "highlightActiveLine": () => (/* binding */ highlightActiveLine),
/* harmony export */   "highlightSpecialChars": () => (/* binding */ highlightSpecialChars),
/* harmony export */   "keymap": () => (/* binding */ keymap),
/* harmony export */   "logException": () => (/* binding */ logException),
/* harmony export */   "placeholder": () => (/* binding */ placeholder),
/* harmony export */   "runScopeHandlers": () => (/* binding */ runScopeHandlers)
/* harmony export */ });
/* harmony import */ var _codemirror_state__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @codemirror/state */ "./node_modules/@codemirror/state/dist/index.js");
/* harmony import */ var _codemirror_text__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @codemirror/text */ "./node_modules/@codemirror/text/dist/index.js");
/* harmony import */ var style_mod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! style-mod */ "./node_modules/style-mod/src/style-mod.js");
/* harmony import */ var _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @codemirror/rangeset */ "./node_modules/@codemirror/rangeset/dist/index.js");
/* harmony import */ var w3c_keyname__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! w3c-keyname */ "./node_modules/w3c-keyname/index.es.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get.bind(); } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(arguments.length < 3 ? target : receiver); } return desc.value; }; } return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }






function getSelection(root) {
  return root.getSelection ? root.getSelection() : document.getSelection();
}
function contains(dom, node) {
  return node ? dom.contains(node.nodeType != 1 ? node.parentNode : node) : false;
}
function deepActiveElement() {
  var elt = document.activeElement;
  while (elt && elt.shadowRoot) {
    elt = elt.shadowRoot.activeElement;
  }
  return elt;
}
function hasSelection(dom, selection) {
  if (!selection.anchorNode) return false;
  try {
    // Firefox will raise 'permission denied' errors when accessing
    // properties of `sel.anchorNode` when it's in a generated CSS
    // element.
    return contains(dom, selection.anchorNode);
  } catch (_) {
    return false;
  }
}
function clientRectsFor(dom) {
  if (dom.nodeType == 3) return textRange(dom, 0, dom.nodeValue.length).getClientRects();else if (dom.nodeType == 1) return dom.getClientRects();else return [];
}
// Scans forward and backward through DOM positions equivalent to the
// given one to see if the two are in the same place (i.e. after a
// text node vs at the end of that text node)
function isEquivalentPosition(node, off, targetNode, targetOff) {
  return targetNode ? scanFor(node, off, targetNode, targetOff, -1) || scanFor(node, off, targetNode, targetOff, 1) : false;
}
function domIndex(node) {
  for (var index = 0;; index++) {
    node = node.previousSibling;
    if (!node) return index;
  }
}
function scanFor(node, off, targetNode, targetOff, dir) {
  for (;;) {
    if (node == targetNode && off == targetOff) return true;
    if (off == (dir < 0 ? 0 : maxOffset(node))) {
      if (node.nodeName == "DIV") return false;
      var parent = node.parentNode;
      if (!parent || parent.nodeType != 1) return false;
      off = domIndex(node) + (dir < 0 ? 0 : 1);
      node = parent;
    } else if (node.nodeType == 1) {
      node = node.childNodes[off + (dir < 0 ? -1 : 0)];
      if (node.nodeType == 1 && node.contentEditable == "false") return false;
      off = dir < 0 ? maxOffset(node) : 0;
    } else {
      return false;
    }
  }
}
function maxOffset(node) {
  return node.nodeType == 3 ? node.nodeValue.length : node.childNodes.length;
}
var Rect0 = {
  left: 0,
  right: 0,
  top: 0,
  bottom: 0
};
function flattenRect(rect, left) {
  var x = left ? rect.left : rect.right;
  return {
    left: x,
    right: x,
    top: rect.top,
    bottom: rect.bottom
  };
}
function windowRect(win) {
  return {
    left: 0,
    right: win.innerWidth,
    top: 0,
    bottom: win.innerHeight
  };
}
var ScrollSpace = 5;
function scrollRectIntoView(dom, rect) {
  var doc = dom.ownerDocument,
    win = doc.defaultView;
  for (var cur = dom.parentNode; cur;) {
    if (cur.nodeType == 1) {
      // Element
      var bounding = void 0,
        top = cur == document.body;
      if (top) {
        bounding = windowRect(win);
      } else {
        if (cur.scrollHeight <= cur.clientHeight && cur.scrollWidth <= cur.clientWidth) {
          cur = cur.parentNode;
          continue;
        }
        var _rect = cur.getBoundingClientRect();
        // Make sure scrollbar width isn't included in the rectangle
        bounding = {
          left: _rect.left,
          right: _rect.left + cur.clientWidth,
          top: _rect.top,
          bottom: _rect.top + cur.clientHeight
        };
      }
      var moveX = 0,
        moveY = 0;
      if (rect.top < bounding.top) moveY = -(bounding.top - rect.top + ScrollSpace);else if (rect.bottom > bounding.bottom) moveY = rect.bottom - bounding.bottom + ScrollSpace;
      if (rect.left < bounding.left) moveX = -(bounding.left - rect.left + ScrollSpace);else if (rect.right > bounding.right) moveX = rect.right - bounding.right + ScrollSpace;
      if (moveX || moveY) {
        if (top) {
          win.scrollBy(moveX, moveY);
        } else {
          if (moveY) {
            var start = cur.scrollTop;
            cur.scrollTop += moveY;
            moveY = cur.scrollTop - start;
          }
          if (moveX) {
            var _start = cur.scrollLeft;
            cur.scrollLeft += moveX;
            moveX = cur.scrollLeft - _start;
          }
          rect = {
            left: rect.left - moveX,
            top: rect.top - moveY,
            right: rect.right - moveX,
            bottom: rect.bottom - moveY
          };
        }
      }
      if (top) break;
      cur = cur.assignedSlot || cur.parentNode;
    } else if (cur.nodeType == 11) {
      // A shadow root
      cur = cur.host;
    } else {
      break;
    }
  }
}
var DOMSelection = /*#__PURE__*/function () {
  function DOMSelection() {
    _classCallCheck(this, DOMSelection);
    this.anchorNode = null;
    this.anchorOffset = 0;
    this.focusNode = null;
    this.focusOffset = 0;
  }
  _createClass(DOMSelection, [{
    key: "eq",
    value: function eq(domSel) {
      return this.anchorNode == domSel.anchorNode && this.anchorOffset == domSel.anchorOffset && this.focusNode == domSel.focusNode && this.focusOffset == domSel.focusOffset;
    }
  }, {
    key: "set",
    value: function set(domSel) {
      this.anchorNode = domSel.anchorNode;
      this.anchorOffset = domSel.anchorOffset;
      this.focusNode = domSel.focusNode;
      this.focusOffset = domSel.focusOffset;
    }
  }]);
  return DOMSelection;
}();
var preventScrollSupported = null;
// Feature-detects support for .focus({preventScroll: true}), and uses
// a fallback kludge when not supported.
function focusPreventScroll(dom) {
  if (dom.setActive) return dom.setActive(); // in IE
  if (preventScrollSupported) return dom.focus(preventScrollSupported);
  var stack = [];
  for (var cur = dom; cur; cur = cur.parentNode) {
    stack.push(cur, cur.scrollTop, cur.scrollLeft);
    if (cur == cur.ownerDocument) break;
  }
  dom.focus(preventScrollSupported == null ? {
    get preventScroll() {
      preventScrollSupported = {
        preventScroll: true
      };
      return true;
    }
  } : undefined);
  if (!preventScrollSupported) {
    preventScrollSupported = false;
    for (var i = 0; i < stack.length;) {
      var elt = stack[i++],
        top = stack[i++],
        left = stack[i++];
      if (elt.scrollTop != top) elt.scrollTop = top;
      if (elt.scrollLeft != left) elt.scrollLeft = left;
    }
  }
}
var scratchRange;
function textRange(node, from) {
  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : from;
  var range = scratchRange || (scratchRange = document.createRange());
  range.setEnd(node, to);
  range.setStart(node, from);
  return range;
}
function dispatchKey(elt, name, code) {
  var options = {
    key: name,
    code: name,
    keyCode: code,
    which: code,
    cancelable: true
  };
  var down = new KeyboardEvent("keydown", options);
  down.synthetic = true;
  elt.dispatchEvent(down);
  var up = new KeyboardEvent("keyup", options);
  up.synthetic = true;
  elt.dispatchEvent(up);
  return down.defaultPrevented || up.defaultPrevented;
}
var _plainTextSupported = null;
function contentEditablePlainTextSupported() {
  if (_plainTextSupported == null) {
    _plainTextSupported = false;
    var dummy = document.createElement("div");
    try {
      dummy.contentEditable = "plaintext-only";
      _plainTextSupported = dummy.contentEditable == "plaintext-only";
    } catch (_) {}
  }
  return _plainTextSupported;
}
var DOMPos = /*#__PURE__*/function () {
  function DOMPos(node, offset) {
    var precise = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
    _classCallCheck(this, DOMPos);
    this.node = node;
    this.offset = offset;
    this.precise = precise;
  }
  _createClass(DOMPos, null, [{
    key: "before",
    value: function before(dom, precise) {
      return new DOMPos(dom.parentNode, domIndex(dom), precise);
    }
  }, {
    key: "after",
    value: function after(dom, precise) {
      return new DOMPos(dom.parentNode, domIndex(dom) + 1, precise);
    }
  }]);
  return DOMPos;
}();
var none$3 = [];
var ContentView = /*#__PURE__*/function () {
  function ContentView() {
    _classCallCheck(this, ContentView);
    this.parent = null;
    this.dom = null;
    this.dirty = 2 /* Node */;
  }
  _createClass(ContentView, [{
    key: "editorView",
    get: function get() {
      if (!this.parent) throw new Error("Accessing view in orphan content view");
      return this.parent.editorView;
    }
  }, {
    key: "overrideDOMText",
    get: function get() {
      return null;
    }
  }, {
    key: "posAtStart",
    get: function get() {
      return this.parent ? this.parent.posBefore(this) : 0;
    }
  }, {
    key: "posAtEnd",
    get: function get() {
      return this.posAtStart + this.length;
    }
  }, {
    key: "posBefore",
    value: function posBefore(view) {
      var pos = this.posAtStart;
      var _iterator = _createForOfIteratorHelper(this.children),
        _step;
      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var child = _step.value;
          if (child == view) return pos;
          pos += child.length + child.breakAfter;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
      throw new RangeError("Invalid child in posBefore");
    }
  }, {
    key: "posAfter",
    value: function posAfter(view) {
      return this.posBefore(view) + view.length;
    }
    // Will return a rectangle directly before (when side < 0), after
    // (side > 0) or directly on (when the browser supports it) the
    // given position.
  }, {
    key: "coordsAt",
    value: function coordsAt(_pos, _side) {
      return null;
    }
  }, {
    key: "sync",
    value: function sync(track) {
      var _a;
      if (this.dirty & 2 /* Node */) {
        var parent = this.dom,
          pos = null;
        var _iterator2 = _createForOfIteratorHelper(this.children),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var child = _step2.value;
            if (child.dirty) {
              var _next = pos ? pos.nextSibling : parent.firstChild;
              if (!child.dom && _next && !((_a = ContentView.get(_next)) === null || _a === void 0 ? void 0 : _a.parent)) child.reuseDOM(_next);
              child.sync(track);
              child.dirty = 0 /* Not */;
            }

            if (track && track.node == parent && pos != child.dom) track.written = true;
            syncNodeInto(parent, pos, child.dom);
            pos = child.dom;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
        var next = pos ? pos.nextSibling : parent.firstChild;
        if (next && track && track.node == parent) track.written = true;
        while (next) {
          next = rm(next);
        }
      } else if (this.dirty & 1 /* Child */) {
        var _iterator3 = _createForOfIteratorHelper(this.children),
          _step3;
        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var _child = _step3.value;
            if (_child.dirty) {
              _child.sync(track);
              _child.dirty = 0 /* Not */;
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }
  }, {
    key: "reuseDOM",
    value: function reuseDOM(_dom) {
      return false;
    }
  }, {
    key: "localPosFromDOM",
    value: function localPosFromDOM(node, offset) {
      var after;
      if (node == this.dom) {
        after = this.dom.childNodes[offset];
      } else {
        var bias = maxOffset(node) == 0 ? 0 : offset == 0 ? -1 : 1;
        for (;;) {
          var parent = node.parentNode;
          if (parent == this.dom) break;
          if (bias == 0 && parent.firstChild != parent.lastChild) {
            if (node == parent.firstChild) bias = -1;else bias = 1;
          }
          node = parent;
        }
        if (bias < 0) after = node;else after = node.nextSibling;
      }
      if (after == this.dom.firstChild) return 0;
      while (after && !ContentView.get(after)) {
        after = after.nextSibling;
      }
      if (!after) return this.length;
      for (var i = 0, pos = 0;; i++) {
        var child = this.children[i];
        if (child.dom == after) return pos;
        pos += child.length + child.breakAfter;
      }
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround(from, to) {
      var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
      var fromI = -1,
        fromStart = -1,
        toI = -1,
        toEnd = -1;
      for (var i = 0, pos = offset, prevEnd = offset; i < this.children.length; i++) {
        var child = this.children[i],
          end = pos + child.length;
        if (pos < from && end > to) return child.domBoundsAround(from, to, pos);
        if (end >= from && fromI == -1) {
          fromI = i;
          fromStart = pos;
        }
        if (pos > to && child.dom.parentNode == this.dom) {
          toI = i;
          toEnd = prevEnd;
          break;
        }
        prevEnd = end;
        pos = end + child.breakAfter;
      }
      return {
        from: fromStart,
        to: toEnd < 0 ? offset + this.length : toEnd,
        startDOM: (fromI ? this.children[fromI - 1].dom.nextSibling : null) || this.dom.firstChild,
        endDOM: toI < this.children.length && toI >= 0 ? this.children[toI].dom : null
      };
    }
  }, {
    key: "markDirty",
    value: function markDirty() {
      var andParent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      if (this.dirty & 2 /* Node */) return;
      this.dirty |= 2 /* Node */;
      this.markParentsDirty(andParent);
    }
  }, {
    key: "markParentsDirty",
    value: function markParentsDirty(childList) {
      for (var parent = this.parent; parent; parent = parent.parent) {
        if (childList) parent.dirty |= 2 /* Node */;
        if (parent.dirty & 1 /* Child */) return;
        parent.dirty |= 1 /* Child */;
        childList = false;
      }
    }
  }, {
    key: "setParent",
    value: function setParent(parent) {
      if (this.parent != parent) {
        this.parent = parent;
        if (this.dirty) this.markParentsDirty(true);
      }
    }
  }, {
    key: "setDOM",
    value: function setDOM(dom) {
      this.dom = dom;
      dom.cmView = this;
    }
  }, {
    key: "rootView",
    get: function get() {
      for (var v = this;;) {
        var parent = v.parent;
        if (!parent) return v;
        v = parent;
      }
    }
  }, {
    key: "replaceChildren",
    value: function replaceChildren(from, to) {
      var _this$children;
      var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : none$3;
      this.markDirty();
      for (var i = from; i < to; i++) {
        var child = this.children[i];
        if (child.parent == this) child.parent = null;
      }
      (_this$children = this.children).splice.apply(_this$children, [from, to - from].concat(_toConsumableArray(children)));
      for (var _i = 0; _i < children.length; _i++) {
        children[_i].setParent(this);
      }
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation(_rec) {
      return false;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent(_event) {
      return false;
    }
  }, {
    key: "childCursor",
    value: function childCursor() {
      var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
      return new ChildCursor(this.children, pos, this.children.length);
    }
  }, {
    key: "childPos",
    value: function childPos(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      return this.childCursor().findPos(pos, bias);
    }
  }, {
    key: "toString",
    value: function toString() {
      var name = this.constructor.name.replace("View", "");
      return name + (this.children.length ? "(" + this.children.join() + ")" : this.length ? "[" + (name == "Text" ? this.text : this.length) + "]" : "") + (this.breakAfter ? "#" : "");
    }
  }], [{
    key: "get",
    value: function get(node) {
      return node.cmView;
    }
  }]);
  return ContentView;
}();
ContentView.prototype.breakAfter = 0;
// Remove a DOM node and return its next sibling.
function rm(dom) {
  var next = dom.nextSibling;
  dom.parentNode.removeChild(dom);
  return next;
}
function syncNodeInto(parent, after, dom) {
  var next = after ? after.nextSibling : parent.firstChild;
  if (dom.parentNode == parent) while (next != dom) {
    next = rm(next);
  } else parent.insertBefore(dom, next);
}
var ChildCursor = /*#__PURE__*/function () {
  function ChildCursor(children, pos, i) {
    _classCallCheck(this, ChildCursor);
    this.children = children;
    this.pos = pos;
    this.i = i;
    this.off = 0;
  }
  _createClass(ChildCursor, [{
    key: "findPos",
    value: function findPos(pos) {
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      for (;;) {
        if (pos > this.pos || pos == this.pos && (bias > 0 || this.i == 0 || this.children[this.i - 1].breakAfter)) {
          this.off = pos - this.pos;
          return this;
        }
        var next = this.children[--this.i];
        this.pos -= next.length + next.breakAfter;
      }
    }
  }]);
  return ChildCursor;
}();
var _ref = typeof navigator != "undefined" ? [navigator, document] : [{
    userAgent: "",
    vendor: "",
    platform: ""
  }, {
    documentElement: {
      style: {}
    }
  }],
  _ref2 = _slicedToArray(_ref, 2),
  nav = _ref2[0],
  doc = _ref2[1];
var ie_edge = /*@__PURE__*/ /Edge\/(\d+)/.exec(nav.userAgent);
var ie_upto10 = /*@__PURE__*/ /MSIE \d/.test(nav.userAgent);
var ie_11up = /*@__PURE__*/ /Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(nav.userAgent);
var ie = !!(ie_upto10 || ie_11up || ie_edge);
var gecko = !ie && /*@__PURE__*/ /gecko\/(\d+)/i.test(nav.userAgent);
var chrome = !ie && /*@__PURE__*/ /Chrome\/(\d+)/.exec(nav.userAgent);
var webkit = ("webkitFontSmoothing" in doc.documentElement.style);
var safari = !ie && /*@__PURE__*/ /Apple Computer/.test(nav.vendor);
var browser = {
  mac: /*@__PURE__*/ /Mac/.test(nav.platform),
  ie: ie,
  ie_version: ie_upto10 ? doc.documentMode || 6 : ie_11up ? +ie_11up[1] : ie_edge ? +ie_edge[1] : 0,
  gecko: gecko,
  gecko_version: gecko ? +( /*@__PURE__*/ /Firefox\/(\d+)/.exec(nav.userAgent) || [0, 0])[1] : 0,
  chrome: !!chrome,
  chrome_version: chrome ? +chrome[1] : 0,
  ios: safari && ( /*@__PURE__*/ /Mobile\/\w+/.test(nav.userAgent) || nav.maxTouchPoints > 2),
  android: /*@__PURE__*/ /Android\b/.test(nav.userAgent),
  webkit: webkit,
  safari: safari,
  webkit_version: webkit ? +( /*@__PURE__*/ /\bAppleWebKit\/(\d+)/.exec(navigator.userAgent) || [0, 0])[1] : 0,
  tabSize: doc.documentElement.style.tabSize != null ? "tab-size" : "-moz-tab-size"
};
var none$2 = [];
var InlineView = /*#__PURE__*/function (_ContentView) {
  _inherits(InlineView, _ContentView);
  var _super = _createSuper(InlineView);
  function InlineView() {
    _classCallCheck(this, InlineView);
    return _super.apply(this, arguments);
  }
  _createClass(InlineView, [{
    key: "become",
    value:
    /**
    Return true when this view is equivalent to `other` and can take
    on its role.
    */
    function become(_other) {
      return false;
    }
    // When this is a zero-length view with a side, this should return a
    // negative number to indicate it is before its position, or a
    // positive number when after its position.
  }, {
    key: "getSide",
    value: function getSide() {
      return 0;
    }
  }]);
  return InlineView;
}(ContentView);
InlineView.prototype.children = none$2;
var MaxJoinLen = 256;
var TextView = /*#__PURE__*/function (_InlineView) {
  _inherits(TextView, _InlineView);
  var _super2 = _createSuper(TextView);
  function TextView(text) {
    var _this;
    _classCallCheck(this, TextView);
    _this = _super2.call(this);
    _this.text = text;
    return _this;
  }
  _createClass(TextView, [{
    key: "length",
    get: function get() {
      return this.text.length;
    }
  }, {
    key: "createDOM",
    value: function createDOM(textDOM) {
      this.setDOM(textDOM || document.createTextNode(this.text));
    }
  }, {
    key: "sync",
    value: function sync(track) {
      if (!this.dom) this.createDOM();
      if (this.dom.nodeValue != this.text) {
        if (track && track.node == this.dom) track.written = true;
        this.dom.nodeValue = this.text;
      }
    }
  }, {
    key: "reuseDOM",
    value: function reuseDOM(dom) {
      if (dom.nodeType != 3) return false;
      this.createDOM(dom);
      return true;
    }
  }, {
    key: "merge",
    value: function merge(from, to, source) {
      if (source && (!(source instanceof TextView) || this.length - (to - from) + source.length > MaxJoinLen)) return false;
      this.text = this.text.slice(0, from) + (source ? source.text : "") + this.text.slice(to);
      this.markDirty();
      return true;
    }
  }, {
    key: "slice",
    value: function slice(from) {
      return new TextView(this.text.slice(from));
    }
  }, {
    key: "localPosFromDOM",
    value: function localPosFromDOM(node, offset) {
      return node == this.dom ? offset : offset ? this.text.length : 0;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return new DOMPos(this.dom, pos);
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround(_from, _to, offset) {
      return {
        from: offset,
        to: offset + this.length,
        startDOM: this.dom,
        endDOM: this.dom.nextSibling
      };
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      return textCoords(this.dom, pos, side);
    }
  }]);
  return TextView;
}(InlineView);
var MarkView = /*#__PURE__*/function (_InlineView2) {
  _inherits(MarkView, _InlineView2);
  var _super3 = _createSuper(MarkView);
  function MarkView(mark) {
    var _this2;
    var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    _classCallCheck(this, MarkView);
    _this2 = _super3.call(this);
    _this2.mark = mark;
    _this2.children = children;
    _this2.length = length;
    var _iterator4 = _createForOfIteratorHelper(children),
      _step4;
    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var ch = _step4.value;
        ch.setParent(_assertThisInitialized(_this2));
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
    return _this2;
  }
  _createClass(MarkView, [{
    key: "createDOM",
    value: function createDOM() {
      var dom = document.createElement(this.mark.tagName);
      if (this.mark["class"]) dom.className = this.mark["class"];
      if (this.mark.attrs) for (var name in this.mark.attrs) {
        dom.setAttribute(name, this.mark.attrs[name]);
      }
      this.setDOM(dom);
    }
  }, {
    key: "sync",
    value: function sync(track) {
      if (!this.dom) this.createDOM();
      _get(_getPrototypeOf(MarkView.prototype), "sync", this).call(this, track);
    }
  }, {
    key: "merge",
    value: function merge(from, to, source, openStart, openEnd) {
      if (source && (!(source instanceof MarkView && source.mark.eq(this.mark)) || from && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
      mergeInlineChildren(this, from, to, source ? source.children : none$2, openStart - 1, openEnd - 1);
      this.markDirty();
      return true;
    }
  }, {
    key: "slice",
    value: function slice(from) {
      return new MarkView(this.mark, sliceInlineChildren(this.children, from), this.length - from);
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return inlineDOMAtPos(this.dom, this.children, pos);
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      return coordsInChildren(this, pos, side);
    }
  }]);
  return MarkView;
}(InlineView);
function textCoords(text, pos, side) {
  var length = text.nodeValue.length;
  if (pos > length) pos = length;
  var from = pos,
    to = pos,
    flatten = 0;
  if (pos == 0 && side < 0 || pos == length && side >= 0) {
    if (!(browser.chrome || browser.gecko)) {
      // These browsers reliably return valid rectangles for empty ranges
      if (pos) {
        from--;
        flatten = 1;
      } // FIXME this is wrong in RTL text
      else {
        to++;
        flatten = -1;
      }
    }
  } else {
    if (side < 0) from--;else to++;
  }
  var rects = textRange(text, from, to).getClientRects();
  if (!rects.length) return Rect0;
  var rect = rects[(flatten ? flatten < 0 : side >= 0) ? 0 : rects.length - 1];
  if (browser.safari && !flatten && rect.width == 0) rect = Array.prototype.find.call(rects, function (r) {
    return r.width;
  }) || rect;
  return flatten ? flattenRect(rect, flatten < 0) : rect;
}
// Also used for collapsed ranges that don't have a placeholder widget!
var WidgetView = /*#__PURE__*/function (_InlineView3) {
  _inherits(WidgetView, _InlineView3);
  var _super4 = _createSuper(WidgetView);
  function WidgetView(widget, length, side) {
    var _this3;
    _classCallCheck(this, WidgetView);
    _this3 = _super4.call(this);
    _this3.widget = widget;
    _this3.length = length;
    _this3.side = side;
    return _this3;
  }
  _createClass(WidgetView, [{
    key: "slice",
    value: function slice(from) {
      return WidgetView.create(this.widget, this.length - from, this.side);
    }
  }, {
    key: "sync",
    value: function sync() {
      if (!this.dom || !this.widget.updateDOM(this.dom)) {
        this.setDOM(this.widget.toDOM(this.editorView));
        this.dom.contentEditable = "false";
      }
    }
  }, {
    key: "getSide",
    value: function getSide() {
      return this.side;
    }
  }, {
    key: "merge",
    value: function merge(from, to, source, openStart, openEnd) {
      if (source && (!(source instanceof WidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
      this.length = from + (source ? source.length : 0) + (this.length - to);
      return true;
    }
  }, {
    key: "become",
    value: function become(other) {
      if (other.length == this.length && other instanceof WidgetView && other.side == this.side) {
        if (this.widget.constructor == other.widget.constructor) {
          if (!this.widget.eq(other.widget)) this.markDirty(true);
          this.widget = other.widget;
          return true;
        }
      }
      return false;
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation() {
      return true;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
  }, {
    key: "overrideDOMText",
    get: function get() {
      if (this.length == 0) return _codemirror_text__WEBPACK_IMPORTED_MODULE_3__.Text.empty;
      var top = this;
      while (top.parent) {
        top = top.parent;
      }
      var view = top.editorView,
        text = view && view.state.doc,
        start = this.posAtStart;
      return text ? text.slice(start, start + this.length) : _codemirror_text__WEBPACK_IMPORTED_MODULE_3__.Text.empty;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround() {
      return null;
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      var rects = this.dom.getClientRects(),
        rect = null;
      if (!rects.length) return Rect0;
      for (var i = pos > 0 ? rects.length - 1 : 0;; i += pos > 0 ? -1 : 1) {
        rect = rects[i];
        if (pos > 0 ? i == 0 : i == rects.length - 1 || rect.top < rect.bottom) break;
      }
      return pos == 0 && side > 0 || pos == this.length && side <= 0 ? rect : flattenRect(rect, pos == 0);
    }
  }], [{
    key: "create",
    value: function create(widget, length, side) {
      return new (widget.customView || WidgetView)(widget, length, side);
    }
  }]);
  return WidgetView;
}(InlineView);
var CompositionView = /*#__PURE__*/function (_WidgetView) {
  _inherits(CompositionView, _WidgetView);
  var _super5 = _createSuper(CompositionView);
  function CompositionView() {
    _classCallCheck(this, CompositionView);
    return _super5.apply(this, arguments);
  }
  _createClass(CompositionView, [{
    key: "domAtPos",
    value: function domAtPos(pos) {
      return new DOMPos(this.widget.text, pos);
    }
  }, {
    key: "sync",
    value: function sync() {
      if (!this.dom) this.setDOM(this.widget.toDOM());
    }
  }, {
    key: "localPosFromDOM",
    value: function localPosFromDOM(node, offset) {
      return !offset ? 0 : node.nodeType == 3 ? Math.min(offset, this.length) : this.length;
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation() {
      return false;
    }
  }, {
    key: "overrideDOMText",
    get: function get() {
      return null;
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      return textCoords(this.widget.text, pos, side);
    }
  }]);
  return CompositionView;
}(WidgetView);
function mergeInlineChildren(parent, from, to, elts, openStart, openEnd) {
  var cur = parent.childCursor();
  var _cur$findPos = cur.findPos(to, 1),
    toI = _cur$findPos.i,
    toOff = _cur$findPos.off;
  var _cur$findPos2 = cur.findPos(from, -1),
    fromI = _cur$findPos2.i,
    fromOff = _cur$findPos2.off;
  var dLen = from - to;
  var _iterator5 = _createForOfIteratorHelper(elts),
    _step5;
  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var view = _step5.value;
      dLen += view.length;
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
  parent.length += dLen;
  var children = parent.children;
  // Both from and to point into the same text view
  if (fromI == toI && fromOff) {
    var start = children[fromI];
    // Maybe just update that view and be done
    if (elts.length == 1 && start.merge(fromOff, toOff, elts[0], openStart, openEnd)) return;
    if (elts.length == 0) {
      start.merge(fromOff, toOff, null, openStart, openEnd);
      return;
    }
    // Otherwise split it, so that we don't have to worry about aliasing front/end afterwards
    var after = start.slice(toOff);
    if (after.merge(0, 0, elts[elts.length - 1], 0, openEnd)) elts[elts.length - 1] = after;else elts.push(after);
    toI++;
    openEnd = toOff = 0;
  }
  // Make sure start and end positions fall on node boundaries
  // (fromOff/toOff are no longer used after this), and that if the
  // start or end of the elts can be merged with adjacent nodes,
  // this is done
  if (toOff) {
    var end = children[toI];
    if (elts.length && end.merge(0, toOff, elts[elts.length - 1], 0, openEnd)) {
      elts.pop();
      openEnd = elts.length ? 0 : openStart;
    } else {
      end.merge(0, toOff, null, 0, 0);
    }
  } else if (toI < children.length && elts.length && children[toI].merge(0, 0, elts[elts.length - 1], 0, openEnd)) {
    elts.pop();
    openEnd = elts.length ? 0 : openStart;
  }
  if (fromOff) {
    var _start2 = children[fromI];
    if (elts.length && _start2.merge(fromOff, _start2.length, elts[0], openStart, 0)) {
      elts.shift();
      openStart = elts.length ? 0 : openEnd;
    } else {
      _start2.merge(fromOff, _start2.length, null, 0, 0);
    }
    fromI++;
  } else if (fromI && elts.length) {
    var _end = children[fromI - 1];
    if (_end.merge(_end.length, _end.length, elts[0], openStart, 0)) {
      elts.shift();
      openStart = elts.length ? 0 : openEnd;
    }
  }
  // Then try to merge any mergeable nodes at the start and end of
  // the changed range
  while (fromI < toI && elts.length && children[toI - 1].become(elts[elts.length - 1])) {
    elts.pop();
    toI--;
    openEnd = elts.length ? 0 : openStart;
  }
  while (fromI < toI && elts.length && children[fromI].become(elts[0])) {
    elts.shift();
    fromI++;
    openStart = elts.length ? 0 : openEnd;
  }
  if (!elts.length && fromI && toI < children.length && openStart && openEnd && children[toI].merge(0, 0, children[fromI - 1], openStart, openEnd)) fromI--;
  // And if anything remains, splice the child array to insert the new elts
  if (elts.length || fromI != toI) parent.replaceChildren(fromI, toI, elts);
}
function sliceInlineChildren(children, from) {
  var result = [],
    off = 0;
  var _iterator6 = _createForOfIteratorHelper(children),
    _step6;
  try {
    for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
      var elt = _step6.value;
      var end = off + elt.length;
      if (end > from) result.push(off < from ? elt.slice(from - off) : elt);
      off = end;
    }
  } catch (err) {
    _iterator6.e(err);
  } finally {
    _iterator6.f();
  }
  return result;
}
function inlineDOMAtPos(dom, children, pos) {
  var i = 0;
  for (var off = 0; i < children.length; i++) {
    var child = children[i],
      end = off + child.length;
    if (end == off && child.getSide() <= 0) continue;
    if (pos > off && pos < end && child.dom.parentNode == dom) return child.domAtPos(pos - off);
    if (pos <= off) break;
    off = end;
  }
  for (; i > 0; i--) {
    var before = children[i - 1].dom;
    if (before.parentNode == dom) return DOMPos.after(before);
  }
  return new DOMPos(dom, 0);
}
// Assumes `view`, if a mark view, has precisely 1 child.
function joinInlineInto(parent, view, open) {
  var last,
    children = parent.children;
  if (open > 0 && view instanceof MarkView && children.length && (last = children[children.length - 1]) instanceof MarkView && last.mark.eq(view.mark)) {
    joinInlineInto(last, view.children[0], open - 1);
  } else {
    children.push(view);
    view.setParent(parent);
  }
  parent.length += view.length;
}
function coordsInChildren(view, pos, side) {
  for (var off = 0, i = 0; i < view.children.length; i++) {
    var child = view.children[i],
      end = off + child.length;
    if (end == off && child.getSide() <= 0) continue;
    if (side <= 0 || end == view.length ? end >= pos : end > pos) return child.coordsAt(pos - off, side);
    off = end;
  }
  var last = view.dom.lastChild;
  if (!last) return view.dom.getBoundingClientRect();
  var rects = clientRectsFor(last);
  return rects[rects.length - 1];
}
function combineAttrs(source, target) {
  for (var name in source) {
    if (name == "class" && target["class"]) target["class"] += " " + source["class"];else if (name == "style" && target.style) target.style += ";" + source.style;else target[name] = source[name];
  }
  return target;
}
function attrsEq(a, b) {
  if (a == b) return true;
  if (!a || !b) return false;
  var keysA = Object.keys(a),
    keysB = Object.keys(b);
  if (keysA.length != keysB.length) return false;
  for (var _i2 = 0, _keysA = keysA; _i2 < _keysA.length; _i2++) {
    var key = _keysA[_i2];
    if (keysB.indexOf(key) == -1 || a[key] !== b[key]) return false;
  }
  return true;
}
function _updateAttrs(dom, prev, attrs) {
  if (prev) for (var name in prev) {
    if (!(attrs && name in attrs)) dom.removeAttribute(name);
  }
  if (attrs) for (var _name in attrs) {
    if (!(prev && prev[_name] == attrs[_name])) dom.setAttribute(_name, attrs[_name]);
  }
}

/**
Widgets added to the content are described by subclasses of this
class. Using a description object like that makes it possible to
delay creating of the DOM structure for a widget until it is
needed, and to avoid redrawing widgets even when the decorations
that define them are recreated.
*/
var WidgetType = /*#__PURE__*/function () {
  function WidgetType() {
    _classCallCheck(this, WidgetType);
  }
  _createClass(WidgetType, [{
    key: "eq",
    value:
    /**
    Compare this instance to another instance of the same type.
    (TypeScript can't express this, but only instances of the same
    specific class will be passed to this method.) This is used to
    avoid redrawing widgets when they are replaced by a new
    decoration of the same type. The default implementation just
    returns `false`, which will cause new instances of the widget to
    always be redrawn.
    */
    function eq(_widget) {
      return false;
    }
    /**
    Update a DOM element created by a widget of the same type (but
    different, non-`eq` content) to reflect this widget. May return
    true to indicate that it could update, false to indicate it
    couldn't (in which case the widget will be redrawn). The default
    implementation just returns false.
    */
  }, {
    key: "updateDOM",
    value: function updateDOM(_dom) {
      return false;
    }
    /**
    @internal
    */
  }, {
    key: "compare",
    value: function compare(other) {
      return this == other || this.constructor == other.constructor && this.eq(other);
    }
    /**
    The estimated height this widget will have, to be used when
    estimating the height of content that hasn't been drawn. May
    return -1 to indicate you don't know. The default implementation
    returns -1.
    */
  }, {
    key: "estimatedHeight",
    get: function get() {
      return -1;
    }
    /**
    Can be used to configure which kinds of events inside the widget
    should be ignored by the editor. The default is to ignore all
    events.
    */
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent(_event) {
      return true;
    }
    /**
    / @internal
    */
  }, {
    key: "customView",
    get: function get() {
      return null;
    }
  }]);
  return WidgetType;
}(); /**
     The different types of blocks that can occur in an editor view.
     */
var BlockType = /*@__PURE__*/function (BlockType) {
  /**
  A line of text.
  */
  BlockType[BlockType["Text"] = 0] = "Text";
  /**
  A block widget associated with the position after it.
  */
  BlockType[BlockType["WidgetBefore"] = 1] = "WidgetBefore";
  /**
  A block widget associated with the position before it.
  */
  BlockType[BlockType["WidgetAfter"] = 2] = "WidgetAfter";
  /**
  A block widget [replacing](https://codemirror.net/6/docs/ref/#view.Decoration^replace) a range of content.
  */
  BlockType[BlockType["WidgetRange"] = 3] = "WidgetRange";
  return BlockType;
}(BlockType || (BlockType = {}));
/**
A decoration provides information on how to draw or style a piece
of content. You'll usually use it wrapped in a
[`Range`](https://codemirror.net/6/docs/ref/#rangeset.Range), which adds a start and end position.
*/
var Decoration = /*#__PURE__*/function (_RangeValue) {
  _inherits(Decoration, _RangeValue);
  var _super6 = _createSuper(Decoration);
  /**
  @internal
  */
  function Decoration(
  /**
  @internal
  */
  startSide,
  /**
  @internal
  */
  endSide,
  /**
  @internal
  */
  widget,
  /**
  The config object used to create this decoration. You can
  include additional properties in there to store metadata about
  your decoration.
  */
  spec) {
    var _this4;
    _classCallCheck(this, Decoration);
    _this4 = _super6.call(this);
    _this4.startSide = startSide;
    _this4.endSide = endSide;
    _this4.widget = widget;
    _this4.spec = spec;
    return _this4;
  }
  /**
  @internal
  */
  _createClass(Decoration, [{
    key: "heightRelevant",
    get: function get() {
      return false;
    }
    /**
    Create a mark decoration, which influences the styling of the
    content in its range. Nested mark decorations will cause nested
    DOM elements to be created. Nesting order is determined by
    precedence of the [facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations) or
    (below the facet-provided decorations) [view
    plugin](https://codemirror.net/6/docs/ref/#view.PluginSpec.decorations). Such elements are split
    on line boundaries and on the boundaries of higher-precedence
    decorations.
    */
  }, {
    key: "hasHeight",
    value:
    /**
    @internal
    */
    function hasHeight() {
      return this.widget ? this.widget.estimatedHeight > -1 : false;
    }
  }], [{
    key: "mark",
    value: function mark(spec) {
      return new MarkDecoration(spec);
    }
    /**
    Create a widget decoration, which adds an element at the given
    position.
    */
  }, {
    key: "widget",
    value: function widget(spec) {
      var side = spec.side || 0;
      if (spec.block) side += (200000000 /* BigBlock */ + 1) * (side > 0 ? 1 : -1);
      return new PointDecoration(spec, side, side, !!spec.block, spec.widget || null, false);
    }
    /**
    Create a replace decoration which replaces the given range with
    a widget, or simply hides it.
    */
  }, {
    key: "replace",
    value: function replace(spec) {
      var block = !!spec.block;
      var _getInclusive = getInclusive(spec),
        start = _getInclusive.start,
        end = _getInclusive.end;
      var startSide = block ? -200000000 /* BigBlock */ * (start ? 2 : 1) : 100000000 /* BigInline */ * (start ? -1 : 1);
      var endSide = block ? 200000000 /* BigBlock */ * (end ? 2 : 1) : 100000000 /* BigInline */ * (end ? 1 : -1);
      return new PointDecoration(spec, startSide, endSide, block, spec.widget || null, true);
    }
    /**
    Create a line decoration, which can add DOM attributes to the
    line starting at the given position.
    */
  }, {
    key: "line",
    value: function line(spec) {
      return new LineDecoration(spec);
    }
    /**
    Build a [`DecorationSet`](https://codemirror.net/6/docs/ref/#view.DecorationSet) from the given
    decorated range or ranges. If the ranges aren't already sorted,
    pass `true` for `sort` to make the library sort them for you.
    */
  }, {
    key: "set",
    value: function set(of) {
      var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      return _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeSet.of(of, sort);
    }
  }]);
  return Decoration;
}(_codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeValue); /**
               The empty set of decorations.
               */
Decoration.none = _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeSet.empty;
var MarkDecoration = /*#__PURE__*/function (_Decoration) {
  _inherits(MarkDecoration, _Decoration);
  var _super7 = _createSuper(MarkDecoration);
  function MarkDecoration(spec) {
    var _this5;
    _classCallCheck(this, MarkDecoration);
    var _getInclusive2 = getInclusive(spec),
      start = _getInclusive2.start,
      end = _getInclusive2.end;
    _this5 = _super7.call(this, 100000000 /* BigInline */ * (start ? -1 : 1), 100000000 /* BigInline */ * (end ? 1 : -1), null, spec);
    _this5.tagName = spec.tagName || "span";
    _this5["class"] = spec["class"] || "";
    _this5.attrs = spec.attributes || null;
    return _this5;
  }
  _createClass(MarkDecoration, [{
    key: "eq",
    value: function eq(other) {
      return this == other || other instanceof MarkDecoration && this.tagName == other.tagName && this["class"] == other["class"] && attrsEq(this.attrs, other.attrs);
    }
  }, {
    key: "range",
    value: function range(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      if (from >= to) throw new RangeError("Mark decorations may not be empty");
      return _get(_getPrototypeOf(MarkDecoration.prototype), "range", this).call(this, from, to);
    }
  }]);
  return MarkDecoration;
}(Decoration);
MarkDecoration.prototype.point = false;
var LineDecoration = /*#__PURE__*/function (_Decoration2) {
  _inherits(LineDecoration, _Decoration2);
  var _super8 = _createSuper(LineDecoration);
  function LineDecoration(spec) {
    _classCallCheck(this, LineDecoration);
    return _super8.call(this, -100000000 /* BigInline */, -100000000 /* BigInline */, null, spec);
  }
  _createClass(LineDecoration, [{
    key: "eq",
    value: function eq(other) {
      return other instanceof LineDecoration && attrsEq(this.spec.attributes, other.spec.attributes);
    }
  }, {
    key: "range",
    value: function range(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      if (to != from) throw new RangeError("Line decoration ranges must be zero-length");
      return _get(_getPrototypeOf(LineDecoration.prototype), "range", this).call(this, from, to);
    }
  }]);
  return LineDecoration;
}(Decoration);
LineDecoration.prototype.mapMode = _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.MapMode.TrackBefore;
LineDecoration.prototype.point = true;
var PointDecoration = /*#__PURE__*/function (_Decoration3) {
  _inherits(PointDecoration, _Decoration3);
  var _super9 = _createSuper(PointDecoration);
  function PointDecoration(spec, startSide, endSide, block, widget, isReplace) {
    var _this6;
    _classCallCheck(this, PointDecoration);
    _this6 = _super9.call(this, startSide, endSide, widget, spec);
    _this6.block = block;
    _this6.isReplace = isReplace;
    _this6.mapMode = !block ? _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.MapMode.TrackDel : startSide < 0 ? _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.MapMode.TrackBefore : _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.MapMode.TrackAfter;
    return _this6;
  }
  // Only relevant when this.block == true
  _createClass(PointDecoration, [{
    key: "type",
    get: function get() {
      return this.startSide < this.endSide ? BlockType.WidgetRange : this.startSide < 0 ? BlockType.WidgetBefore : BlockType.WidgetAfter;
    }
  }, {
    key: "heightRelevant",
    get: function get() {
      return this.block || !!this.widget && this.widget.estimatedHeight >= 5;
    }
  }, {
    key: "eq",
    value: function eq(other) {
      return other instanceof PointDecoration && widgetsEq(this.widget, other.widget) && this.block == other.block && this.startSide == other.startSide && this.endSide == other.endSide;
    }
  }, {
    key: "range",
    value: function range(from) {
      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;
      if (this.isReplace && (from > to || from == to && this.startSide > 0 && this.endSide < 0)) throw new RangeError("Invalid range for replacement decoration");
      if (!this.isReplace && to != from) throw new RangeError("Widget decorations can only have zero-length ranges");
      return _get(_getPrototypeOf(PointDecoration.prototype), "range", this).call(this, from, to);
    }
  }]);
  return PointDecoration;
}(Decoration);
PointDecoration.prototype.point = true;
function getInclusive(spec) {
  var start = spec.inclusiveStart,
    end = spec.inclusiveEnd;
  if (start == null) start = spec.inclusive;
  if (end == null) end = spec.inclusive;
  return {
    start: start || false,
    end: end || false
  };
}
function widgetsEq(a, b) {
  return a == b || !!(a && b && a.compare(b));
}
function addRange(from, to, ranges) {
  var margin = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var last = ranges.length - 1;
  if (last >= 0 && ranges[last] + margin > from) ranges[last] = Math.max(ranges[last], to);else ranges.push(from, to);
}
var LineView = /*#__PURE__*/function (_ContentView2) {
  _inherits(LineView, _ContentView2);
  var _super10 = _createSuper(LineView);
  function LineView() {
    var _this7;
    _classCallCheck(this, LineView);
    _this7 = _super10.apply(this, arguments);
    _this7.children = [];
    _this7.length = 0;
    _this7.prevAttrs = undefined;
    _this7.attrs = null;
    _this7.breakAfter = 0;
    return _this7;
  }
  // Consumes source
  _createClass(LineView, [{
    key: "merge",
    value: function merge(from, to, source, takeDeco, openStart, openEnd) {
      if (source) {
        if (!(source instanceof LineView)) return false;
        if (!this.dom) source.transferDOM(this); // Reuse source.dom when appropriate
      }

      if (takeDeco) this.setDeco(source ? source.attrs : null);
      mergeInlineChildren(this, from, to, source ? source.children : none$1, openStart, openEnd);
      return true;
    }
  }, {
    key: "split",
    value: function split(at) {
      var end = new LineView();
      end.breakAfter = this.breakAfter;
      if (this.length == 0) return end;
      var _this$childPos = this.childPos(at),
        i = _this$childPos.i,
        off = _this$childPos.off;
      if (off) {
        end.append(this.children[i].slice(off), 0);
        this.children[i].merge(off, this.children[i].length, null, 0, 0);
        i++;
      }
      for (var j = i; j < this.children.length; j++) {
        end.append(this.children[j], 0);
      }
      while (i > 0 && this.children[i - 1].length == 0) {
        this.children[i - 1].parent = null;
        i--;
      }
      this.children.length = i;
      this.markDirty();
      this.length = at;
      return end;
    }
  }, {
    key: "transferDOM",
    value: function transferDOM(other) {
      if (!this.dom) return;
      other.setDOM(this.dom);
      other.prevAttrs = this.prevAttrs === undefined ? this.attrs : this.prevAttrs;
      this.prevAttrs = undefined;
      this.dom = null;
    }
  }, {
    key: "setDeco",
    value: function setDeco(attrs) {
      if (!attrsEq(this.attrs, attrs)) {
        if (this.dom) {
          this.prevAttrs = this.attrs;
          this.markDirty();
        }
        this.attrs = attrs;
      }
    }
    // Only called when building a line view in ContentBuilder
  }, {
    key: "append",
    value: function append(child, openStart) {
      joinInlineInto(this, child, openStart);
    }
    // Only called when building a line view in ContentBuilder
  }, {
    key: "addLineDeco",
    value: function addLineDeco(deco) {
      var attrs = deco.spec.attributes;
      if (attrs) this.attrs = combineAttrs(attrs, this.attrs || {});
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return inlineDOMAtPos(this.dom, this.children, pos);
    }
  }, {
    key: "sync",
    value: function sync(track) {
      if (!this.dom) {
        this.setDOM(document.createElement("div"));
        this.dom.className = "cm-line";
        this.prevAttrs = this.attrs ? null : undefined;
      }
      if (this.prevAttrs !== undefined) {
        _updateAttrs(this.dom, this.prevAttrs, this.attrs);
        this.dom.classList.add("cm-line");
        this.prevAttrs = undefined;
      }
      _get(_getPrototypeOf(LineView.prototype), "sync", this).call(this, track);
      var last = this.dom.lastChild;
      if (!last || last.nodeName != "BR" && ContentView.get(last) instanceof WidgetView && (!browser.ios || !this.children.some(function (ch) {
        return ch instanceof TextView;
      }))) {
        var hack = document.createElement("BR");
        hack.cmIgnore = true;
        this.dom.appendChild(hack);
      }
    }
  }, {
    key: "measureTextSize",
    value: function measureTextSize() {
      if (this.children.length == 0 || this.length > 20) return null;
      var totalWidth = 0;
      var _iterator7 = _createForOfIteratorHelper(this.children),
        _step7;
      try {
        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          var child = _step7.value;
          if (!(child instanceof TextView)) return null;
          var rects = clientRectsFor(child.dom);
          if (rects.length != 1) return null;
          totalWidth += rects[0].width;
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
      return {
        lineHeight: this.dom.getBoundingClientRect().height,
        charWidth: totalWidth / this.length
      };
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      return coordsInChildren(this, pos, side);
    }
  }, {
    key: "match",
    value: function match(_other) {
      return false;
    }
  }, {
    key: "type",
    get: function get() {
      return BlockType.Text;
    }
  }], [{
    key: "find",
    value: function find(docView, pos) {
      for (var i = 0, off = 0;; i++) {
        var block = docView.children[i],
          end = off + block.length;
        if (end >= pos) {
          if (block instanceof LineView) return block;
          if (block.length) return null;
        }
        off = end + block.breakAfter;
      }
    }
  }]);
  return LineView;
}(ContentView);
var none$1 = [];
var BlockWidgetView = /*#__PURE__*/function (_ContentView3) {
  _inherits(BlockWidgetView, _ContentView3);
  var _super11 = _createSuper(BlockWidgetView);
  function BlockWidgetView(widget, length, type) {
    var _this8;
    _classCallCheck(this, BlockWidgetView);
    _this8 = _super11.call(this);
    _this8.widget = widget;
    _this8.length = length;
    _this8.type = type;
    _this8.breakAfter = 0;
    return _this8;
  }
  _createClass(BlockWidgetView, [{
    key: "merge",
    value: function merge(from, to, source, _takeDeco, openStart, openEnd) {
      if (source && (!(source instanceof BlockWidgetView) || !this.widget.compare(source.widget) || from > 0 && openStart <= 0 || to < this.length && openEnd <= 0)) return false;
      this.length = from + (source ? source.length : 0) + (this.length - to);
      return true;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return pos == 0 ? DOMPos.before(this.dom) : DOMPos.after(this.dom, pos == this.length);
    }
  }, {
    key: "split",
    value: function split(at) {
      var len = this.length - at;
      this.length = at;
      return new BlockWidgetView(this.widget, len, this.type);
    }
  }, {
    key: "children",
    get: function get() {
      return none$1;
    }
  }, {
    key: "sync",
    value: function sync() {
      if (!this.dom || !this.widget.updateDOM(this.dom)) {
        this.setDOM(this.widget.toDOM(this.editorView));
        this.dom.contentEditable = "false";
      }
    }
  }, {
    key: "overrideDOMText",
    get: function get() {
      return this.parent ? this.parent.view.state.doc.slice(this.posAtStart, this.posAtEnd) : _codemirror_text__WEBPACK_IMPORTED_MODULE_3__.Text.empty;
    }
  }, {
    key: "domBoundsAround",
    value: function domBoundsAround() {
      return null;
    }
  }, {
    key: "match",
    value: function match(other) {
      if (other instanceof BlockWidgetView && other.type == this.type && other.widget.constructor == this.widget.constructor) {
        if (!other.widget.eq(this.widget)) this.markDirty(true);
        this.widget = other.widget;
        this.length = other.length;
        this.breakAfter = other.breakAfter;
        return true;
      }
      return false;
    }
  }, {
    key: "ignoreMutation",
    value: function ignoreMutation() {
      return true;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent(event) {
      return this.widget.ignoreEvent(event);
    }
  }]);
  return BlockWidgetView;
}(ContentView);
var ContentBuilder = /*#__PURE__*/function () {
  function ContentBuilder(doc, pos, end) {
    _classCallCheck(this, ContentBuilder);
    this.doc = doc;
    this.pos = pos;
    this.end = end;
    this.content = [];
    this.curLine = null;
    this.breakAtStart = 0;
    this.openStart = -1;
    this.openEnd = -1;
    this.text = "";
    this.textOff = 0;
    this.cursor = doc.iter();
    this.skip = pos;
  }
  _createClass(ContentBuilder, [{
    key: "posCovered",
    value: function posCovered() {
      if (this.content.length == 0) return !this.breakAtStart && this.doc.lineAt(this.pos).from != this.pos;
      var last = this.content[this.content.length - 1];
      return !last.breakAfter && !(last instanceof BlockWidgetView && last.type == BlockType.WidgetBefore);
    }
  }, {
    key: "getLine",
    value: function getLine() {
      if (!this.curLine) this.content.push(this.curLine = new LineView());
      return this.curLine;
    }
  }, {
    key: "addWidget",
    value: function addWidget(view) {
      this.curLine = null;
      this.content.push(view);
    }
  }, {
    key: "finish",
    value: function finish() {
      if (!this.posCovered()) this.getLine();
    }
  }, {
    key: "wrapMarks",
    value: function wrapMarks(view, active) {
      var _iterator8 = _createForOfIteratorHelper(active),
        _step8;
      try {
        for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
          var mark = _step8.value;
          view = new MarkView(mark, [view], view.length);
        }
      } catch (err) {
        _iterator8.e(err);
      } finally {
        _iterator8.f();
      }
      return view;
    }
  }, {
    key: "buildText",
    value: function buildText(length, active, openStart) {
      while (length > 0) {
        if (this.textOff == this.text.length) {
          var _this$cursor$next = this.cursor.next(this.skip),
            value = _this$cursor$next.value,
            lineBreak = _this$cursor$next.lineBreak,
            done = _this$cursor$next.done;
          this.skip = 0;
          if (done) throw new Error("Ran out of text content when drawing inline views");
          if (lineBreak) {
            if (!this.posCovered()) this.getLine();
            if (this.content.length) this.content[this.content.length - 1].breakAfter = 1;else this.breakAtStart = 1;
            this.curLine = null;
            length--;
            continue;
          } else {
            this.text = value;
            this.textOff = 0;
          }
        }
        var take = Math.min(this.text.length - this.textOff, length, 512 /* Chunk */);
        this.getLine().append(this.wrapMarks(new TextView(this.text.slice(this.textOff, this.textOff + take)), active), openStart);
        this.textOff += take;
        length -= take;
        openStart = 0;
      }
    }
  }, {
    key: "span",
    value: function span(from, to, active, openStart) {
      this.buildText(to - from, active, openStart);
      this.pos = to;
      if (this.openStart < 0) this.openStart = openStart;
    }
  }, {
    key: "point",
    value: function point(from, to, deco, active, openStart) {
      var len = to - from;
      if (deco instanceof PointDecoration) {
        if (deco.block) {
          var type = deco.type;
          if (type == BlockType.WidgetAfter && !this.posCovered()) this.getLine();
          this.addWidget(new BlockWidgetView(deco.widget || new NullWidget("div"), len, type));
        } else {
          var widget = this.wrapMarks(WidgetView.create(deco.widget || new NullWidget("span"), len, deco.startSide), active);
          this.getLine().append(widget, openStart);
        }
      } else if (this.doc.lineAt(this.pos).from == this.pos) {
        // Line decoration
        this.getLine().addLineDeco(deco);
      }
      if (len) {
        // Advance the iterator past the replaced content
        if (this.textOff + len <= this.text.length) {
          this.textOff += len;
        } else {
          this.skip += len - (this.text.length - this.textOff);
          this.text = "";
          this.textOff = 0;
        }
        this.pos = to;
      }
      if (this.openStart < 0) this.openStart = openStart;
    }
  }], [{
    key: "build",
    value: function build(text, from, to, decorations) {
      var builder = new ContentBuilder(text, from, to);
      builder.openEnd = _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeSet.spans(decorations, from, to, builder);
      if (builder.openStart < 0) builder.openStart = builder.openEnd;
      builder.finish();
      return builder;
    }
  }]);
  return ContentBuilder;
}();
var NullWidget = /*#__PURE__*/function (_WidgetType) {
  _inherits(NullWidget, _WidgetType);
  var _super12 = _createSuper(NullWidget);
  function NullWidget(tag) {
    var _this9;
    _classCallCheck(this, NullWidget);
    _this9 = _super12.call(this);
    _this9.tag = tag;
    return _this9;
  }
  _createClass(NullWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.tag == this.tag;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      return document.createElement(this.tag);
    }
  }, {
    key: "updateDOM",
    value: function updateDOM(elt) {
      return elt.nodeName.toLowerCase() == this.tag;
    }
  }]);
  return NullWidget;
}(WidgetType);
var none = [];
var clickAddsSelectionRange = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define();
var dragMovesSelection$1 = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define();
var mouseSelectionStyle = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define();
var exceptionSink = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define();
var updateListener = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define();
var inputHandler = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define();
/**
Log or report an unhandled exception in client code. Should
probably only be used by extension code that allows client code to
provide functions, and calls those functions in a context where an
exception can't be propagated to calling code in a reasonable way
(for example when in an event handler).

Either calls a handler registered with
[`EditorView.exceptionSink`](https://codemirror.net/6/docs/ref/#view.EditorView^exceptionSink),
`window.onerror`, if defined, or `console.error` (in which case
it'll pass `context`, when given, as first argument).
*/
function logException(state, exception, context) {
  var handler = state.facet(exceptionSink);
  if (handler.length) handler[0](exception);else if (window.onerror) window.onerror(String(exception), context, undefined, undefined, exception);else if (context) console.error(context + ":", exception);else console.error(exception);
}
var editable = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define({
  combine: function combine(values) {
    return values.length ? values[0] : true;
  }
});
/**
Used to [declare](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide) which
[fields](https://codemirror.net/6/docs/ref/#view.PluginValue) a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin)
provides.
*/
var PluginFieldProvider = /*#__PURE__*/_createClass(
/**
@internal
*/
function PluginFieldProvider(
/**
@internal
*/
field,
/**
@internal
*/
get) {
  _classCallCheck(this, PluginFieldProvider);
  this.field = field;
  this.get = get;
}); /**
    Plugin fields are a mechanism for allowing plugins to provide
    values that can be retrieved through the
    [`pluginField`](https://codemirror.net/6/docs/ref/#view.EditorView.pluginField) view method.
    */
var PluginField = /*#__PURE__*/function () {
  function PluginField() {
    _classCallCheck(this, PluginField);
  }
  _createClass(PluginField, [{
    key: "from",
    value:
    /**
    Create a [provider](https://codemirror.net/6/docs/ref/#view.PluginFieldProvider) for this field,
    to use with a plugin's [provide](https://codemirror.net/6/docs/ref/#view.PluginSpec.provide)
    option.
    */
    function from(get) {
      return new PluginFieldProvider(this, get);
    }
    /**
    Define a new plugin field.
    */
  }], [{
    key: "define",
    value: function define() {
      return new PluginField();
    }
  }]);
  return PluginField;
}(); /**
     This field can be used by plugins to provide
     [decorations](https://codemirror.net/6/docs/ref/#view.Decoration).
     
     **Note**: For reasons of data flow (plugins are only updated
     after the viewport is computed), decorations produced by plugins
     are _not_ taken into account when predicting the vertical layout
     structure of the editor. Thus, things like large widgets or big
     replacements (i.e. code folding) should be provided through the
     state-level [`decorations` facet](https://codemirror.net/6/docs/ref/#view.EditorView^decorations),
     not this plugin field. Specifically, replacing decorations that
     cross line boundaries will break if provided through a plugin.
     */
PluginField.decorations = /*@__PURE__*/PluginField.define();
/**
Used to provide ranges that should be treated as atoms as far as
cursor motion is concerned. This causes methods like
[`moveByChar`](https://codemirror.net/6/docs/ref/#view.EditorView.moveByChar) and
[`moveVertically`](https://codemirror.net/6/docs/ref/#view.EditorView.moveVertically) (and the
commands built on top of them) to skip across such regions when
a selection endpoint would enter them. This does _not_ prevent
direct programmatic [selection
updates](https://codemirror.net/6/docs/ref/#state.TransactionSpec.selection) from moving into such
regions.
*/
PluginField.atomicRanges = /*@__PURE__*/PluginField.define();
/**
Plugins can provide additional scroll margins (space around the
sides of the scrolling element that should be considered
invisible) through this field. This can be useful when the
plugin introduces elements that cover part of that element (for
example a horizontally fixed gutter).
*/
PluginField.scrollMargins = /*@__PURE__*/PluginField.define();
var nextPluginID = 0;
var viewPlugin = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define();
/**
View plugins associate stateful values with a view. They can
influence the way the content is drawn, and are notified of things
that happen in the view.
*/
var ViewPlugin = /*#__PURE__*/function () {
  function ViewPlugin(
  /**
  @internal
  */
  id,
  /**
  @internal
  */
  create,
  /**
  @internal
  */
  fields) {
    _classCallCheck(this, ViewPlugin);
    this.id = id;
    this.create = create;
    this.fields = fields;
    this.extension = viewPlugin.of(this);
  }
  /**
  Define a plugin from a constructor function that creates the
  plugin's value, given an editor view.
  */
  _createClass(ViewPlugin, null, [{
    key: "define",
    value: function define(create, spec) {
      var _ref3 = spec || {},
        eventHandlers = _ref3.eventHandlers,
        provide = _ref3.provide,
        decorations = _ref3.decorations;
      var fields = [];
      if (provide) {
        var _iterator9 = _createForOfIteratorHelper(Array.isArray(provide) ? provide : [provide]),
          _step9;
        try {
          for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
            var provider = _step9.value;
            fields.push(provider);
          }
        } catch (err) {
          _iterator9.e(err);
        } finally {
          _iterator9.f();
        }
      }
      if (eventHandlers) fields.push(domEventHandlers.from(function (value) {
        return {
          plugin: value,
          handlers: eventHandlers
        };
      }));
      if (decorations) fields.push(PluginField.decorations.from(decorations));
      return new ViewPlugin(nextPluginID++, create, fields);
    }
    /**
    Create a plugin for a class whose constructor takes a single
    editor view as argument.
    */
  }, {
    key: "fromClass",
    value: function fromClass(cls, spec) {
      return ViewPlugin.define(function (view) {
        return new cls(view);
      }, spec);
    }
  }]);
  return ViewPlugin;
}();
var domEventHandlers = /*@__PURE__*/PluginField.define();
var PluginInstance = /*#__PURE__*/function () {
  function PluginInstance(spec) {
    _classCallCheck(this, PluginInstance);
    this.spec = spec;
    // When starting an update, all plugins have this field set to the
    // update object, indicating they need to be updated. When finished
    // updating, it is set to `false`. Retrieving a plugin that needs to
    // be updated with `view.plugin` forces an eager update.
    this.mustUpdate = null;
    // This is null when the plugin is initially created, but
    // initialized on the first update.
    this.value = null;
  }
  _createClass(PluginInstance, [{
    key: "takeField",
    value: function takeField(type, target) {
      var _iterator10 = _createForOfIteratorHelper(this.spec.fields),
        _step10;
      try {
        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
          var _step10$value = _step10.value,
            field = _step10$value.field,
            get = _step10$value.get;
          if (field == type) target.push(get(this.value));
        }
      } catch (err) {
        _iterator10.e(err);
      } finally {
        _iterator10.f();
      }
    }
  }, {
    key: "update",
    value: function update(view) {
      if (!this.value) {
        try {
          this.value = this.spec.create(view);
        } catch (e) {
          logException(view.state, e, "CodeMirror plugin crashed");
          return PluginInstance.dummy;
        }
      } else if (this.mustUpdate) {
        var update = this.mustUpdate;
        this.mustUpdate = null;
        if (!this.value.update) return this;
        try {
          this.value.update(update);
        } catch (e) {
          logException(update.state, e, "CodeMirror plugin crashed");
          if (this.value.destroy) try {
            this.value.destroy();
          } catch (_) {}
          return PluginInstance.dummy;
        }
      }
      return this;
    }
  }, {
    key: "destroy",
    value: function destroy(view) {
      var _a;
      if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.destroy) {
        try {
          this.value.destroy();
        } catch (e) {
          logException(view.state, e, "CodeMirror plugin crashed");
        }
      }
    }
  }]);
  return PluginInstance;
}();
PluginInstance.dummy = /*@__PURE__*/new PluginInstance( /*@__PURE__*/ViewPlugin.define(function () {
  return {};
}));
var editorAttributes = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define({
  combine: function combine(values) {
    return values.reduce(function (a, b) {
      return combineAttrs(b, a);
    }, {});
  }
});
var contentAttributes = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define({
  combine: function combine(values) {
    return values.reduce(function (a, b) {
      return combineAttrs(b, a);
    }, {});
  }
});
// Provide decorations
var decorations = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define();
var styleModule = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define();
var ChangedRange = /*#__PURE__*/function () {
  function ChangedRange(fromA, toA, fromB, toB) {
    _classCallCheck(this, ChangedRange);
    this.fromA = fromA;
    this.toA = toA;
    this.fromB = fromB;
    this.toB = toB;
  }
  _createClass(ChangedRange, [{
    key: "join",
    value: function join(other) {
      return new ChangedRange(Math.min(this.fromA, other.fromA), Math.max(this.toA, other.toA), Math.min(this.fromB, other.fromB), Math.max(this.toB, other.toB));
    }
  }, {
    key: "addToSet",
    value: function addToSet(set) {
      var i = set.length,
        me = this;
      for (; i > 0; i--) {
        var range = set[i - 1];
        if (range.fromA > me.toA) continue;
        if (range.toA < me.fromA) break;
        me = me.join(range);
        set.splice(i - 1, 1);
      }
      set.splice(i, 0, me);
      return set;
    }
  }], [{
    key: "extendWithRanges",
    value: function extendWithRanges(diff, ranges) {
      if (ranges.length == 0) return diff;
      var result = [];
      for (var dI = 0, rI = 0, posA = 0, posB = 0;; dI++) {
        var next = dI == diff.length ? null : diff[dI],
          off = posA - posB;
        var end = next ? next.fromB : 1e9;
        while (rI < ranges.length && ranges[rI] < end) {
          var from = ranges[rI],
            to = ranges[rI + 1];
          var fromB = Math.max(posB, from),
            toB = Math.min(end, to);
          if (fromB <= toB) new ChangedRange(fromB + off, toB + off, fromB, toB).addToSet(result);
          if (to > end) break;else rI += 2;
        }
        if (!next) return result;
        new ChangedRange(next.fromA, next.toA, next.fromB, next.toB).addToSet(result);
        posA = next.toA;
        posB = next.toB;
      }
    }
  }]);
  return ChangedRange;
}(); /**
     View [plugins](https://codemirror.net/6/docs/ref/#view.ViewPlugin) are given instances of this
     class, which describe what happened, whenever the view is updated.
     */
var ViewUpdate = /*#__PURE__*/function () {
  /**
  @internal
  */
  function ViewUpdate(
  /**
  The editor view that the update is associated with.
  */
  view,
  /**
  The new editor state.
  */
  state) {
    var transactions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : none;
    _classCallCheck(this, ViewUpdate);
    this.view = view;
    this.state = state;
    this.transactions = transactions;
    /**
    @internal
    */
    this.flags = 0;
    this.startState = view.state;
    this.changes = _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.ChangeSet.empty(this.startState.doc.length);
    var _iterator11 = _createForOfIteratorHelper(transactions),
      _step11;
    try {
      for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
        var tr = _step11.value;
        this.changes = this.changes.compose(tr.changes);
      }
    } catch (err) {
      _iterator11.e(err);
    } finally {
      _iterator11.f();
    }
    var changedRanges = [];
    this.changes.iterChangedRanges(function (fromA, toA, fromB, toB) {
      return changedRanges.push(new ChangedRange(fromA, toA, fromB, toB));
    });
    this.changedRanges = changedRanges;
    var focus = view.hasFocus;
    if (focus != view.inputState.notifiedFocused) {
      view.inputState.notifiedFocused = focus;
      this.flags |= 1 /* Focus */;
    }

    if (this.docChanged) this.flags |= 2 /* Height */;
  }
  /**
  Tells you whether the viewport changed in this update.
  */
  _createClass(ViewUpdate, [{
    key: "viewportChanged",
    get: function get() {
      return (this.flags & 4 /* Viewport */) > 0;
    }
    /**
    Indicates whether the line height in the editor changed in this update.
    */
  }, {
    key: "heightChanged",
    get: function get() {
      return (this.flags & 2 /* Height */) > 0;
    }
    /**
    Returns true when the document changed or the size of the editor
    or the lines or characters within it has changed.
    */
  }, {
    key: "geometryChanged",
    get: function get() {
      return this.docChanged || (this.flags & (16 /* Geometry */ | 2 /* Height */)) > 0;
    }
    /**
    True when this update indicates a focus change.
    */
  }, {
    key: "focusChanged",
    get: function get() {
      return (this.flags & 1 /* Focus */) > 0;
    }
    /**
    Whether the document changed in this update.
    */
  }, {
    key: "docChanged",
    get: function get() {
      return this.transactions.some(function (tr) {
        return tr.docChanged;
      });
    }
    /**
    Whether the selection was explicitly set in this update.
    */
  }, {
    key: "selectionSet",
    get: function get() {
      return this.transactions.some(function (tr) {
        return tr.selection;
      });
    }
    /**
    @internal
    */
  }, {
    key: "empty",
    get: function get() {
      return this.flags == 0 && this.transactions.length == 0;
    }
  }]);
  return ViewUpdate;
}();
var DocView = /*#__PURE__*/function (_ContentView4) {
  _inherits(DocView, _ContentView4);
  var _super13 = _createSuper(DocView);
  function DocView(view) {
    var _this10;
    _classCallCheck(this, DocView);
    _this10 = _super13.call(this);
    _this10.view = view;
    _this10.compositionDeco = Decoration.none;
    _this10.decorations = [];
    // Track a minimum width for the editor. When measuring sizes in
    // checkLayout, this is updated to point at the width of a given
    // element and its extent in the document. When a change happens in
    // that range, these are reset. That way, once we've seen a
    // line/element of a given length, we keep the editor wide enough to
    // fit at least that element, until it is changed, at which point we
    // forget it again.
    _this10.minWidth = 0;
    _this10.minWidthFrom = 0;
    _this10.minWidthTo = 0;
    // Track whether the DOM selection was set in a lossy way, so that
    // we don't mess it up when reading it back it
    _this10.impreciseAnchor = null;
    _this10.impreciseHead = null;
    _this10.setDOM(view.contentDOM);
    _this10.children = [new LineView()];
    _this10.children[0].setParent(_assertThisInitialized(_this10));
    _this10.updateInner([new ChangedRange(0, 0, 0, view.state.doc.length)], _this10.updateDeco(), 0);
    return _this10;
  }
  _createClass(DocView, [{
    key: "root",
    get: function get() {
      return this.view.root;
    }
  }, {
    key: "editorView",
    get: function get() {
      return this.view;
    }
  }, {
    key: "length",
    get: function get() {
      return this.view.state.doc.length;
    }
    // Update the document view to a given state. scrollIntoView can be
    // used as a hint to compute a new viewport that includes that
    // position, if we know the editor is going to scroll that position
    // into view.
  }, {
    key: "update",
    value: function update(_update) {
      var _this11 = this;
      var changedRanges = _update.changedRanges;
      if (this.minWidth > 0 && changedRanges.length) {
        if (!changedRanges.every(function (_ref4) {
          var fromA = _ref4.fromA,
            toA = _ref4.toA;
          return toA < _this11.minWidthFrom || fromA > _this11.minWidthTo;
        })) {
          this.minWidth = 0;
        } else {
          this.minWidthFrom = _update.changes.mapPos(this.minWidthFrom, 1);
          this.minWidthTo = _update.changes.mapPos(this.minWidthTo, 1);
        }
      }
      if (this.view.inputState.composing < 0) this.compositionDeco = Decoration.none;else if (_update.transactions.length) this.compositionDeco = computeCompositionDeco(this.view, _update.changes);
      // When the DOM nodes around the selection are moved to another
      // parent, Chrome sometimes reports a different selection through
      // getSelection than the one that it actually shows to the user.
      // This forces a selection update when lines are joined to work
      // around that. Issue #54
      var forceSelection = (browser.ie || browser.chrome) && !this.compositionDeco.size && _update && _update.state.doc.lines != _update.startState.doc.lines;
      var prevDeco = this.decorations,
        deco = this.updateDeco();
      var decoDiff = findChangedDeco(prevDeco, deco, _update.changes);
      changedRanges = ChangedRange.extendWithRanges(changedRanges, decoDiff);
      var pointerSel = _update.transactions.some(function (tr) {
        return tr.annotation(_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Transaction.userEvent) == "pointerselection";
      });
      if (this.dirty == 0 /* Not */ && changedRanges.length == 0 && !(_update.flags & (4 /* Viewport */ | 8 /* LineGaps */)) && _update.state.selection.main.from >= this.view.viewport.from && _update.state.selection.main.to <= this.view.viewport.to) {
        this.updateSelection(forceSelection, pointerSel);
        return false;
      } else {
        this.updateInner(changedRanges, deco, _update.startState.doc.length, forceSelection, pointerSel);
        return true;
      }
    }
    // Used both by update and checkLayout do perform the actual DOM
    // update
  }, {
    key: "updateInner",
    value: function updateInner(changes, deco, oldLength) {
      var _this12 = this;
      var forceSelection = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var pointerSel = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
      this.updateChildren(changes, deco, oldLength);
      var observer = this.view.observer;
      observer.ignore(function () {
        // Lock the height during redrawing, since Chrome sometimes
        // messes with the scroll position during DOM mutation (though
        // no relayout is triggered and I cannot imagine how it can
        // recompute the scroll position without a layout)
        _this12.dom.style.height = _this12.view.viewState.domHeight + "px";
        _this12.dom.style.minWidth = _this12.minWidth ? _this12.minWidth + "px" : "";
        // Chrome will sometimes, when DOM mutations occur directly
        // around the selection, get confused and report a different
        // selection from the one it displays (issue #218). This tries
        // to detect that situation.
        var track = browser.chrome || browser.ios ? {
          node: observer.selectionRange.focusNode,
          written: false
        } : undefined;
        _this12.sync(track);
        _this12.dirty = 0 /* Not */;
        if (track && (track.written || observer.selectionRange.focusNode != track.node)) forceSelection = true;
        _this12.updateSelection(forceSelection, pointerSel);
        _this12.dom.style.height = "";
      });
    }
  }, {
    key: "updateChildren",
    value: function updateChildren(changes, deco, oldLength) {
      var cursor = this.childCursor(oldLength);
      for (var i = changes.length - 1;; i--) {
        var next = i >= 0 ? changes[i] : null;
        if (!next) break;
        var fromA = next.fromA,
          toA = next.toA,
          fromB = next.fromB,
          toB = next.toB;
        var _ContentBuilder$build = ContentBuilder.build(this.view.state.doc, fromB, toB, deco),
          content = _ContentBuilder$build.content,
          breakAtStart = _ContentBuilder$build.breakAtStart,
          openStart = _ContentBuilder$build.openStart,
          openEnd = _ContentBuilder$build.openEnd;
        var _cursor$findPos = cursor.findPos(toA, 1),
          toI = _cursor$findPos.i,
          toOff = _cursor$findPos.off;
        var _cursor$findPos2 = cursor.findPos(fromA, -1),
          fromI = _cursor$findPos2.i,
          fromOff = _cursor$findPos2.off;
        this.replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd);
      }
    }
  }, {
    key: "replaceRange",
    value: function replaceRange(fromI, fromOff, toI, toOff, content, breakAtStart, openStart, openEnd) {
      var before = this.children[fromI],
        last = content.length ? content[content.length - 1] : null;
      var breakAtEnd = last ? last.breakAfter : breakAtStart;
      // Change within a single line
      if (fromI == toI && !breakAtStart && !breakAtEnd && content.length < 2 && before.merge(fromOff, toOff, content.length ? last : null, fromOff == 0, openStart, openEnd)) return;
      var after = this.children[toI];
      // Make sure the end of the line after the update is preserved in `after`
      if (toOff < after.length || after.children.length && after.children[after.children.length - 1].length == 0) {
        // If we're splitting a line, separate part of the start line to
        // avoid that being mangled when updating the start line.
        if (fromI == toI) {
          after = after.split(toOff);
          toOff = 0;
        }
        // If the element after the replacement should be merged with
        // the last replacing element, update `content`
        if (!breakAtEnd && last && after.merge(0, toOff, last, true, 0, openEnd)) {
          content[content.length - 1] = after;
        } else {
          // Remove the start of the after element, if necessary, and
          // add it to `content`.
          if (toOff || after.children.length && after.children[0].length == 0) after.merge(0, toOff, null, false, 0, openEnd);
          content.push(after);
        }
      } else if (after.breakAfter) {
        // The element at `toI` is entirely covered by this range.
        // Preserve its line break, if any.
        if (last) last.breakAfter = 1;else breakAtStart = 1;
      }
      // Since we've handled the next element from the current elements
      // now, make sure `toI` points after that.
      toI++;
      before.breakAfter = breakAtStart;
      if (fromOff > 0) {
        if (!breakAtStart && content.length && before.merge(fromOff, before.length, content[0], false, openStart, 0)) {
          before.breakAfter = content.shift().breakAfter;
        } else if (fromOff < before.length || before.children.length && before.children[before.children.length - 1].length == 0) {
          before.merge(fromOff, before.length, null, false, openStart, 0);
        }
        fromI++;
      }
      // Try to merge widgets on the boundaries of the replacement
      while (fromI < toI && content.length) {
        if (this.children[toI - 1].match(content[content.length - 1])) toI--, content.pop();else if (this.children[fromI].match(content[0])) fromI++, content.shift();else break;
      }
      if (fromI < toI || content.length) this.replaceChildren(fromI, toI, content);
    }
    // Sync the DOM selection to this.state.selection
  }, {
    key: "updateSelection",
    value: function updateSelection() {
      var _this13 = this;
      var force = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var fromPointer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (!(fromPointer || this.mayControlSelection()) || browser.ios && this.view.inputState.rapidCompositionStart) return;
      var main = this.view.state.selection.main;
      // FIXME need to handle the case where the selection falls inside a block range
      var anchor = this.domAtPos(main.anchor);
      var head = main.empty ? anchor : this.domAtPos(main.head);
      // Always reset on Firefox when next to an uneditable node to
      // avoid invisible cursor bugs (#111)
      if (browser.gecko && main.empty && betweenUneditable(anchor)) {
        var dummy = document.createTextNode("");
        this.view.observer.ignore(function () {
          return anchor.node.insertBefore(dummy, anchor.node.childNodes[anchor.offset] || null);
        });
        anchor = head = new DOMPos(dummy, 0);
        force = true;
      }
      var domSel = this.view.observer.selectionRange;
      // If the selection is already here, or in an equivalent position, don't touch it
      if (force || !domSel.focusNode || !isEquivalentPosition(anchor.node, anchor.offset, domSel.anchorNode, domSel.anchorOffset) || !isEquivalentPosition(head.node, head.offset, domSel.focusNode, domSel.focusOffset)) {
        this.view.observer.ignore(function () {
          var rawSel = getSelection(_this13.root);
          if (main.empty) {
            // Work around https://bugzilla.mozilla.org/show_bug.cgi?id=1612076
            if (browser.gecko) {
              var nextTo = nextToUneditable(anchor.node, anchor.offset);
              if (nextTo && nextTo != (1 /* Before */ | 2 /* After */)) {
                var text = nearbyTextNode(anchor.node, anchor.offset, nextTo == 1 /* Before */ ? 1 : -1);
                if (text) anchor = new DOMPos(text, nextTo == 1 /* Before */ ? 0 : text.nodeValue.length);
              }
            }
            rawSel.collapse(anchor.node, anchor.offset);
            if (main.bidiLevel != null && domSel.cursorBidiLevel != null) domSel.cursorBidiLevel = main.bidiLevel;
          } else if (rawSel.extend) {
            // Selection.extend can be used to create an 'inverted' selection
            // (one where the focus is before the anchor), but not all
            // browsers support it yet.
            rawSel.collapse(anchor.node, anchor.offset);
            rawSel.extend(head.node, head.offset);
          } else {
            // Primitive (IE) way
            var range = document.createRange();
            if (main.anchor > main.head) {
              var _ref5 = [head, anchor];
              anchor = _ref5[0];
              head = _ref5[1];
            }
            range.setEnd(head.node, head.offset);
            range.setStart(anchor.node, anchor.offset);
            rawSel.removeAllRanges();
            rawSel.addRange(range);
          }
        });
        this.view.observer.setSelectionRange(anchor, head);
      }
      this.impreciseAnchor = anchor.precise ? null : new DOMPos(domSel.anchorNode, domSel.anchorOffset);
      this.impreciseHead = head.precise ? null : new DOMPos(domSel.focusNode, domSel.focusOffset);
    }
  }, {
    key: "enforceCursorAssoc",
    value: function enforceCursorAssoc() {
      if (this.view.composing) return;
      var cursor = this.view.state.selection.main;
      var sel = getSelection(this.root);
      if (!cursor.empty || !cursor.assoc || !sel.modify) return;
      var line = LineView.find(this, cursor.head); // FIXME provide view-line-range finding helper
      if (!line) return;
      var lineStart = line.posAtStart;
      if (cursor.head == lineStart || cursor.head == lineStart + line.length) return;
      var before = this.coordsAt(cursor.head, -1),
        after = this.coordsAt(cursor.head, 1);
      if (!before || !after || before.bottom > after.top) return;
      var dom = this.domAtPos(cursor.head + cursor.assoc);
      sel.collapse(dom.node, dom.offset);
      sel.modify("move", cursor.assoc < 0 ? "forward" : "backward", "lineboundary");
    }
  }, {
    key: "mayControlSelection",
    value: function mayControlSelection() {
      return this.view.state.facet(editable) ? this.root.activeElement == this.dom : hasSelection(this.dom, this.view.observer.selectionRange);
    }
  }, {
    key: "nearest",
    value: function nearest(dom) {
      for (var cur = dom; cur;) {
        var domView = ContentView.get(cur);
        if (domView && domView.rootView == this) return domView;
        cur = cur.parentNode;
      }
      return null;
    }
  }, {
    key: "posFromDOM",
    value: function posFromDOM(node, offset) {
      var view = this.nearest(node);
      if (!view) throw new RangeError("Trying to find position for a DOM position outside of the document");
      return view.localPosFromDOM(node, offset) + view.posAtStart;
    }
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      var _this$childCursor$fin = this.childCursor().findPos(pos, -1),
        i = _this$childCursor$fin.i,
        off = _this$childCursor$fin.off;
      for (; i < this.children.length - 1;) {
        var child = this.children[i];
        if (off < child.length || child instanceof LineView) break;
        i++;
        off = 0;
      }
      return this.children[i].domAtPos(off);
    }
  }, {
    key: "coordsAt",
    value: function coordsAt(pos, side) {
      for (var off = this.length, i = this.children.length - 1;; i--) {
        var child = this.children[i],
          start = off - child.breakAfter - child.length;
        if (pos > start || pos == start && child.type != BlockType.WidgetBefore && child.type != BlockType.WidgetAfter && (!i || side == 2 || this.children[i - 1].breakAfter || this.children[i - 1].type == BlockType.WidgetBefore && side > -2)) return child.coordsAt(pos - start, side);
        off = start;
      }
    }
  }, {
    key: "measureVisibleLineHeights",
    value: function measureVisibleLineHeights() {
      var result = [],
        _this$view$viewState$ = this.view.viewState.viewport,
        from = _this$view$viewState$.from,
        to = _this$view$viewState$.to;
      var minWidth = Math.max(this.view.scrollDOM.clientWidth, this.minWidth) + 1;
      for (var pos = 0, i = 0; i < this.children.length; i++) {
        var child = this.children[i],
          end = pos + child.length;
        if (end > to) break;
        if (pos >= from) {
          result.push(child.dom.getBoundingClientRect().height);
          var width = child.dom.scrollWidth;
          if (width > minWidth) {
            this.minWidth = minWidth = width;
            this.minWidthFrom = pos;
            this.minWidthTo = end;
          }
        }
        pos = end + child.breakAfter;
      }
      return result;
    }
  }, {
    key: "measureTextSize",
    value: function measureTextSize() {
      var _this14 = this;
      var _iterator12 = _createForOfIteratorHelper(this.children),
        _step12;
      try {
        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
          var child = _step12.value;
          if (child instanceof LineView) {
            var measure = child.measureTextSize();
            if (measure) return measure;
          }
        }
        // If no workable line exists, force a layout of a measurable element
      } catch (err) {
        _iterator12.e(err);
      } finally {
        _iterator12.f();
      }
      var dummy = document.createElement("div"),
        lineHeight,
        charWidth;
      dummy.className = "cm-line";
      dummy.textContent = "abc def ghi jkl mno pqr stu";
      this.view.observer.ignore(function () {
        _this14.dom.appendChild(dummy);
        var rect = clientRectsFor(dummy.firstChild)[0];
        lineHeight = dummy.getBoundingClientRect().height;
        charWidth = rect ? rect.width / 27 : 7;
        dummy.remove();
      });
      return {
        lineHeight: lineHeight,
        charWidth: charWidth
      };
    }
  }, {
    key: "childCursor",
    value: function childCursor() {
      var pos = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.length;
      // Move back to start of last element when possible, so that
      // `ChildCursor.findPos` doesn't have to deal with the edge case
      // of being after the last element.
      var i = this.children.length;
      if (i) pos -= this.children[--i].length;
      return new ChildCursor(this.children, pos, i);
    }
  }, {
    key: "computeBlockGapDeco",
    value: function computeBlockGapDeco() {
      var deco = [],
        vs = this.view.viewState;
      for (var pos = 0, i = 0;; i++) {
        var next = i == vs.viewports.length ? null : vs.viewports[i];
        var end = next ? next.from - 1 : this.length;
        if (end > pos) {
          var height = vs.lineAt(end, 0).bottom - vs.lineAt(pos, 0).top;
          deco.push(Decoration.replace({
            widget: new BlockGapWidget(height),
            block: true,
            inclusive: true
          }).range(pos, end));
        }
        if (!next) break;
        pos = next.to + 1;
      }
      return Decoration.set(deco);
    }
  }, {
    key: "updateDeco",
    value: function updateDeco() {
      return this.decorations = [].concat(_toConsumableArray(this.view.pluginField(PluginField.decorations)), _toConsumableArray(this.view.state.facet(decorations)), [this.compositionDeco, this.computeBlockGapDeco(), this.view.viewState.lineGapDeco]);
    }
  }, {
    key: "scrollPosIntoView",
    value: function scrollPosIntoView(pos, side) {
      var rect = this.coordsAt(pos, side);
      if (!rect) return;
      var mLeft = 0,
        mRight = 0,
        mTop = 0,
        mBottom = 0;
      var _iterator13 = _createForOfIteratorHelper(this.view.pluginField(PluginField.scrollMargins)),
        _step13;
      try {
        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
          var margins = _step13.value;
          if (margins) {
            var left = margins.left,
              right = margins.right,
              top = margins.top,
              bottom = margins.bottom;
            if (left != null) mLeft = Math.max(mLeft, left);
            if (right != null) mRight = Math.max(mRight, right);
            if (top != null) mTop = Math.max(mTop, top);
            if (bottom != null) mBottom = Math.max(mBottom, bottom);
          }
        }
      } catch (err) {
        _iterator13.e(err);
      } finally {
        _iterator13.f();
      }
      scrollRectIntoView(this.dom, {
        left: rect.left - mLeft,
        top: rect.top - mTop,
        right: rect.right + mRight,
        bottom: rect.bottom + mBottom
      });
    }
  }]);
  return DocView;
}(ContentView);
function betweenUneditable(pos) {
  return pos.node.nodeType == 1 && pos.node.firstChild && (pos.offset == 0 || pos.node.childNodes[pos.offset - 1].contentEditable == "false") && (pos.offset == pos.node.childNodes.length || pos.node.childNodes[pos.offset].contentEditable == "false");
}
var BlockGapWidget = /*#__PURE__*/function (_WidgetType2) {
  _inherits(BlockGapWidget, _WidgetType2);
  var _super14 = _createSuper(BlockGapWidget);
  function BlockGapWidget(height) {
    var _this15;
    _classCallCheck(this, BlockGapWidget);
    _this15 = _super14.call(this);
    _this15.height = height;
    return _this15;
  }
  _createClass(BlockGapWidget, [{
    key: "toDOM",
    value: function toDOM() {
      var elt = document.createElement("div");
      this.updateDOM(elt);
      return elt;
    }
  }, {
    key: "eq",
    value: function eq(other) {
      return other.height == this.height;
    }
  }, {
    key: "updateDOM",
    value: function updateDOM(elt) {
      elt.style.height = this.height + "px";
      return true;
    }
  }, {
    key: "estimatedHeight",
    get: function get() {
      return this.height;
    }
  }]);
  return BlockGapWidget;
}(WidgetType);
function computeCompositionDeco(view, changes) {
  var sel = view.observer.selectionRange;
  var textNode = sel.focusNode && nearbyTextNode(sel.focusNode, sel.focusOffset, 0);
  if (!textNode) return Decoration.none;
  var cView = view.docView.nearest(textNode);
  var from,
    to,
    topNode = textNode;
  if (cView instanceof InlineView) {
    while (cView.parent instanceof InlineView) {
      cView = cView.parent;
    }
    from = cView.posAtStart;
    to = from + cView.length;
    topNode = cView.dom;
  } else if (cView instanceof LineView) {
    while (topNode.parentNode != cView.dom) {
      topNode = topNode.parentNode;
    }
    var prev = topNode.previousSibling;
    while (prev && !ContentView.get(prev)) {
      prev = prev.previousSibling;
    }
    from = to = prev ? ContentView.get(prev).posAtEnd : cView.posAtStart;
  } else {
    return Decoration.none;
  }
  var newFrom = changes.mapPos(from, 1),
    newTo = Math.max(newFrom, changes.mapPos(to, -1));
  var text = textNode.nodeValue,
    state = view.state;
  if (newTo - newFrom < text.length) {
    if (state.sliceDoc(newFrom, Math.min(state.doc.length, newFrom + text.length)) == text) newTo = newFrom + text.length;else if (state.sliceDoc(Math.max(0, newTo - text.length), newTo) == text) newFrom = newTo - text.length;else return Decoration.none;
  } else if (state.sliceDoc(newFrom, newTo) != text) {
    return Decoration.none;
  }
  return Decoration.set(Decoration.replace({
    widget: new CompositionWidget(topNode, textNode)
  }).range(newFrom, newTo));
}
var CompositionWidget = /*#__PURE__*/function (_WidgetType3) {
  _inherits(CompositionWidget, _WidgetType3);
  var _super15 = _createSuper(CompositionWidget);
  function CompositionWidget(top, text) {
    var _this16;
    _classCallCheck(this, CompositionWidget);
    _this16 = _super15.call(this);
    _this16.top = top;
    _this16.text = text;
    return _this16;
  }
  _createClass(CompositionWidget, [{
    key: "eq",
    value: function eq(other) {
      return this.top == other.top && this.text == other.text;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      return this.top;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent() {
      return false;
    }
  }, {
    key: "customView",
    get: function get() {
      return CompositionView;
    }
  }]);
  return CompositionWidget;
}(WidgetType);
function nearbyTextNode(node, offset, side) {
  for (;;) {
    if (node.nodeType == 3) return node;
    if (node.nodeType == 1 && offset > 0 && side <= 0) {
      node = node.childNodes[offset - 1];
      offset = maxOffset(node);
    } else if (node.nodeType == 1 && offset < node.childNodes.length && side >= 0) {
      node = node.childNodes[offset];
      offset = 0;
    } else {
      return null;
    }
  }
}
function nextToUneditable(node, offset) {
  if (node.nodeType != 1) return 0;
  return (offset && node.childNodes[offset - 1].contentEditable == "false" ? 1 /* Before */ : 0) | (offset < node.childNodes.length && node.childNodes[offset].contentEditable == "false" ? 2 /* After */ : 0);
}
var DecorationComparator$1 = /*#__PURE__*/function () {
  function DecorationComparator$1() {
    _classCallCheck(this, DecorationComparator$1);
    this.changes = [];
  }
  _createClass(DecorationComparator$1, [{
    key: "compareRange",
    value: function compareRange(from, to) {
      addRange(from, to, this.changes);
    }
  }, {
    key: "comparePoint",
    value: function comparePoint(from, to) {
      addRange(from, to, this.changes);
    }
  }]);
  return DecorationComparator$1;
}();
function findChangedDeco(a, b, diff) {
  var comp = new DecorationComparator$1();
  _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeSet.compare(a, b, diff, comp);
  return comp.changes;
}

/**
Used to indicate [text direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection).
*/
var Direction = /*@__PURE__*/function (Direction) {
  // (These are chosen to match the base levels, in bidi algorithm
  // terms, of spans in that direction.)
  /**
  Left-to-right.
  */
  Direction[Direction["LTR"] = 0] = "LTR";
  /**
  Right-to-left.
  */
  Direction[Direction["RTL"] = 1] = "RTL";
  return Direction;
}(Direction || (Direction = {}));
var LTR = Direction.LTR,
  RTL = Direction.RTL;
// Decode a string with each type encoded as log2(type)
function dec(str) {
  var result = [];
  for (var i = 0; i < str.length; i++) {
    result.push(1 << +str[i]);
  }
  return result;
}
// Character types for codepoints 0 to 0xf8
var LowTypes = /*@__PURE__*/dec("88888888888888888888888888888888888666888888787833333333337888888000000000000000000000000008888880000000000000000000000000088888888888888888888888888888888888887866668888088888663380888308888800000000000000000000000800000000000000000000000000000008");
// Character types for codepoints 0x600 to 0x6f9
var ArabicTypes = /*@__PURE__*/dec("4444448826627288999999999992222222222222222222222222222222222222222222222229999999999999999999994444444444644222822222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222222999999949999999229989999223333333333");
var Brackets = /*@__PURE__*/Object.create(null),
  BracketStack = [];
// There's a lot more in
// https://www.unicode.org/Public/UCD/latest/ucd/BidiBrackets.txt,
// which are left out to keep code size down.
for (var _i3 = 0, _arr2 = ["()", "[]", "{}"]; _i3 < _arr2.length; _i3++) {
  var p = _arr2[_i3];
  var l = /*@__PURE__*/p.charCodeAt(0),
    r = /*@__PURE__*/p.charCodeAt(1);
  Brackets[l] = r;
  Brackets[r] = -l;
}
function charType(ch) {
  return ch <= 0xf7 ? LowTypes[ch] : 0x590 <= ch && ch <= 0x5f4 ? 2 /* R */ : 0x600 <= ch && ch <= 0x6f9 ? ArabicTypes[ch - 0x600] : 0x6ee <= ch && ch <= 0x8ac ? 4 /* AL */ : 0x2000 <= ch && ch <= 0x200b ? 256 /* NI */ : ch == 0x200c ? 256 /* NI */ : 1 /* L */;
}

var BidiRE = /[\u0590-\u05f4\u0600-\u06ff\u0700-\u08ac]/;
/**
Represents a contiguous range of text that has a single direction
(as in left-to-right or right-to-left).
*/
var BidiSpan = /*#__PURE__*/function () {
  /**
  @internal
  */
  function BidiSpan(
  /**
  The start of the span (relative to the start of the line).
  */
  from,
  /**
  The end of the span.
  */
  to,
  /**
  The ["bidi
  level"](https://unicode.org/reports/tr9/#Basic_Display_Algorithm)
  of the span (in this context, 0 means
  left-to-right, 1 means right-to-left, 2 means left-to-right
  number inside right-to-left text).
  */
  level) {
    _classCallCheck(this, BidiSpan);
    this.from = from;
    this.to = to;
    this.level = level;
  }
  /**
  The direction of this span.
  */
  _createClass(BidiSpan, [{
    key: "dir",
    get: function get() {
      return this.level % 2 ? RTL : LTR;
    }
    /**
    @internal
    */
  }, {
    key: "side",
    value: function side(end, dir) {
      return this.dir == dir == end ? this.to : this.from;
    }
    /**
    @internal
    */
  }], [{
    key: "find",
    value: function find(order, index, level, assoc) {
      var maybe = -1;
      for (var i = 0; i < order.length; i++) {
        var span = order[i];
        if (span.from <= index && span.to >= index) {
          if (span.level == level) return i;
          // When multiple spans match, if assoc != 0, take the one that
          // covers that side, otherwise take the one with the minimum
          // level.
          if (maybe < 0 || (assoc != 0 ? assoc < 0 ? span.from < index : span.to > index : order[maybe].level > span.level)) maybe = i;
        }
      }
      if (maybe < 0) throw new RangeError("Index out of range");
      return maybe;
    }
  }]);
  return BidiSpan;
}(); // Reused array of character types
var types = [];
function computeOrder(line, direction) {
  var len = line.length,
    outerType = direction == LTR ? 1 /* L */ : 2 /* R */,
    oppositeType = direction == LTR ? 2 /* R */ : 1 /* L */;
  if (!line || outerType == 1 /* L */ && !BidiRE.test(line)) return trivialOrder(len);
  // W1. Examine each non-spacing mark (NSM) in the level run, and
  // change the type of the NSM to the type of the previous
  // character. If the NSM is at the start of the level run, it will
  // get the type of sor.
  // W2. Search backwards from each instance of a European number
  // until the first strong type (R, L, AL, or sor) is found. If an
  // AL is found, change the type of the European number to Arabic
  // number.
  // W3. Change all ALs to R.
  // (Left after this: L, R, EN, AN, ET, CS, NI)
  for (var i = 0, prev = outerType, prevStrong = outerType; i < len; i++) {
    var type = charType(line.charCodeAt(i));
    if (type == 512 /* NSM */) type = prev;else if (type == 8 /* EN */ && prevStrong == 4 /* AL */) type = 16 /* AN */;
    types[i] = type == 4 /* AL */ ? 2 /* R */ : type;
    if (type & 7 /* Strong */) prevStrong = type;
    prev = type;
  }
  // W5. A sequence of European terminators adjacent to European
  // numbers changes to all European numbers.
  // W6. Otherwise, separators and terminators change to Other
  // Neutral.
  // W7. Search backwards from each instance of a European number
  // until the first strong type (R, L, or sor) is found. If an L is
  // found, then change the type of the European number to L.
  // (Left after this: L, R, EN+AN, NI)
  for (var _i4 = 0, _prev = outerType, _prevStrong = outerType; _i4 < len; _i4++) {
    var _type2 = types[_i4];
    if (_type2 == 128 /* CS */) {
      if (_i4 < len - 1 && _prev == types[_i4 + 1] && _prev & 24 /* Num */) _type2 = types[_i4] = _prev;else types[_i4] = 256 /* NI */;
    } else if (_type2 == 64 /* ET */) {
      var end = _i4 + 1;
      while (end < len && types[end] == 64 /* ET */) {
        end++;
      }
      var replace = _i4 && _prev == 8 /* EN */ || end < len && types[end] == 8 /* EN */ ? _prevStrong == 1 /* L */ ? 1 /* L */ : 8 /* EN */ : 256 /* NI */;
      for (var j = _i4; j < end; j++) {
        types[j] = replace;
      }
      _i4 = end - 1;
    } else if (_type2 == 8 /* EN */ && _prevStrong == 1 /* L */) {
      types[_i4] = 1 /* L */;
    }

    _prev = _type2;
    if (_type2 & 7 /* Strong */) _prevStrong = _type2;
  }
  // N0. Process bracket pairs in an isolating run sequence
  // sequentially in the logical order of the text positions of the
  // opening paired brackets using the logic given below. Within this
  // scope, bidirectional types EN and AN are treated as R.
  for (var _i5 = 0, sI = 0, context = 0, ch, br, _type3; _i5 < len; _i5++) {
    // Keeps [startIndex, type, strongSeen] triples for each open
    // bracket on BracketStack.
    if (br = Brackets[ch = line.charCodeAt(_i5)]) {
      if (br < 0) {
        // Closing bracket
        for (var sJ = sI - 3; sJ >= 0; sJ -= 3) {
          if (BracketStack[sJ + 1] == -br) {
            var flags = BracketStack[sJ + 2];
            var _type4 = flags & 2 /* EmbedInside */ ? outerType : !(flags & 4 /* OppositeInside */) ? 0 : flags & 1 /* OppositeBefore */ ? oppositeType : outerType;
            if (_type4) types[_i5] = types[BracketStack[sJ]] = _type4;
            sI = sJ;
            break;
          }
        }
      } else if (BracketStack.length == 189 /* MaxDepth */) {
        break;
      } else {
        BracketStack[sI++] = _i5;
        BracketStack[sI++] = ch;
        BracketStack[sI++] = context;
      }
    } else if ((_type3 = types[_i5]) == 2 /* R */ || _type3 == 1 /* L */) {
      var embed = _type3 == outerType;
      context = embed ? 0 : 1 /* OppositeBefore */;
      for (var _sJ = sI - 3; _sJ >= 0; _sJ -= 3) {
        var cur = BracketStack[_sJ + 2];
        if (cur & 2 /* EmbedInside */) break;
        if (embed) {
          BracketStack[_sJ + 2] |= 2 /* EmbedInside */;
        } else {
          if (cur & 4 /* OppositeInside */) break;
          BracketStack[_sJ + 2] |= 4 /* OppositeInside */;
        }
      }
    }
  }
  // N1. A sequence of neutrals takes the direction of the
  // surrounding strong text if the text on both sides has the same
  // direction. European and Arabic numbers act as if they were R in
  // terms of their influence on neutrals. Start-of-level-run (sor)
  // and end-of-level-run (eor) are used at level run boundaries.
  // N2. Any remaining neutrals take the embedding direction.
  // (Left after this: L, R, EN+AN)
  for (var _i6 = 0; _i6 < len; _i6++) {
    if (types[_i6] == 256 /* NI */) {
      var _end2 = _i6 + 1;
      while (_end2 < len && types[_end2] == 256 /* NI */) {
        _end2++;
      }
      var beforeL = (_i6 ? types[_i6 - 1] : outerType) == 1 /* L */;
      var afterL = (_end2 < len ? types[_end2] : outerType) == 1 /* L */;
      var _replace = beforeL == afterL ? beforeL ? 1 /* L */ : 2 /* R */ : outerType;
      for (var _j = _i6; _j < _end2; _j++) {
        types[_j] = _replace;
      }
      _i6 = _end2 - 1;
    }
  }
  // Here we depart from the documented algorithm, in order to avoid
  // building up an actual levels array. Since there are only three
  // levels (0, 1, 2) in an implementation that doesn't take
  // explicit embedding into account, we can build up the order on
  // the fly, without following the level-based algorithm.
  var order = [];
  if (outerType == 1 /* L */) {
    for (var _i7 = 0; _i7 < len;) {
      var start = _i7,
        rtl = types[_i7++] != 1 /* L */;
      while (_i7 < len && rtl == (types[_i7] != 1 /* L */)) {
        _i7++;
      }
      if (rtl) {
        for (var _j2 = _i7; _j2 > start;) {
          var _end3 = _j2,
            _l = types[--_j2] != 2 /* R */;
          while (_j2 > start && _l == (types[_j2 - 1] != 2 /* R */)) {
            _j2--;
          }
          order.push(new BidiSpan(_j2, _end3, _l ? 2 : 1));
        }
      } else {
        order.push(new BidiSpan(start, _i7, 0));
      }
    }
  } else {
    for (var _i8 = 0; _i8 < len;) {
      var _start3 = _i8,
        _rtl = types[_i8++] == 2 /* R */;
      while (_i8 < len && _rtl == (types[_i8] == 2 /* R */)) {
        _i8++;
      }
      order.push(new BidiSpan(_start3, _i8, _rtl ? 1 : 2));
    }
  }
  return order;
}
function trivialOrder(length) {
  return [new BidiSpan(0, length, 0)];
}
var movedOver = "";
function moveVisually(line, order, dir, start, forward) {
  var _a;
  var startIndex = start.head - line.from,
    spanI = -1;
  if (startIndex == 0) {
    if (!forward || !line.length) return null;
    if (order[0].level != dir) {
      startIndex = order[0].side(false, dir);
      spanI = 0;
    }
  } else if (startIndex == line.length) {
    if (forward) return null;
    var last = order[order.length - 1];
    if (last.level != dir) {
      startIndex = last.side(true, dir);
      spanI = order.length - 1;
    }
  }
  if (spanI < 0) spanI = BidiSpan.find(order, startIndex, (_a = start.bidiLevel) !== null && _a !== void 0 ? _a : -1, start.assoc);
  var span = order[spanI];
  // End of span. (But not end of line--that was checked for above.)
  if (startIndex == span.side(forward, dir)) {
    span = order[spanI += forward ? 1 : -1];
    startIndex = span.side(!forward, dir);
  }
  var indexForward = forward == (span.dir == dir);
  var nextIndex = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.findClusterBreak)(line.text, startIndex, indexForward);
  movedOver = line.text.slice(Math.min(startIndex, nextIndex), Math.max(startIndex, nextIndex));
  if (nextIndex != span.side(forward, dir)) return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(nextIndex + line.from, indexForward ? -1 : 1, span.level);
  var nextSpan = spanI == (forward ? order.length - 1 : 0) ? null : order[spanI + (forward ? 1 : -1)];
  if (!nextSpan && span.level != dir) return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(forward ? line.to : line.from, forward ? -1 : 1, dir);
  if (nextSpan && nextSpan.level < span.level) return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(nextSpan.side(!forward, dir) + line.from, forward ? 1 : -1, nextSpan.level);
  return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(nextIndex + line.from, forward ? -1 : 1, span.level);
}
function groupAt(state, pos) {
  var bias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
  var categorize = state.charCategorizer(pos);
  var line = state.doc.lineAt(pos),
    linePos = pos - line.from;
  if (line.length == 0) return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(pos);
  if (linePos == 0) bias = 1;else if (linePos == line.length) bias = -1;
  var from = linePos,
    to = linePos;
  if (bias < 0) from = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.findClusterBreak)(line.text, linePos, false);else to = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.findClusterBreak)(line.text, linePos);
  var cat = categorize(line.text.slice(from, to));
  while (from > 0) {
    var prev = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.findClusterBreak)(line.text, from, false);
    if (categorize(line.text.slice(prev, from)) != cat) break;
    from = prev;
  }
  while (to < line.length) {
    var next = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.findClusterBreak)(line.text, to);
    if (categorize(line.text.slice(to, next)) != cat) break;
    to = next;
  }
  return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.range(from + line.from, to + line.from);
}
// Search the DOM for the {node, offset} position closest to the given
// coordinates. Very inefficient and crude, but can usually be avoided
// by calling caret(Position|Range)FromPoint instead.
// FIXME holding arrow-up/down at the end of the viewport is a rather
// common use case that will repeatedly trigger this code. Maybe
// introduce some element of binary search after all?
function getdx(x, rect) {
  return rect.left > x ? rect.left - x : Math.max(0, x - rect.right);
}
function getdy(y, rect) {
  return rect.top > y ? rect.top - y : Math.max(0, y - rect.bottom);
}
function yOverlap(a, b) {
  return a.top < b.bottom - 1 && a.bottom > b.top + 1;
}
function upTop(rect, top) {
  return top < rect.top ? {
    top: top,
    left: rect.left,
    right: rect.right,
    bottom: rect.bottom
  } : rect;
}
function upBot(rect, bottom) {
  return bottom > rect.bottom ? {
    top: rect.top,
    left: rect.left,
    right: rect.right,
    bottom: bottom
  } : rect;
}
function domPosAtCoords(parent, x, y) {
  var closest, closestRect, closestX, closestY;
  var above, below, aboveRect, belowRect;
  for (var child = parent.firstChild; child; child = child.nextSibling) {
    var rects = clientRectsFor(child);
    for (var i = 0; i < rects.length; i++) {
      var rect = rects[i];
      if (closestRect && yOverlap(closestRect, rect)) rect = upTop(upBot(rect, closestRect.bottom), closestRect.top);
      var dx = getdx(x, rect),
        dy = getdy(y, rect);
      if (dx == 0 && dy == 0) return child.nodeType == 3 ? domPosInText(child, x, y) : domPosAtCoords(child, x, y);
      if (!closest || closestY > dy || closestY == dy && closestX > dx) {
        closest = child;
        closestRect = rect;
        closestX = dx;
        closestY = dy;
      }
      if (dx == 0) {
        if (y > rect.bottom && (!aboveRect || aboveRect.bottom < rect.bottom)) {
          above = child;
          aboveRect = rect;
        } else if (y < rect.top && (!belowRect || belowRect.top > rect.top)) {
          below = child;
          belowRect = rect;
        }
      } else if (aboveRect && yOverlap(aboveRect, rect)) {
        aboveRect = upBot(aboveRect, rect.bottom);
      } else if (belowRect && yOverlap(belowRect, rect)) {
        belowRect = upTop(belowRect, rect.top);
      }
    }
  }
  if (aboveRect && aboveRect.bottom >= y) {
    closest = above;
    closestRect = aboveRect;
  } else if (belowRect && belowRect.top <= y) {
    closest = below;
    closestRect = belowRect;
  }
  if (!closest) return {
    node: parent,
    offset: 0
  };
  var clipX = Math.max(closestRect.left, Math.min(closestRect.right, x));
  if (closest.nodeType == 3) return domPosInText(closest, clipX, y);
  if (!closestX && closest.contentEditable == "true") return domPosAtCoords(closest, clipX, y);
  var offset = Array.prototype.indexOf.call(parent.childNodes, closest) + (x >= (closestRect.left + closestRect.right) / 2 ? 1 : 0);
  return {
    node: parent,
    offset: offset
  };
}
function domPosInText(node, x, y) {
  var len = node.nodeValue.length;
  var closestOffset = -1,
    closestDY = 1e9,
    generalSide = 0;
  for (var i = 0; i < len; i++) {
    var rects = textRange(node, i, i + 1).getClientRects();
    for (var j = 0; j < rects.length; j++) {
      var rect = rects[j];
      if (rect.top == rect.bottom) continue;
      if (!generalSide) generalSide = x - rect.left;
      var dy = (rect.top > y ? rect.top - y : y - rect.bottom) - 1;
      if (rect.left - 1 <= x && rect.right + 1 >= x && dy < closestDY) {
        var right = x >= (rect.left + rect.right) / 2,
          after = right;
        if (browser.chrome || browser.gecko) {
          // Check for RTL on browsers that support getting client
          // rects for empty ranges.
          var rectBefore = textRange(node, i).getBoundingClientRect();
          if (rectBefore.left == rect.right) after = !right;
        }
        if (dy <= 0) return {
          node: node,
          offset: i + (after ? 1 : 0)
        };
        closestOffset = i + (after ? 1 : 0);
        closestDY = dy;
      }
    }
  }
  return {
    node: node,
    offset: closestOffset > -1 ? closestOffset : generalSide > 0 ? node.nodeValue.length : 0
  };
}
function _posAtCoords(view, _ref6, precise) {
  var x = _ref6.x,
    y = _ref6.y;
  var bias = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;
  var content = view.contentDOM.getBoundingClientRect(),
    block;
  var halfLine = view.defaultLineHeight / 2;
  for (var bounced = false;;) {
    block = view.blockAtHeight(y, content.top);
    if (block.top > y || block.bottom < y) {
      bias = block.top > y ? -1 : 1;
      y = Math.min(block.bottom - halfLine, Math.max(block.top + halfLine, y));
      if (bounced) return precise ? null : 0;else bounced = true;
    }
    if (block.type == BlockType.Text) break;
    y = bias > 0 ? block.bottom + halfLine : block.top - halfLine;
  }
  var lineStart = block.from;
  x = Math.max(content.left + 1, Math.min(content.right - 1, x));
  // If this is outside of the rendered viewport, we can't determine a position
  if (lineStart < view.viewport.from) return view.viewport.from == 0 ? 0 : posAtCoordsImprecise(view, content, block, x, y);
  if (lineStart > view.viewport.to) return view.viewport.to == view.state.doc.length ? view.state.doc.length : posAtCoordsImprecise(view, content, block, x, y);
  // Clip x to the viewport sides
  var root = view.root,
    element = root.elementFromPoint(x, y);
  // There's visible editor content under the point, so we can try
  // using caret(Position|Range)FromPoint as a shortcut
  var node,
    offset = -1;
  if (element && view.contentDOM.contains(element) && !(view.docView.nearest(element) instanceof WidgetView)) {
    if (root.caretPositionFromPoint) {
      var pos = root.caretPositionFromPoint(x, y);
      if (pos) {
        node = pos.offsetNode;
        offset = pos.offset;
      }
    } else if (root.caretRangeFromPoint) {
      var range = root.caretRangeFromPoint(x, y);
      if (range) {
        node = range.startContainer;
        offset = range.startOffset;
        if (browser.safari && isSuspiciousCaretResult(node, offset, x)) node = undefined;
      }
    }
  }
  // No luck, do our own (potentially expensive) search
  if (!node || !view.docView.dom.contains(node)) {
    var line = LineView.find(view.docView, lineStart);
    var _domPosAtCoords = domPosAtCoords(line.dom, x, y);
    node = _domPosAtCoords.node;
    offset = _domPosAtCoords.offset;
  }
  return view.docView.posFromDOM(node, offset);
}
function posAtCoordsImprecise(view, contentRect, block, x, y) {
  var into = Math.round((x - contentRect.left) * view.defaultCharacterWidth);
  if (view.lineWrapping && block.height > view.defaultLineHeight * 1.5) {
    var line = Math.floor((y - block.top) / view.defaultLineHeight);
    into += line * view.viewState.heightOracle.lineLength;
  }
  var content = view.state.sliceDoc(block.from, block.to);
  return block.from + (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.findColumn)(content, into, view.state.tabSize);
}
// In case of a high line height, Safari's caretRangeFromPoint treats
// the space between lines as belonging to the last character of the
// line before. This is used to detect such a result so that it can be
// ignored (issue #401).
function isSuspiciousCaretResult(node, offset, x) {
  var len;
  if (node.nodeType != 3 || offset != (len = node.nodeValue.length)) return false;
  for (var next = node.nextSibling; next; next = next.nextSibling) {
    if (next.nodeType != 1 || next.nodeName != "BR") return false;
  }
  return textRange(node, len - 1, len).getBoundingClientRect().left > x;
}
function _moveToLineBoundary(view, start, forward, includeWrap) {
  var line = view.state.doc.lineAt(start.head);
  var coords = !includeWrap || !view.lineWrapping ? null : view.coordsAtPos(start.assoc < 0 && start.head > line.from ? start.head - 1 : start.head);
  if (coords) {
    var editorRect = view.dom.getBoundingClientRect();
    var pos = view.posAtCoords({
      x: forward == (view.textDirection == Direction.LTR) ? editorRect.right - 1 : editorRect.left + 1,
      y: (coords.top + coords.bottom) / 2
    });
    if (pos != null) return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(pos, forward ? -1 : 1);
  }
  var lineView = LineView.find(view.docView, start.head);
  var end = lineView ? forward ? lineView.posAtEnd : lineView.posAtStart : forward ? line.to : line.from;
  return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(end, forward ? -1 : 1);
}
function _moveByChar(view, start, forward, by) {
  var line = view.state.doc.lineAt(start.head),
    spans = view.bidiSpans(line);
  for (var cur = start, check = null;;) {
    var next = moveVisually(line, spans, view.textDirection, cur, forward),
      _char = movedOver;
    if (!next) {
      if (line.number == (forward ? view.state.doc.lines : 1)) return cur;
      _char = "\n";
      line = view.state.doc.line(line.number + (forward ? 1 : -1));
      spans = view.bidiSpans(line);
      next = _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(forward ? line.from : line.to);
    }
    if (!check) {
      if (!by) return next;
      check = by(_char);
    } else if (!check(_char)) {
      return cur;
    }
    cur = next;
  }
}
function byGroup(view, pos, start) {
  var categorize = view.state.charCategorizer(pos);
  var cat = categorize(start);
  return function (next) {
    var nextCat = categorize(next);
    if (cat == _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.CharCategory.Space) cat = nextCat;
    return cat == nextCat;
  };
}
function _moveVertically(view, start, forward, distance) {
  var startPos = start.head,
    dir = forward ? 1 : -1;
  if (startPos == (forward ? view.state.doc.length : 0)) return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(startPos);
  var goal = start.goalColumn,
    startY;
  var rect = view.contentDOM.getBoundingClientRect();
  var startCoords = view.coordsAtPos(startPos);
  if (startCoords) {
    if (goal == null) goal = startCoords.left - rect.left;
    startY = dir < 0 ? startCoords.top : startCoords.bottom;
  } else {
    var line = view.viewState.lineAt(startPos, view.dom.getBoundingClientRect().top);
    if (goal == null) goal = Math.min(rect.right - rect.left, view.defaultCharacterWidth * (startPos - line.from));
    startY = dir < 0 ? line.top : line.bottom;
  }
  var resolvedGoal = rect.left + goal;
  var dist = distance !== null && distance !== void 0 ? distance : view.defaultLineHeight >> 1;
  for (var extra = 0;; extra += 10) {
    var curY = startY + (dist + extra) * dir;
    var pos = _posAtCoords(view, {
      x: resolvedGoal,
      y: curY
    }, false, dir);
    if (curY < rect.top || curY > rect.bottom || (dir < 0 ? pos < startPos : pos > startPos)) return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(pos, undefined, undefined, goal);
  }
}
function skipAtoms(view, oldPos, pos) {
  var atoms = view.pluginField(PluginField.atomicRanges);
  for (;;) {
    var moved = false;
    var _iterator14 = _createForOfIteratorHelper(atoms),
      _step14;
    try {
      for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
        var set = _step14.value;
        set.between(pos.from - 1, pos.from + 1, function (from, to, value) {
          if (pos.from > from && pos.from < to) {
            pos = oldPos.from > pos.from ? _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(from, 1) : _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(to, -1);
            moved = true;
          }
        });
      }
    } catch (err) {
      _iterator14.e(err);
    } finally {
      _iterator14.f();
    }
    if (!moved) return pos;
  }
}

// This will also be where dragging info and such goes
var InputState = /*#__PURE__*/function () {
  function InputState(view) {
    var _this17 = this;
    _classCallCheck(this, InputState);
    this.lastKeyCode = 0;
    this.lastKeyTime = 0;
    this.pendingIOSKey = null;
    this.lastSelectionOrigin = null;
    this.lastSelectionTime = 0;
    this.lastEscPress = 0;
    this.lastContextMenu = 0;
    this.scrollHandlers = [];
    this.registeredEvents = [];
    this.customHandlers = [];
    // -1 means not in a composition. Otherwise, this counts the number
    // of changes made during the composition. The count is used to
    // avoid treating the start state of the composition, before any
    // changes have been made, as part of the composition.
    this.composing = -1;
    this.compositionEndedAt = 0;
    this.rapidCompositionStart = false;
    this.mouseSelection = null;
    var _loop = function _loop(type) {
      var handler = handlers[type];
      view.contentDOM.addEventListener(type, function (event) {
        if (type == "keydown" && _this17.keydown(view, event)) return;
        if (!eventBelongsToEditor(view, event) || _this17.ignoreDuringComposition(event)) return;
        if (_this17.mustFlushObserver(event)) view.observer.forceFlush();
        if (_this17.runCustomHandlers(type, view, event)) event.preventDefault();else handler(view, event);
      });
      _this17.registeredEvents.push(type);
    };
    for (var type in handlers) {
      _loop(type);
    }
    this.notifiedFocused = view.hasFocus;
    this.ensureHandlers(view);
    // On Safari adding an input event handler somehow prevents an
    // issue where the composition vanishes when you press enter.
    if (browser.safari) view.contentDOM.addEventListener("input", function () {
      return null;
    });
  }
  _createClass(InputState, [{
    key: "setSelectionOrigin",
    value: function setSelectionOrigin(origin) {
      this.lastSelectionOrigin = origin;
      this.lastSelectionTime = Date.now();
    }
  }, {
    key: "ensureHandlers",
    value: function ensureHandlers(view) {
      var _this18 = this;
      var handlers = this.customHandlers = view.pluginField(domEventHandlers);
      var _iterator15 = _createForOfIteratorHelper(handlers),
        _step15;
      try {
        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
          var set = _step15.value;
          var _loop2 = function _loop2(type) {
            if (_this18.registeredEvents.indexOf(type) < 0 && type != "scroll") {
              _this18.registeredEvents.push(type);
              view.contentDOM.addEventListener(type, function (event) {
                if (!eventBelongsToEditor(view, event)) return;
                if (_this18.runCustomHandlers(type, view, event)) event.preventDefault();
              });
            }
          };
          for (var type in set.handlers) {
            _loop2(type);
          }
        }
      } catch (err) {
        _iterator15.e(err);
      } finally {
        _iterator15.f();
      }
    }
  }, {
    key: "runCustomHandlers",
    value: function runCustomHandlers(type, view, event) {
      var _iterator16 = _createForOfIteratorHelper(this.customHandlers),
        _step16;
      try {
        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
          var set = _step16.value;
          var handler = set.handlers[type],
            handled = false;
          if (handler) {
            try {
              handled = handler.call(set.plugin, event, view);
            } catch (e) {
              logException(view.state, e);
            }
            if (handled || event.defaultPrevented) {
              // Chrome for Android often applies a bunch of nonsensical
              // DOM changes after an enter press, even when
              // preventDefault-ed. This tries to ignore those.
              if (browser.android && type == "keydown" && event.keyCode == 13) view.observer.flushSoon();
              return true;
            }
          }
        }
      } catch (err) {
        _iterator16.e(err);
      } finally {
        _iterator16.f();
      }
      return false;
    }
  }, {
    key: "runScrollHandlers",
    value: function runScrollHandlers(view, event) {
      var _iterator17 = _createForOfIteratorHelper(this.customHandlers),
        _step17;
      try {
        for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {
          var set = _step17.value;
          var handler = set.handlers.scroll;
          if (handler) {
            try {
              handler.call(set.plugin, event, view);
            } catch (e) {
              logException(view.state, e);
            }
          }
        }
      } catch (err) {
        _iterator17.e(err);
      } finally {
        _iterator17.f();
      }
    }
  }, {
    key: "keydown",
    value: function keydown(view, event) {
      var _this19 = this;
      // Must always run, even if a custom handler handled the event
      this.lastKeyCode = event.keyCode;
      this.lastKeyTime = Date.now();
      if (this.screenKeyEvent(view, event)) return true;
      // Prevent the default behavior of Enter on iOS makes the
      // virtual keyboard get stuck in the wrong (lowercase)
      // state. So we let it go through, and then, in
      // applyDOMChange, notify key handlers of it and reset to
      // the state they produce.
      if (browser.ios && (event.keyCode == 13 || event.keyCode == 8) && !(event.ctrlKey || event.altKey || event.metaKey) && !event.synthetic) {
        this.pendingIOSKey = event.keyCode == 13 ? "enter" : "backspace";
        setTimeout(function () {
          return _this19.flushIOSKey(view);
        }, 250);
        return true;
      }
      return false;
    }
  }, {
    key: "flushIOSKey",
    value: function flushIOSKey(view) {
      if (!this.pendingIOSKey) return false;
      var dom = view.contentDOM,
        key = this.pendingIOSKey;
      this.pendingIOSKey = null;
      return key == "enter" ? dispatchKey(dom, "Enter", 13) : dispatchKey(dom, "Backspace", 8);
    }
  }, {
    key: "ignoreDuringComposition",
    value: function ignoreDuringComposition(event) {
      if (!/^key/.test(event.type)) return false;
      if (this.composing > 0) return true;
      // See https://www.stum.de/2016/06/24/handling-ime-events-in-javascript/.
      // On some input method editors (IMEs), the Enter key is used to
      // confirm character selection. On Safari, when Enter is pressed,
      // compositionend and keydown events are sometimes emitted in the
      // wrong order. The key event should still be ignored, even when
      // it happens after the compositionend event.
      if (browser.safari && Date.now() - this.compositionEndedAt < 500) {
        this.compositionEndedAt = 0;
        return true;
      }
      return false;
    }
  }, {
    key: "screenKeyEvent",
    value: function screenKeyEvent(view, event) {
      var protectedTab = event.keyCode == 9 && Date.now() < this.lastEscPress + 2000;
      if (event.keyCode == 27) this.lastEscPress = Date.now();else if (modifierCodes.indexOf(event.keyCode) < 0) this.lastEscPress = 0;
      return protectedTab;
    }
  }, {
    key: "mustFlushObserver",
    value: function mustFlushObserver(event) {
      return event.type == "keydown" && event.keyCode != 229 || event.type == "compositionend" && !browser.ios;
    }
  }, {
    key: "startMouseSelection",
    value: function startMouseSelection(view, event, style) {
      if (this.mouseSelection) this.mouseSelection.destroy();
      this.mouseSelection = new MouseSelection(this, view, event, style);
    }
  }, {
    key: "update",
    value: function update(_update2) {
      if (this.mouseSelection) this.mouseSelection.update(_update2);
      if (_update2.transactions.length) this.lastKeyCode = this.lastSelectionTime = 0;
    }
  }, {
    key: "destroy",
    value: function destroy() {
      if (this.mouseSelection) this.mouseSelection.destroy();
    }
  }]);
  return InputState;
}(); // Key codes for modifier keys
var modifierCodes = [16, 17, 18, 20, 91, 92, 224, 225];
var MouseSelection = /*#__PURE__*/function () {
  function MouseSelection(inputState, view, startEvent, style) {
    _classCallCheck(this, MouseSelection);
    this.inputState = inputState;
    this.view = view;
    this.style = style;
    this.lastEvent = startEvent;
    var doc = view.contentDOM.ownerDocument;
    doc.addEventListener("mousemove", this.move = this.move.bind(this));
    doc.addEventListener("mouseup", this.up = this.up.bind(this));
    this.extend = startEvent.shiftKey;
    this.multiple = view.state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorState.allowMultipleSelections) && addsSelectionRange(view, startEvent);
    this.dragMove = dragMovesSelection(view, startEvent);
    this.dragging = isInPrimarySelection(view, startEvent) ? null : false;
    // When clicking outside of the selection, immediately apply the
    // effect of starting the selection
    if (this.dragging === false) {
      startEvent.preventDefault();
      this.select(startEvent);
    }
  }
  _createClass(MouseSelection, [{
    key: "move",
    value: function move(event) {
      if (event.buttons == 0) return this.destroy();
      if (this.dragging !== false) return;
      this.select(this.lastEvent = event);
    }
  }, {
    key: "up",
    value: function up(event) {
      if (this.dragging == null) this.select(this.lastEvent);
      if (!this.dragging) event.preventDefault();
      this.destroy();
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var doc = this.view.contentDOM.ownerDocument;
      doc.removeEventListener("mousemove", this.move);
      doc.removeEventListener("mouseup", this.up);
      this.inputState.mouseSelection = null;
    }
  }, {
    key: "select",
    value: function select(event) {
      var selection = this.style.get(event, this.extend, this.multiple);
      if (!selection.eq(this.view.state.selection) || selection.main.assoc != this.view.state.selection.main.assoc) this.view.dispatch({
        selection: selection,
        annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Transaction.userEvent.of("pointerselection"),
        scrollIntoView: true
      });
    }
  }, {
    key: "update",
    value: function update(_update3) {
      var _this20 = this;
      if (_update3.docChanged && this.dragging) this.dragging = this.dragging.map(_update3.changes);
      if (this.style.update(_update3)) setTimeout(function () {
        return _this20.select(_this20.lastEvent);
      }, 20);
    }
  }]);
  return MouseSelection;
}();
function addsSelectionRange(view, event) {
  var facet = view.state.facet(clickAddsSelectionRange);
  return facet.length ? facet[0](event) : browser.mac ? event.metaKey : event.ctrlKey;
}
function dragMovesSelection(view, event) {
  var facet = view.state.facet(dragMovesSelection$1);
  return facet.length ? facet[0](event) : browser.mac ? !event.altKey : !event.ctrlKey;
}
function isInPrimarySelection(view, event) {
  var main = view.state.selection.main;
  if (main.empty) return false;
  // On boundary clicks, check whether the coordinates are inside the
  // selection's client rectangles
  var sel = getSelection(view.root);
  if (sel.rangeCount == 0) return true;
  var rects = sel.getRangeAt(0).getClientRects();
  for (var i = 0; i < rects.length; i++) {
    var rect = rects[i];
    if (rect.left <= event.clientX && rect.right >= event.clientX && rect.top <= event.clientY && rect.bottom >= event.clientY) return true;
  }
  return false;
}
function eventBelongsToEditor(view, event) {
  if (!event.bubbles) return true;
  if (event.defaultPrevented) return false;
  for (var node = event.target, cView; node != view.contentDOM; node = node.parentNode) {
    if (!node || node.nodeType == 11 || (cView = ContentView.get(node)) && cView.ignoreEvent(event)) return false;
  }
  return true;
}
var handlers = /*@__PURE__*/Object.create(null);
// This is very crude, but unfortunately both these browsers _pretend_
// that they have a clipboard API—all the objects and methods are
// there, they just don't work, and they are hard to test.
var brokenClipboardAPI = browser.ie && browser.ie_version < 15 || browser.ios && browser.webkit_version < 604;
function capturePaste(view) {
  var parent = view.dom.parentNode;
  if (!parent) return;
  var target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.focus();
  setTimeout(function () {
    view.focus();
    target.remove();
    doPaste(view, target.value);
  }, 50);
}
function doPaste(view, input) {
  var state = view.state,
    changes,
    i = 1,
    text = state.toText(input);
  var byLine = text.lines == state.selection.ranges.length;
  var linewise = lastLinewiseCopy && state.selection.ranges.every(function (r) {
    return r.empty;
  }) && lastLinewiseCopy == text.toString();
  if (linewise) {
    var lastLine = -1;
    changes = state.changeByRange(function (range) {
      var line = state.doc.lineAt(range.from);
      if (line.from == lastLine) return {
        range: range
      };
      lastLine = line.from;
      var insert = state.toText((byLine ? text.line(i++).text : input) + state.lineBreak);
      return {
        changes: {
          from: line.from,
          insert: insert
        },
        range: _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(range.from + insert.length)
      };
    });
  } else if (byLine) {
    changes = state.changeByRange(function (range) {
      var line = text.line(i++);
      return {
        changes: {
          from: range.from,
          to: range.to,
          insert: line.text
        },
        range: _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(range.from + line.length)
      };
    });
  } else {
    changes = state.replaceSelection(text);
  }
  view.dispatch(changes, {
    annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Transaction.userEvent.of("paste"),
    scrollIntoView: true
  });
}
handlers.keydown = function (view, event) {
  view.inputState.setSelectionOrigin("keyboardselection");
};
var lastTouch = 0;
handlers.touchstart = function (view, e) {
  lastTouch = Date.now();
  view.inputState.setSelectionOrigin("pointerselection");
};
handlers.touchmove = function (view) {
  view.inputState.setSelectionOrigin("pointerselection");
};
handlers.mousedown = function (view, event) {
  view.observer.flush();
  if (lastTouch > Date.now() - 2000) return; // Ignore touch interaction
  var style = null;
  var _iterator18 = _createForOfIteratorHelper(view.state.facet(mouseSelectionStyle)),
    _step18;
  try {
    for (_iterator18.s(); !(_step18 = _iterator18.n()).done;) {
      var makeStyle = _step18.value;
      style = makeStyle(view, event);
      if (style) break;
    }
  } catch (err) {
    _iterator18.e(err);
  } finally {
    _iterator18.f();
  }
  if (!style && event.button == 0) style = basicMouseSelection(view, event);
  if (style) {
    if (view.root.activeElement != view.contentDOM) view.observer.ignore(function () {
      return focusPreventScroll(view.contentDOM);
    });
    view.inputState.startMouseSelection(view, event, style);
  }
};
function rangeForClick(view, pos, bias, type) {
  if (type == 1) {
    // Single click
    return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(pos, bias);
  } else if (type == 2) {
    // Double click
    return groupAt(view.state, pos, bias);
  } else {
    // Triple click
    var visual = LineView.find(view.docView, pos),
      line = view.state.doc.lineAt(visual ? visual.posAtEnd : pos);
    var from = visual ? visual.posAtStart : line.from,
      to = visual ? visual.posAtEnd : line.to;
    if (to < view.state.doc.length && to == line.to) to++;
    return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.range(from, to);
  }
}
var insideY = function insideY(y, rect) {
  return y >= rect.top && y <= rect.bottom;
};
var inside = function inside(x, y, rect) {
  return insideY(y, rect) && x >= rect.left && x <= rect.right;
};
// Try to determine, for the given coordinates, associated with the
// given position, whether they are related to the element before or
// the element after the position.
function findPositionSide(view, pos, x, y) {
  var line = LineView.find(view.docView, pos);
  if (!line) return 1;
  var off = pos - line.posAtStart;
  // Line boundaries point into the line
  if (off == 0) return 1;
  if (off == line.length) return -1;
  // Positions on top of an element point at that element
  var before = line.coordsAt(off, -1);
  if (before && inside(x, y, before)) return -1;
  var after = line.coordsAt(off, 1);
  if (after && inside(x, y, after)) return 1;
  // This is probably a line wrap point. Pick before if the point is
  // beside it.
  return before && insideY(y, before) ? -1 : 1;
}
function queryPos(view, event) {
  var pos = view.posAtCoords({
    x: event.clientX,
    y: event.clientY
  }, false);
  return {
    pos: pos,
    bias: findPositionSide(view, pos, event.clientX, event.clientY)
  };
}
var BadMouseDetail = browser.ie && browser.ie_version <= 11;
var lastMouseDown = null,
  lastMouseDownCount = 0,
  lastMouseDownTime = 0;
function getClickType(event) {
  if (!BadMouseDetail) return event.detail;
  var last = lastMouseDown,
    lastTime = lastMouseDownTime;
  lastMouseDown = event;
  lastMouseDownTime = Date.now();
  return lastMouseDownCount = !last || lastTime > Date.now() - 400 && Math.abs(last.clientX - event.clientX) < 2 && Math.abs(last.clientY - event.clientY) < 2 ? (lastMouseDownCount + 1) % 3 : 1;
}
function basicMouseSelection(view, event) {
  var start = queryPos(view, event),
    type = getClickType(event);
  var startSel = view.state.selection;
  var last = start,
    lastEvent = event;
  return {
    update: function update(_update4) {
      if (_update4.changes) {
        if (start) start.pos = _update4.changes.mapPos(start.pos);
        startSel = startSel.map(_update4.changes);
        lastEvent = null;
      }
    },
    get: function get(event, extend, multiple) {
      var cur;
      if (lastEvent && event.clientX == lastEvent.clientX && event.clientY == lastEvent.clientY) cur = last;else {
        cur = last = queryPos(view, event);
        lastEvent = event;
      }
      if (!cur || !start) return startSel;
      var range = rangeForClick(view, cur.pos, cur.bias, type);
      if (start.pos != cur.pos && !extend) {
        var startRange = rangeForClick(view, start.pos, start.bias, type);
        var from = Math.min(startRange.from, range.from),
          to = Math.max(startRange.to, range.to);
        range = from < range.from ? _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.range(from, to) : _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.range(to, from);
      }
      if (extend) return startSel.replaceRange(startSel.main.extend(range.from, range.to));else if (multiple) return startSel.addRange(range);else return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.create([range]);
    }
  };
}
handlers.dragstart = function (view, event) {
  var main = view.state.selection.main;
  var mouseSelection = view.inputState.mouseSelection;
  if (mouseSelection) mouseSelection.dragging = main;
  if (event.dataTransfer) {
    event.dataTransfer.setData("Text", view.state.sliceDoc(main.from, main.to));
    event.dataTransfer.effectAllowed = "copyMove";
  }
};
function dropText(view, event, text, direct) {
  var dropPos = view.posAtCoords({
    x: event.clientX,
    y: event.clientY
  });
  if (dropPos == null || !text) return;
  event.preventDefault();
  var mouseSelection = view.inputState.mouseSelection;
  var del = direct && mouseSelection && mouseSelection.dragging && mouseSelection.dragMove ? {
    from: mouseSelection.dragging.from,
    to: mouseSelection.dragging.to
  } : null;
  var ins = {
    from: dropPos,
    insert: text
  };
  var changes = view.state.changes(del ? [del, ins] : ins);
  view.focus();
  view.dispatch({
    changes: changes,
    selection: {
      anchor: changes.mapPos(dropPos, -1),
      head: changes.mapPos(dropPos, 1)
    },
    annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Transaction.userEvent.of("drop")
  });
}
handlers.drop = function (view, event) {
  if (!event.dataTransfer || !view.state.facet(editable)) return;
  var files = event.dataTransfer.files;
  if (files && files.length) {
    (function () {
      // For a file drop, read the file's text.
      event.preventDefault();
      var text = Array(files.length),
        read = 0;
      var finishFile = function finishFile() {
        if (++read == files.length) dropText(view, event, text.filter(function (s) {
          return s != null;
        }).join(view.state.lineBreak), false);
      };
      var _loop3 = function _loop3(i) {
        var reader = new FileReader();
        reader.onerror = finishFile;
        reader.onload = function () {
          if (!/[\x00-\x08\x0e-\x1f]{2}/.test(reader.result)) text[i] = reader.result;
          finishFile();
        };
        reader.readAsText(files[i]);
      };
      for (var i = 0; i < files.length; i++) {
        _loop3(i);
      }
    })();
  } else {
    dropText(view, event, event.dataTransfer.getData("Text"), true);
  }
};
handlers.paste = function (view, event) {
  if (!view.state.facet(editable)) return;
  view.observer.flush();
  var data = brokenClipboardAPI ? null : event.clipboardData;
  var text = data && data.getData("text/plain");
  if (text) {
    doPaste(view, text);
    event.preventDefault();
  } else {
    capturePaste(view);
  }
};
function captureCopy(view, text) {
  // The extra wrapper is somehow necessary on IE/Edge to prevent the
  // content from being mangled when it is put onto the clipboard
  var parent = view.dom.parentNode;
  if (!parent) return;
  var target = parent.appendChild(document.createElement("textarea"));
  target.style.cssText = "position: fixed; left: -10000px; top: 10px";
  target.value = text;
  target.focus();
  target.selectionEnd = text.length;
  target.selectionStart = 0;
  setTimeout(function () {
    target.remove();
    view.focus();
  }, 50);
}
function copiedRange(state) {
  var content = [],
    ranges = [],
    linewise = false;
  var _iterator19 = _createForOfIteratorHelper(state.selection.ranges),
    _step19;
  try {
    for (_iterator19.s(); !(_step19 = _iterator19.n()).done;) {
      var range = _step19.value;
      if (!range.empty) {
        content.push(state.sliceDoc(range.from, range.to));
        ranges.push(range);
      }
    }
  } catch (err) {
    _iterator19.e(err);
  } finally {
    _iterator19.f();
  }
  if (!content.length) {
    // Nothing selected, do a line-wise copy
    var upto = -1;
    var _iterator20 = _createForOfIteratorHelper(state.selection.ranges),
      _step20;
    try {
      for (_iterator20.s(); !(_step20 = _iterator20.n()).done;) {
        var from = _step20.value.from;
        var line = state.doc.lineAt(from);
        if (line.number > upto) {
          content.push(line.text);
          ranges.push({
            from: line.from,
            to: Math.min(state.doc.length, line.to + 1)
          });
        }
        upto = line.number;
      }
    } catch (err) {
      _iterator20.e(err);
    } finally {
      _iterator20.f();
    }
    linewise = true;
  }
  return {
    text: content.join(state.lineBreak),
    ranges: ranges,
    linewise: linewise
  };
}
var lastLinewiseCopy = null;
handlers.copy = handlers.cut = function (view, event) {
  var _copiedRange = copiedRange(view.state),
    text = _copiedRange.text,
    ranges = _copiedRange.ranges,
    linewise = _copiedRange.linewise;
  if (!text) return;
  lastLinewiseCopy = linewise ? text : null;
  var data = brokenClipboardAPI ? null : event.clipboardData;
  if (data) {
    event.preventDefault();
    data.clearData();
    data.setData("text/plain", text);
  } else {
    captureCopy(view, text);
  }
  if (event.type == "cut" && view.state.facet(editable)) view.dispatch({
    changes: ranges,
    scrollIntoView: true,
    annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Transaction.userEvent.of("cut")
  });
};
handlers.focus = handlers.blur = function (view) {
  setTimeout(function () {
    if (view.hasFocus != view.inputState.notifiedFocused) view.update([]);
  }, 10);
};
handlers.beforeprint = function (view) {
  view.viewState.printing = true;
  view.requestMeasure();
  setTimeout(function () {
    view.viewState.printing = false;
    view.requestMeasure();
  }, 2000);
};
function forceClearComposition(view, rapid) {
  if (view.docView.compositionDeco.size) {
    view.inputState.rapidCompositionStart = rapid;
    try {
      view.update([]);
    } finally {
      view.inputState.rapidCompositionStart = false;
    }
  }
}
handlers.compositionstart = handlers.compositionupdate = function (view) {
  if (view.inputState.composing < 0) {
    if (view.docView.compositionDeco.size) {
      view.observer.flush();
      forceClearComposition(view, true);
    }
    // FIXME possibly set a timeout to clear it again on Android
    view.inputState.composing = 0;
  }
};
handlers.compositionend = function (view) {
  view.inputState.composing = -1;
  view.inputState.compositionEndedAt = Date.now();
  setTimeout(function () {
    if (view.inputState.composing < 0) forceClearComposition(view, false);
  }, 50);
};
handlers.contextmenu = function (view) {
  view.inputState.lastContextMenu = Date.now();
};
var wrappingWhiteSpace = ["pre-wrap", "normal", "pre-line"];
var HeightOracle = /*#__PURE__*/function () {
  function HeightOracle() {
    _classCallCheck(this, HeightOracle);
    this.doc = _codemirror_text__WEBPACK_IMPORTED_MODULE_3__.Text.empty;
    this.lineWrapping = false;
    this.direction = Direction.LTR;
    this.heightSamples = {};
    this.lineHeight = 14;
    this.charWidth = 7;
    this.lineLength = 30;
    // Used to track, during updateHeight, if any actual heights changed
    this.heightChanged = false;
  }
  _createClass(HeightOracle, [{
    key: "heightForGap",
    value: function heightForGap(from, to) {
      var lines = this.doc.lineAt(to).number - this.doc.lineAt(from).number + 1;
      if (this.lineWrapping) lines += Math.ceil((to - from - lines * this.lineLength * 0.5) / this.lineLength);
      return this.lineHeight * lines;
    }
  }, {
    key: "heightForLine",
    value: function heightForLine(length) {
      if (!this.lineWrapping) return this.lineHeight;
      var lines = 1 + Math.max(0, Math.ceil((length - this.lineLength) / (this.lineLength - 5)));
      return lines * this.lineHeight;
    }
  }, {
    key: "setDoc",
    value: function setDoc(doc) {
      this.doc = doc;
      return this;
    }
  }, {
    key: "mustRefresh",
    value: function mustRefresh(lineHeights, whiteSpace, direction) {
      var newHeight = false;
      for (var i = 0; i < lineHeights.length; i++) {
        var h = lineHeights[i];
        if (h < 0) {
          i++;
        } else if (!this.heightSamples[Math.floor(h * 10)]) {
          // Round to .1 pixels
          newHeight = true;
          this.heightSamples[Math.floor(h * 10)] = true;
        }
      }
      return newHeight || wrappingWhiteSpace.indexOf(whiteSpace) > -1 != this.lineWrapping || this.direction != direction;
    }
  }, {
    key: "refresh",
    value: function refresh(whiteSpace, direction, lineHeight, charWidth, lineLength, knownHeights) {
      var lineWrapping = wrappingWhiteSpace.indexOf(whiteSpace) > -1;
      var changed = Math.round(lineHeight) != Math.round(this.lineHeight) || this.lineWrapping != lineWrapping || this.direction != direction;
      this.lineWrapping = lineWrapping;
      this.direction = direction;
      this.lineHeight = lineHeight;
      this.charWidth = charWidth;
      this.lineLength = lineLength;
      if (changed) {
        this.heightSamples = {};
        for (var i = 0; i < knownHeights.length; i++) {
          var h = knownHeights[i];
          if (h < 0) i++;else this.heightSamples[Math.floor(h * 10)] = true;
        }
      }
      return changed;
    }
  }]);
  return HeightOracle;
}(); // This object is used by `updateHeight` to make DOM measurements
// arrive at the right nides. The `heights` array is a sequence of
// block heights, starting from position `from`.
var MeasuredHeights = /*#__PURE__*/function () {
  function MeasuredHeights(from, heights) {
    _classCallCheck(this, MeasuredHeights);
    this.from = from;
    this.heights = heights;
    this.index = 0;
  }
  _createClass(MeasuredHeights, [{
    key: "more",
    get: function get() {
      return this.index < this.heights.length;
    }
  }]);
  return MeasuredHeights;
}(); /**
     Record used to represent information about a block-level element
     in the editor view.
     */
var BlockInfo = /*#__PURE__*/function () {
  /**
  @internal
  */
  function BlockInfo(
  /**
  The start of the element in the document.
  */
  from,
  /**
  The length of the element.
  */
  length,
  /**
  The top position of the element.
  */
  top,
  /**
  Its height.
  */
  height,
  /**
  The type of element this is. When querying lines, this may be
  an array of all the blocks that make up the line.
  */
  type) {
    _classCallCheck(this, BlockInfo);
    this.from = from;
    this.length = length;
    this.top = top;
    this.height = height;
    this.type = type;
  }
  /**
  The end of the element as a document position.
  */
  _createClass(BlockInfo, [{
    key: "to",
    get: function get() {
      return this.from + this.length;
    }
    /**
    The bottom position of the element.
    */
  }, {
    key: "bottom",
    get: function get() {
      return this.top + this.height;
    }
    /**
    @internal
    */
  }, {
    key: "join",
    value: function join(other) {
      var detail = (Array.isArray(this.type) ? this.type : [this]).concat(Array.isArray(other.type) ? other.type : [other]);
      return new BlockInfo(this.from, this.length + other.length, this.top, this.height + other.height, detail);
    }
  }]);
  return BlockInfo;
}();
var QueryType = /*@__PURE__*/function (QueryType) {
  QueryType[QueryType["ByPos"] = 0] = "ByPos";
  QueryType[QueryType["ByHeight"] = 1] = "ByHeight";
  QueryType[QueryType["ByPosNoHeight"] = 2] = "ByPosNoHeight";
  return QueryType;
}(QueryType || (QueryType = {}));
var Epsilon = 1e-4;
var HeightMap = /*#__PURE__*/function () {
  function HeightMap(length,
  // The number of characters covered
  height) {
    var flags = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
    _classCallCheck(this, HeightMap);
    this.length = length;
    this.height = height;
    this.flags = flags;
  }
  _createClass(HeightMap, [{
    key: "outdated",
    get: function get() {
      return (this.flags & 2 /* Outdated */) > 0;
    },
    set: function set(value) {
      this.flags = (value ? 2 /* Outdated */ : 0) | this.flags & ~2 /* Outdated */;
    }
  }, {
    key: "setHeight",
    value: function setHeight(oracle, height) {
      if (this.height != height) {
        if (Math.abs(this.height - height) > Epsilon) oracle.heightChanged = true;
        this.height = height;
      }
    }
    // Base case is to replace a leaf node, which simply builds a tree
    // from the new nodes and returns that (HeightMapBranch and
    // HeightMapGap override this to actually use from/to)
  }, {
    key: "replace",
    value: function replace(_from, _to, nodes) {
      return HeightMap.of(nodes);
    }
    // Again, these are base cases, and are overridden for branch and gap nodes.
  }, {
    key: "decomposeLeft",
    value: function decomposeLeft(_to, result) {
      result.push(this);
    }
  }, {
    key: "decomposeRight",
    value: function decomposeRight(_from, result) {
      result.push(this);
    }
  }, {
    key: "applyChanges",
    value: function applyChanges(decorations, oldDoc, oracle, changes) {
      var me = this;
      for (var i = changes.length - 1; i >= 0; i--) {
        var _changes$i = changes[i],
          fromA = _changes$i.fromA,
          toA = _changes$i.toA,
          fromB = _changes$i.fromB,
          toB = _changes$i.toB;
        var start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
        var end = start.to >= toA ? start : me.lineAt(toA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
        toB += end.to - toA;
        toA = end.to;
        while (i > 0 && start.from <= changes[i - 1].toA) {
          fromA = changes[i - 1].fromA;
          fromB = changes[i - 1].fromB;
          i--;
          if (fromA < start.from) start = me.lineAt(fromA, QueryType.ByPosNoHeight, oldDoc, 0, 0);
        }
        fromB += start.from - fromA;
        fromA = start.from;
        var nodes = NodeBuilder.build(oracle, decorations, fromB, toB);
        me = me.replace(fromA, toA, nodes);
      }
      return me.updateHeight(oracle, 0);
    }
  }], [{
    key: "empty",
    value: function empty() {
      return new HeightMapText(0, 0);
    }
    // nodes uses null values to indicate the position of line breaks.
    // There are never line breaks at the start or end of the array, or
    // two line breaks next to each other, and the array isn't allowed
    // to be empty (same restrictions as return value from the builder).
  }, {
    key: "of",
    value: function of(nodes) {
      if (nodes.length == 1) return nodes[0];
      var i = 0,
        j = nodes.length,
        before = 0,
        after = 0;
      for (;;) {
        if (i == j) {
          if (before > after * 2) {
            var split = nodes[i - 1];
            if (split["break"]) nodes.splice(--i, 1, split.left, null, split.right);else nodes.splice(--i, 1, split.left, split.right);
            j += 1 + split["break"];
            before -= split.size;
          } else if (after > before * 2) {
            var _split = nodes[j];
            if (_split["break"]) nodes.splice(j, 1, _split.left, null, _split.right);else nodes.splice(j, 1, _split.left, _split.right);
            j += 2 + _split["break"];
            after -= _split.size;
          } else {
            break;
          }
        } else if (before < after) {
          var next = nodes[i++];
          if (next) before += next.size;
        } else {
          var _next2 = nodes[--j];
          if (_next2) after += _next2.size;
        }
      }
      var brk = 0;
      if (nodes[i - 1] == null) {
        brk = 1;
        i--;
      } else if (nodes[i] == null) {
        brk = 1;
        j++;
      }
      return new HeightMapBranch(HeightMap.of(nodes.slice(0, i)), brk, HeightMap.of(nodes.slice(j)));
    }
  }]);
  return HeightMap;
}();
HeightMap.prototype.size = 1;
var HeightMapBlock = /*#__PURE__*/function (_HeightMap) {
  _inherits(HeightMapBlock, _HeightMap);
  var _super16 = _createSuper(HeightMapBlock);
  function HeightMapBlock(length, height, type) {
    var _this21;
    _classCallCheck(this, HeightMapBlock);
    _this21 = _super16.call(this, length, height);
    _this21.type = type;
    return _this21;
  }
  _createClass(HeightMapBlock, [{
    key: "blockAt",
    value: function blockAt(_height, _doc, top, offset) {
      return new BlockInfo(offset, this.length, top, this.height, this.type);
    }
  }, {
    key: "lineAt",
    value: function lineAt(_value, _type, doc, top, offset) {
      return this.blockAt(0, doc, top, offset);
    }
  }, {
    key: "forEachLine",
    value: function forEachLine(_from, _to, doc, top, offset, f) {
      f(this.blockAt(0, doc, top, offset));
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(oracle) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var _force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var measured = arguments.length > 3 ? arguments[3] : undefined;
      if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);
      this.outdated = false;
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "block(".concat(this.length, ")");
    }
  }]);
  return HeightMapBlock;
}(HeightMap);
var HeightMapText = /*#__PURE__*/function (_HeightMapBlock) {
  _inherits(HeightMapText, _HeightMapBlock);
  var _super17 = _createSuper(HeightMapText);
  function HeightMapText(length, height) {
    var _this22;
    _classCallCheck(this, HeightMapText);
    _this22 = _super17.call(this, length, height, BlockType.Text);
    _this22.collapsed = 0; // Amount of collapsed content in the line
    _this22.widgetHeight = 0; // Maximum inline widget height
    return _this22;
  }
  _createClass(HeightMapText, [{
    key: "replace",
    value: function replace(_from, _to, nodes) {
      var node = nodes[0];
      if (nodes.length == 1 && (node instanceof HeightMapText || node instanceof HeightMapGap && node.flags & 4 /* SingleLine */) && Math.abs(this.length - node.length) < 10) {
        if (node instanceof HeightMapGap) node = new HeightMapText(node.length, this.height);else node.height = this.height;
        if (!this.outdated) node.outdated = false;
        return node;
      } else {
        return HeightMap.of(nodes);
      }
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(oracle) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var measured = arguments.length > 3 ? arguments[3] : undefined;
      if (measured && measured.from <= offset && measured.more) this.setHeight(oracle, measured.heights[measured.index++]);else if (force || this.outdated) this.setHeight(oracle, Math.max(this.widgetHeight, oracle.heightForLine(this.length - this.collapsed)));
      this.outdated = false;
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "line(".concat(this.length).concat(this.collapsed ? -this.collapsed : "").concat(this.widgetHeight ? ":" + this.widgetHeight : "", ")");
    }
  }]);
  return HeightMapText;
}(HeightMapBlock);
var HeightMapGap = /*#__PURE__*/function (_HeightMap2) {
  _inherits(HeightMapGap, _HeightMap2);
  var _super18 = _createSuper(HeightMapGap);
  function HeightMapGap(length) {
    _classCallCheck(this, HeightMapGap);
    return _super18.call(this, length, 0);
  }
  _createClass(HeightMapGap, [{
    key: "lines",
    value: function lines(doc, offset) {
      var firstLine = doc.lineAt(offset).number,
        lastLine = doc.lineAt(offset + this.length).number;
      return {
        firstLine: firstLine,
        lastLine: lastLine,
        lineHeight: this.height / (lastLine - firstLine + 1)
      };
    }
  }, {
    key: "blockAt",
    value: function blockAt(height, doc, top, offset) {
      var _this$lines = this.lines(doc, offset),
        firstLine = _this$lines.firstLine,
        lastLine = _this$lines.lastLine,
        lineHeight = _this$lines.lineHeight;
      var line = Math.max(0, Math.min(lastLine - firstLine, Math.floor((height - top) / lineHeight)));
      var _doc$line = doc.line(firstLine + line),
        from = _doc$line.from,
        length = _doc$line.length;
      return new BlockInfo(from, length, top + lineHeight * line, lineHeight, BlockType.Text);
    }
  }, {
    key: "lineAt",
    value: function lineAt(value, type, doc, top, offset) {
      if (type == QueryType.ByHeight) return this.blockAt(value, doc, top, offset);
      if (type == QueryType.ByPosNoHeight) {
        var _doc$lineAt = doc.lineAt(value),
          _from2 = _doc$lineAt.from,
          to = _doc$lineAt.to;
        return new BlockInfo(_from2, to - _from2, 0, 0, BlockType.Text);
      }
      var _this$lines2 = this.lines(doc, offset),
        firstLine = _this$lines2.firstLine,
        lineHeight = _this$lines2.lineHeight;
      var _doc$lineAt2 = doc.lineAt(value),
        from = _doc$lineAt2.from,
        length = _doc$lineAt2.length,
        number = _doc$lineAt2.number;
      return new BlockInfo(from, length, top + lineHeight * (number - firstLine), lineHeight, BlockType.Text);
    }
  }, {
    key: "forEachLine",
    value: function forEachLine(from, to, doc, top, offset, f) {
      var _this$lines3 = this.lines(doc, offset),
        firstLine = _this$lines3.firstLine,
        lineHeight = _this$lines3.lineHeight;
      for (var pos = Math.max(from, offset), end = Math.min(offset + this.length, to); pos <= end;) {
        var line = doc.lineAt(pos);
        if (pos == from) top += lineHeight * (line.number - firstLine);
        f(new BlockInfo(line.from, line.length, top, lineHeight, BlockType.Text));
        top += lineHeight;
        pos = line.to + 1;
      }
    }
  }, {
    key: "replace",
    value: function replace(from, to, nodes) {
      var after = this.length - to;
      if (after > 0) {
        var last = nodes[nodes.length - 1];
        if (last instanceof HeightMapGap) nodes[nodes.length - 1] = new HeightMapGap(last.length + after);else nodes.push(null, new HeightMapGap(after - 1));
      }
      if (from > 0) {
        var first = nodes[0];
        if (first instanceof HeightMapGap) nodes[0] = new HeightMapGap(from + first.length);else nodes.unshift(new HeightMapGap(from - 1), null);
      }
      return HeightMap.of(nodes);
    }
  }, {
    key: "decomposeLeft",
    value: function decomposeLeft(to, result) {
      result.push(new HeightMapGap(to - 1), null);
    }
  }, {
    key: "decomposeRight",
    value: function decomposeRight(from, result) {
      result.push(null, new HeightMapGap(this.length - from - 1));
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(oracle) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var measured = arguments.length > 3 ? arguments[3] : undefined;
      var end = offset + this.length;
      if (measured && measured.from <= offset + this.length && measured.more) {
        // Fill in part of this gap with measured lines. We know there
        // can't be widgets or collapsed ranges in those lines, because
        // they would already have been added to the heightmap (gaps
        // only contain plain text).
        var nodes = [],
          pos = Math.max(offset, measured.from);
        if (measured.from > offset) nodes.push(new HeightMapGap(measured.from - offset - 1).updateHeight(oracle, offset));
        while (pos <= end && measured.more) {
          var len = oracle.doc.lineAt(pos).length;
          if (nodes.length) nodes.push(null);
          var line = new HeightMapText(len, measured.heights[measured.index++]);
          line.outdated = false;
          nodes.push(line);
          pos += len + 1;
        }
        if (pos <= end) nodes.push(null, new HeightMapGap(end - pos).updateHeight(oracle, pos));
        oracle.heightChanged = true;
        return HeightMap.of(nodes);
      } else if (force || this.outdated) {
        this.setHeight(oracle, oracle.heightForGap(offset, offset + this.length));
        this.outdated = false;
      }
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return "gap(".concat(this.length, ")");
    }
  }]);
  return HeightMapGap;
}(HeightMap);
var HeightMapBranch = /*#__PURE__*/function (_HeightMap3) {
  _inherits(HeightMapBranch, _HeightMap3);
  var _super19 = _createSuper(HeightMapBranch);
  function HeightMapBranch(left, brk, right) {
    var _this23;
    _classCallCheck(this, HeightMapBranch);
    _this23 = _super19.call(this, left.length + brk + right.length, left.height + right.height, brk | (left.outdated || right.outdated ? 2 /* Outdated */ : 0));
    _this23.left = left;
    _this23.right = right;
    _this23.size = left.size + right.size;
    return _this23;
  }
  _createClass(HeightMapBranch, [{
    key: "break",
    get: function get() {
      return this.flags & 1 /* Break */;
    }
  }, {
    key: "blockAt",
    value: function blockAt(height, doc, top, offset) {
      var mid = top + this.left.height;
      return height < mid || this.right.height == 0 ? this.left.blockAt(height, doc, top, offset) : this.right.blockAt(height, doc, mid, offset + this.left.length + this["break"]);
    }
  }, {
    key: "lineAt",
    value: function lineAt(value, type, doc, top, offset) {
      var rightTop = top + this.left.height,
        rightOffset = offset + this.left.length + this["break"];
      var left = type == QueryType.ByHeight ? value < rightTop || this.right.height == 0 : value < rightOffset;
      var base = left ? this.left.lineAt(value, type, doc, top, offset) : this.right.lineAt(value, type, doc, rightTop, rightOffset);
      if (this["break"] || (left ? base.to < rightOffset : base.from > rightOffset)) return base;
      var subQuery = type == QueryType.ByPosNoHeight ? QueryType.ByPosNoHeight : QueryType.ByPos;
      if (left) return base.join(this.right.lineAt(rightOffset, subQuery, doc, rightTop, rightOffset));else return this.left.lineAt(rightOffset, subQuery, doc, top, offset).join(base);
    }
  }, {
    key: "forEachLine",
    value: function forEachLine(from, to, doc, top, offset, f) {
      var rightTop = top + this.left.height,
        rightOffset = offset + this.left.length + this["break"];
      if (this["break"]) {
        if (from < rightOffset) this.left.forEachLine(from, to, doc, top, offset, f);
        if (to >= rightOffset) this.right.forEachLine(from, to, doc, rightTop, rightOffset, f);
      } else {
        var mid = this.lineAt(rightOffset, QueryType.ByPos, doc, top, offset);
        if (from < mid.from) this.left.forEachLine(from, mid.from - 1, doc, top, offset, f);
        if (mid.to >= from && mid.from <= to) f(mid);
        if (to > mid.to) this.right.forEachLine(mid.to + 1, to, doc, rightTop, rightOffset, f);
      }
    }
  }, {
    key: "replace",
    value: function replace(from, to, nodes) {
      var rightStart = this.left.length + this["break"];
      if (to < rightStart) return this.balanced(this.left.replace(from, to, nodes), this.right);
      if (from > this.left.length) return this.balanced(this.left, this.right.replace(from - rightStart, to - rightStart, nodes));
      var result = [];
      if (from > 0) this.decomposeLeft(from, result);
      var left = result.length;
      var _iterator21 = _createForOfIteratorHelper(nodes),
        _step21;
      try {
        for (_iterator21.s(); !(_step21 = _iterator21.n()).done;) {
          var node = _step21.value;
          result.push(node);
        }
      } catch (err) {
        _iterator21.e(err);
      } finally {
        _iterator21.f();
      }
      if (from > 0) mergeGaps(result, left - 1);
      if (to < this.length) {
        var right = result.length;
        this.decomposeRight(to, result);
        mergeGaps(result, right);
      }
      return HeightMap.of(result);
    }
  }, {
    key: "decomposeLeft",
    value: function decomposeLeft(to, result) {
      var left = this.left.length;
      if (to <= left) return this.left.decomposeLeft(to, result);
      result.push(this.left);
      if (this["break"]) {
        left++;
        if (to >= left) result.push(null);
      }
      if (to > left) this.right.decomposeLeft(to - left, result);
    }
  }, {
    key: "decomposeRight",
    value: function decomposeRight(from, result) {
      var left = this.left.length,
        right = left + this["break"];
      if (from >= right) return this.right.decomposeRight(from - right, result);
      if (from < left) this.left.decomposeRight(from, result);
      if (this["break"] && from < right) result.push(null);
      result.push(this.right);
    }
  }, {
    key: "balanced",
    value: function balanced(left, right) {
      if (left.size > 2 * right.size || right.size > 2 * left.size) return HeightMap.of(this["break"] ? [left, null, right] : [left, right]);
      this.left = left;
      this.right = right;
      this.height = left.height + right.height;
      this.outdated = left.outdated || right.outdated;
      this.size = left.size + right.size;
      this.length = left.length + this["break"] + right.length;
      return this;
    }
  }, {
    key: "updateHeight",
    value: function updateHeight(oracle) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var force = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var measured = arguments.length > 3 ? arguments[3] : undefined;
      var left = this.left,
        right = this.right,
        rightStart = offset + left.length + this["break"],
        rebalance = null;
      if (measured && measured.from <= offset + left.length && measured.more) rebalance = left = left.updateHeight(oracle, offset, force, measured);else left.updateHeight(oracle, offset, force);
      if (measured && measured.from <= rightStart + right.length && measured.more) rebalance = right = right.updateHeight(oracle, rightStart, force, measured);else right.updateHeight(oracle, rightStart, force);
      if (rebalance) return this.balanced(left, right);
      this.height = this.left.height + this.right.height;
      this.outdated = false;
      return this;
    }
  }, {
    key: "toString",
    value: function toString() {
      return this.left + (this["break"] ? " " : "-") + this.right;
    }
  }]);
  return HeightMapBranch;
}(HeightMap);
function mergeGaps(nodes, around) {
  var before, after;
  if (nodes[around] == null && (before = nodes[around - 1]) instanceof HeightMapGap && (after = nodes[around + 1]) instanceof HeightMapGap) nodes.splice(around - 1, 3, new HeightMapGap(before.length + 1 + after.length));
}
var relevantWidgetHeight = 5;
var NodeBuilder = /*#__PURE__*/function () {
  function NodeBuilder(pos, oracle) {
    _classCallCheck(this, NodeBuilder);
    this.pos = pos;
    this.oracle = oracle;
    this.nodes = [];
    this.lineStart = -1;
    this.lineEnd = -1;
    this.covering = null;
    this.writtenTo = pos;
  }
  _createClass(NodeBuilder, [{
    key: "isCovered",
    get: function get() {
      return this.covering && this.nodes[this.nodes.length - 1] == this.covering;
    }
  }, {
    key: "span",
    value: function span(_from, to) {
      if (this.lineStart > -1) {
        var end = Math.min(to, this.lineEnd),
          last = this.nodes[this.nodes.length - 1];
        if (last instanceof HeightMapText) last.length += end - this.pos;else if (end > this.pos || !this.isCovered) this.nodes.push(new HeightMapText(end - this.pos, -1));
        this.writtenTo = end;
        if (to > end) {
          this.nodes.push(null);
          this.writtenTo++;
          this.lineStart = -1;
        }
      }
      this.pos = to;
    }
  }, {
    key: "point",
    value: function point(from, to, deco) {
      if (from < to || deco.heightRelevant) {
        var height = deco.widget ? Math.max(0, deco.widget.estimatedHeight) : 0;
        var len = to - from;
        if (deco.block) {
          this.addBlock(new HeightMapBlock(len, height, deco.type));
        } else if (len || height >= relevantWidgetHeight) {
          this.addLineDeco(height, len);
        }
      } else if (to > from) {
        this.span(from, to);
      }
      if (this.lineEnd > -1 && this.lineEnd < this.pos) this.lineEnd = this.oracle.doc.lineAt(this.pos).to;
    }
  }, {
    key: "enterLine",
    value: function enterLine() {
      if (this.lineStart > -1) return;
      var _this$oracle$doc$line = this.oracle.doc.lineAt(this.pos),
        from = _this$oracle$doc$line.from,
        to = _this$oracle$doc$line.to;
      this.lineStart = from;
      this.lineEnd = to;
      if (this.writtenTo < from) {
        if (this.writtenTo < from - 1 || this.nodes[this.nodes.length - 1] == null) this.nodes.push(this.blankContent(this.writtenTo, from - 1));
        this.nodes.push(null);
      }
      if (this.pos > from) this.nodes.push(new HeightMapText(this.pos - from, -1));
      this.writtenTo = this.pos;
    }
  }, {
    key: "blankContent",
    value: function blankContent(from, to) {
      var gap = new HeightMapGap(to - from);
      if (this.oracle.doc.lineAt(from).to == to) gap.flags |= 4 /* SingleLine */;
      return gap;
    }
  }, {
    key: "ensureLine",
    value: function ensureLine() {
      this.enterLine();
      var last = this.nodes.length ? this.nodes[this.nodes.length - 1] : null;
      if (last instanceof HeightMapText) return last;
      var line = new HeightMapText(0, -1);
      this.nodes.push(line);
      return line;
    }
  }, {
    key: "addBlock",
    value: function addBlock(block) {
      this.enterLine();
      if (block.type == BlockType.WidgetAfter && !this.isCovered) this.ensureLine();
      this.nodes.push(block);
      this.writtenTo = this.pos = this.pos + block.length;
      if (block.type != BlockType.WidgetBefore) this.covering = block;
    }
  }, {
    key: "addLineDeco",
    value: function addLineDeco(height, length) {
      var line = this.ensureLine();
      line.length += length;
      line.collapsed += length;
      line.widgetHeight = Math.max(line.widgetHeight, height);
      this.writtenTo = this.pos = this.pos + length;
    }
  }, {
    key: "finish",
    value: function finish(from) {
      var last = this.nodes.length == 0 ? null : this.nodes[this.nodes.length - 1];
      if (this.lineStart > -1 && !(last instanceof HeightMapText) && !this.isCovered) this.nodes.push(new HeightMapText(0, -1));else if (this.writtenTo < this.pos || last == null) this.nodes.push(this.blankContent(this.writtenTo, this.pos));
      var pos = from;
      var _iterator22 = _createForOfIteratorHelper(this.nodes),
        _step22;
      try {
        for (_iterator22.s(); !(_step22 = _iterator22.n()).done;) {
          var node = _step22.value;
          if (node instanceof HeightMapText) node.updateHeight(this.oracle, pos);
          pos += node ? node.length : 1;
        }
      } catch (err) {
        _iterator22.e(err);
      } finally {
        _iterator22.f();
      }
      return this.nodes;
    }
    // Always called with a region that on both sides either stretches
    // to a line break or the end of the document.
    // The returned array uses null to indicate line breaks, but never
    // starts or ends in a line break, or has multiple line breaks next
    // to each other.
  }], [{
    key: "build",
    value: function build(oracle, decorations, from, to) {
      var builder = new NodeBuilder(from, oracle);
      _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeSet.spans(decorations, from, to, builder, 0);
      return builder.finish(from);
    }
  }]);
  return NodeBuilder;
}();
function heightRelevantDecoChanges(a, b, diff) {
  var comp = new DecorationComparator();
  _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeSet.compare(a, b, diff, comp, 0);
  return comp.changes;
}
var DecorationComparator = /*#__PURE__*/function () {
  function DecorationComparator() {
    _classCallCheck(this, DecorationComparator);
    this.changes = [];
  }
  _createClass(DecorationComparator, [{
    key: "compareRange",
    value: function compareRange() {}
  }, {
    key: "comparePoint",
    value: function comparePoint(from, to, a, b) {
      if (from < to || a && a.heightRelevant || b && b.heightRelevant) addRange(from, to, this.changes, 5);
    }
  }]);
  return DecorationComparator;
}();
function visiblePixelRange(dom, paddingTop) {
  var rect = dom.getBoundingClientRect();
  var left = Math.max(0, rect.left),
    right = Math.min(innerWidth, rect.right);
  var top = Math.max(0, rect.top),
    bottom = Math.min(innerHeight, rect.bottom);
  for (var parent = dom.parentNode; parent;) {
    // (Cast to any because TypeScript is useless with Node types)
    if (parent.nodeType == 1) {
      var style = window.getComputedStyle(parent);
      if ((parent.scrollHeight > parent.clientHeight || parent.scrollWidth > parent.clientWidth) && style.overflow != "visible") {
        var parentRect = parent.getBoundingClientRect();
        left = Math.max(left, parentRect.left);
        right = Math.min(right, parentRect.right);
        top = Math.max(top, parentRect.top);
        bottom = Math.min(bottom, parentRect.bottom);
      }
      parent = style.position == "absolute" || style.position == "fixed" ? parent.offsetParent : parent.parentNode;
    } else if (parent.nodeType == 11) {
      // Shadow root
      parent = parent.host;
    } else {
      break;
    }
  }
  return {
    left: left - rect.left,
    right: right - rect.left,
    top: top - (rect.top + paddingTop),
    bottom: bottom - (rect.top + paddingTop)
  };
}
// Line gaps are placeholder widgets used to hide pieces of overlong
// lines within the viewport, as a kludge to keep the editor
// responsive when a ridiculously long line is loaded into it.
var LineGap = /*#__PURE__*/function () {
  function LineGap(from, to, size) {
    _classCallCheck(this, LineGap);
    this.from = from;
    this.to = to;
    this.size = size;
  }
  _createClass(LineGap, [{
    key: "draw",
    value: function draw(wrapping) {
      return Decoration.replace({
        widget: new LineGapWidget(this.size, wrapping)
      }).range(this.from, this.to);
    }
  }], [{
    key: "same",
    value: function same(a, b) {
      if (a.length != b.length) return false;
      for (var i = 0; i < a.length; i++) {
        var gA = a[i],
          gB = b[i];
        if (gA.from != gB.from || gA.to != gB.to || gA.size != gB.size) return false;
      }
      return true;
    }
  }]);
  return LineGap;
}();
var LineGapWidget = /*#__PURE__*/function (_WidgetType4) {
  _inherits(LineGapWidget, _WidgetType4);
  var _super20 = _createSuper(LineGapWidget);
  function LineGapWidget(size, vertical) {
    var _this24;
    _classCallCheck(this, LineGapWidget);
    _this24 = _super20.call(this);
    _this24.size = size;
    _this24.vertical = vertical;
    return _this24;
  }
  _createClass(LineGapWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.size == this.size && other.vertical == this.vertical;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      var elt = document.createElement("div");
      if (this.vertical) {
        elt.style.height = this.size + "px";
      } else {
        elt.style.width = this.size + "px";
        elt.style.height = "2px";
        elt.style.display = "inline-block";
      }
      return elt;
    }
  }, {
    key: "estimatedHeight",
    get: function get() {
      return this.vertical ? this.size : -1;
    }
  }]);
  return LineGapWidget;
}(WidgetType);
var ViewState = /*#__PURE__*/function () {
  function ViewState(state) {
    _classCallCheck(this, ViewState);
    this.state = state;
    // These are contentDOM-local coordinates
    this.pixelViewport = {
      left: 0,
      right: window.innerWidth,
      top: 0,
      bottom: 0
    };
    this.inView = true;
    this.paddingTop = 0;
    this.paddingBottom = 0;
    this.contentWidth = 0;
    this.heightOracle = new HeightOracle();
    // See VP.MaxDOMHeight
    this.scaler = IdScaler;
    this.scrollTo = null;
    // Briefly set to true when printing, to disable viewport limiting
    this.printing = false;
    this.visibleRanges = [];
    // Cursor 'assoc' is only significant when the cursor is on a line
    // wrap point, where it must stick to the character that it is
    // associated with. Since browsers don't provide a reasonable
    // interface to set or query this, when a selection is set that
    // might cause this to be significant, this flag is set. The next
    // measure phase will check whether the cursor is on a line-wrapping
    // boundary and, if so, reset it to make sure it is positioned in
    // the right place.
    this.mustEnforceCursorAssoc = false;
    this.heightMap = HeightMap.empty().applyChanges(state.facet(decorations), _codemirror_text__WEBPACK_IMPORTED_MODULE_3__.Text.empty, this.heightOracle.setDoc(state.doc), [new ChangedRange(0, 0, 0, state.doc.length)]);
    this.viewport = this.getViewport(0, null);
    this.updateForViewport();
    this.lineGaps = this.ensureLineGaps([]);
    this.lineGapDeco = Decoration.set(this.lineGaps.map(function (gap) {
      return gap.draw(false);
    }));
    this.computeVisibleRanges();
  }
  _createClass(ViewState, [{
    key: "updateForViewport",
    value: function updateForViewport() {
      var _this25 = this;
      var viewports = [this.viewport],
        main = this.state.selection.main;
      var _loop4 = function _loop4(i) {
        var pos = i ? main.head : main.anchor;
        if (!viewports.some(function (_ref7) {
          var from = _ref7.from,
            to = _ref7.to;
          return pos >= from && pos <= to;
        })) {
          var _this25$lineAt = _this25.lineAt(pos, 0),
            from = _this25$lineAt.from,
            to = _this25$lineAt.to;
          viewports.push(new Viewport(from, to));
        }
      };
      for (var i = 0; i <= 1; i++) {
        _loop4(i);
      }
      this.viewports = viewports.sort(function (a, b) {
        return a.from - b.from;
      });
      this.scaler = this.heightMap.height <= 7000000 /* MaxDOMHeight */ ? IdScaler : new BigScaler(this.heightOracle.doc, this.heightMap, this.viewports);
    }
  }, {
    key: "update",
    value: function update(_update5) {
      var scrollTo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var prev = this.state;
      this.state = _update5.state;
      var newDeco = this.state.facet(decorations);
      var contentChanges = _update5.changedRanges;
      var heightChanges = ChangedRange.extendWithRanges(contentChanges, heightRelevantDecoChanges(_update5.startState.facet(decorations), newDeco, _update5 ? _update5.changes : _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.ChangeSet.empty(this.state.doc.length)));
      var prevHeight = this.heightMap.height;
      this.heightMap = this.heightMap.applyChanges(newDeco, prev.doc, this.heightOracle.setDoc(this.state.doc), heightChanges);
      if (this.heightMap.height != prevHeight) _update5.flags |= 2 /* Height */;
      var viewport = heightChanges.length ? this.mapViewport(this.viewport, _update5.changes) : this.viewport;
      if (scrollTo && (scrollTo.head < viewport.from || scrollTo.head > viewport.to) || !this.viewportIsAppropriate(viewport)) viewport = this.getViewport(0, scrollTo);
      if (!viewport.eq(this.viewport)) {
        this.viewport = viewport;
        _update5.flags |= 4 /* Viewport */;
      }

      this.updateForViewport();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000 /* MinViewPort */) _update5.flags |= this.updateLineGaps(this.ensureLineGaps(this.mapLineGaps(this.lineGaps, _update5.changes)));
      this.computeVisibleRanges();
      if (scrollTo) this.scrollTo = scrollTo;
      if (!this.mustEnforceCursorAssoc && _update5.selectionSet && _update5.view.lineWrapping && _update5.state.selection.main.empty && _update5.state.selection.main.assoc) this.mustEnforceCursorAssoc = true;
    }
  }, {
    key: "measure",
    value: function measure(docView, repeated) {
      var dom = docView.dom,
        whiteSpace = "",
        direction = Direction.LTR;
      if (!repeated) {
        // Vertical padding
        var style = window.getComputedStyle(dom);
        whiteSpace = style.whiteSpace, direction = style.direction == "rtl" ? Direction.RTL : Direction.LTR;
        this.paddingTop = parseInt(style.paddingTop) || 0;
        this.paddingBottom = parseInt(style.paddingBottom) || 0;
      }
      // Pixel viewport
      var pixelViewport = this.printing ? {
        top: -1e8,
        bottom: 1e8,
        left: -1e8,
        right: 1e8
      } : visiblePixelRange(dom, this.paddingTop);
      var dTop = pixelViewport.top - this.pixelViewport.top,
        dBottom = pixelViewport.bottom - this.pixelViewport.bottom;
      this.pixelViewport = pixelViewport;
      this.inView = this.pixelViewport.bottom > this.pixelViewport.top && this.pixelViewport.right > this.pixelViewport.left;
      if (!this.inView) return 0;
      var lineHeights = docView.measureVisibleLineHeights();
      var refresh = false,
        bias = 0,
        result = 0,
        oracle = this.heightOracle;
      if (!repeated) {
        var contentWidth = docView.dom.clientWidth;
        if (oracle.mustRefresh(lineHeights, whiteSpace, direction) || oracle.lineWrapping && Math.abs(contentWidth - this.contentWidth) > oracle.charWidth) {
          var _docView$measureTextS = docView.measureTextSize(),
            lineHeight = _docView$measureTextS.lineHeight,
            charWidth = _docView$measureTextS.charWidth;
          refresh = oracle.refresh(whiteSpace, direction, lineHeight, charWidth, contentWidth / charWidth, lineHeights);
          if (refresh) {
            docView.minWidth = 0;
            result |= 16 /* Geometry */;
          }
        }

        if (this.contentWidth != contentWidth) {
          this.contentWidth = contentWidth;
          result |= 16 /* Geometry */;
        }

        if (dTop > 0 && dBottom > 0) bias = Math.max(dTop, dBottom);else if (dTop < 0 && dBottom < 0) bias = Math.min(dTop, dBottom);
      }
      oracle.heightChanged = false;
      this.heightMap = this.heightMap.updateHeight(oracle, 0, refresh, new MeasuredHeights(this.viewport.from, lineHeights));
      if (oracle.heightChanged) result |= 2 /* Height */;
      if (!this.viewportIsAppropriate(this.viewport, bias) || this.scrollTo && (this.scrollTo.head < this.viewport.from || this.scrollTo.head > this.viewport.to)) {
        var newVP = this.getViewport(bias, this.scrollTo);
        if (newVP.from != this.viewport.from || newVP.to != this.viewport.to) {
          this.viewport = newVP;
          result |= 4 /* Viewport */;
        }
      }

      this.updateForViewport();
      if (this.lineGaps.length || this.viewport.to - this.viewport.from > 15000 /* MinViewPort */) result |= this.updateLineGaps(this.ensureLineGaps(refresh ? [] : this.lineGaps));
      this.computeVisibleRanges();
      if (this.mustEnforceCursorAssoc) {
        this.mustEnforceCursorAssoc = false;
        // This is done in the read stage, because moving the selection
        // to a line end is going to trigger a layout anyway, so it
        // can't be a pure write. It should be rare that it does any
        // writing.
        docView.enforceCursorAssoc();
      }
      return result;
    }
  }, {
    key: "visibleTop",
    get: function get() {
      return this.scaler.fromDOM(this.pixelViewport.top, 0);
    }
  }, {
    key: "visibleBottom",
    get: function get() {
      return this.scaler.fromDOM(this.pixelViewport.bottom, 0);
    }
  }, {
    key: "getViewport",
    value: function getViewport(bias, scrollTo) {
      // This will divide VP.Margin between the top and the
      // bottom, depending on the bias (the change in viewport position
      // since the last update). It'll hold a number between 0 and 1
      var marginTop = 0.5 - Math.max(-0.5, Math.min(0.5, bias / 1000 /* Margin */ / 2));
      var map = this.heightMap,
        doc = this.state.doc,
        visibleTop = this.visibleTop,
        visibleBottom = this.visibleBottom;
      var viewport = new Viewport(map.lineAt(visibleTop - marginTop * 1000 /* Margin */, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(visibleBottom + (1 - marginTop) * 1000 /* Margin */, QueryType.ByHeight, doc, 0, 0).to);
      // If scrollTo is given, make sure the viewport includes that position
      if (scrollTo) {
        if (scrollTo.head < viewport.from) {
          var _map$lineAt = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0),
            newTop = _map$lineAt.top;
          viewport = new Viewport(map.lineAt(newTop - 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newTop + (visibleBottom - visibleTop) + 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).to);
        } else if (scrollTo.head > viewport.to) {
          var _map$lineAt2 = map.lineAt(scrollTo.head, QueryType.ByPos, doc, 0, 0),
            newBottom = _map$lineAt2.bottom;
          viewport = new Viewport(map.lineAt(newBottom - (visibleBottom - visibleTop) - 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).from, map.lineAt(newBottom + 1000 /* Margin */ / 2, QueryType.ByHeight, doc, 0, 0).to);
        }
      }
      return viewport;
    }
  }, {
    key: "mapViewport",
    value: function mapViewport(viewport, changes) {
      var from = changes.mapPos(viewport.from, -1),
        to = changes.mapPos(viewport.to, 1);
      return new Viewport(this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0).from, this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0).to);
    }
    // Checks if a given viewport covers the visible part of the
    // document and not too much beyond that.
  }, {
    key: "viewportIsAppropriate",
    value: function viewportIsAppropriate(_ref8) {
      var from = _ref8.from,
        to = _ref8.to;
      var bias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var _this$heightMap$lineA = this.heightMap.lineAt(from, QueryType.ByPos, this.state.doc, 0, 0),
        top = _this$heightMap$lineA.top;
      var _this$heightMap$lineA2 = this.heightMap.lineAt(to, QueryType.ByPos, this.state.doc, 0, 0),
        bottom = _this$heightMap$lineA2.bottom;
      var visibleTop = this.visibleTop,
        visibleBottom = this.visibleBottom;
      return (from == 0 || top <= visibleTop - Math.max(10 /* MinCoverMargin */, Math.min(-bias, 250 /* MaxCoverMargin */))) && (to == this.state.doc.length || bottom >= visibleBottom + Math.max(10 /* MinCoverMargin */, Math.min(bias, 250 /* MaxCoverMargin */))) && top > visibleTop - 2 * 1000 /* Margin */ && bottom < visibleBottom + 2 * 1000 /* Margin */;
    }
  }, {
    key: "mapLineGaps",
    value: function mapLineGaps(gaps, changes) {
      if (!gaps.length || changes.empty) return gaps;
      var mapped = [];
      var _iterator23 = _createForOfIteratorHelper(gaps),
        _step23;
      try {
        for (_iterator23.s(); !(_step23 = _iterator23.n()).done;) {
          var gap = _step23.value;
          if (!changes.touchesRange(gap.from, gap.to)) mapped.push(new LineGap(changes.mapPos(gap.from), changes.mapPos(gap.to), gap.size));
        }
      } catch (err) {
        _iterator23.e(err);
      } finally {
        _iterator23.f();
      }
      return mapped;
    }
    // Computes positions in the viewport where the start or end of a
    // line should be hidden, trying to reuse existing line gaps when
    // appropriate to avoid unneccesary redraws.
    // Uses crude character-counting for the positioning and sizing,
    // since actual DOM coordinates aren't always available and
    // predictable. Relies on generous margins (see LG.Margin) to hide
    // the artifacts this might produce from the user.
  }, {
    key: "ensureLineGaps",
    value: function ensureLineGaps(current) {
      var _this26 = this;
      var gaps = [];
      // This won't work at all in predominantly right-to-left text.
      if (this.heightOracle.direction != Direction.LTR) return gaps;
      this.heightMap.forEachLine(this.viewport.from, this.viewport.to, this.state.doc, 0, 0, function (line) {
        if (line.length < 10000 /* Margin */) return;
        var structure = lineStructure(line.from, line.to, _this26.state);
        if (structure.total < 10000 /* Margin */) return;
        var viewFrom, viewTo;
        if (_this26.heightOracle.lineWrapping) {
          if (line.from != _this26.viewport.from) viewFrom = line.from;else viewFrom = findPosition(structure, (_this26.visibleTop - line.top) / line.height);
          if (line.to != _this26.viewport.to) viewTo = line.to;else viewTo = findPosition(structure, (_this26.visibleBottom - line.top) / line.height);
        } else {
          var totalWidth = structure.total * _this26.heightOracle.charWidth;
          viewFrom = findPosition(structure, _this26.pixelViewport.left / totalWidth);
          viewTo = findPosition(structure, _this26.pixelViewport.right / totalWidth);
        }
        var sel = _this26.state.selection.main;
        // Make sure the gap doesn't cover a selection end
        if (sel.from <= viewFrom && sel.to >= line.from) viewFrom = sel.from;
        if (sel.from <= line.to && sel.to >= viewTo) viewTo = sel.to;
        var gapTo = viewFrom - 10000 /* Margin */,
          gapFrom = viewTo + 10000 /* Margin */;
        if (gapTo > line.from + 5000 /* HalfMargin */) gaps.push(find(current, function (gap) {
          return gap.from == line.from && gap.to > gapTo - 5000 /* HalfMargin */ && gap.to < gapTo + 5000;
        } /* HalfMargin */) || new LineGap(line.from, gapTo, _this26.gapSize(line, gapTo, true, structure)));
        if (gapFrom < line.to - 5000 /* HalfMargin */) gaps.push(find(current, function (gap) {
          return gap.to == line.to && gap.from > gapFrom - 5000 /* HalfMargin */ && gap.from < gapFrom + 5000;
        } /* HalfMargin */) || new LineGap(gapFrom, line.to, _this26.gapSize(line, gapFrom, false, structure)));
      });
      return gaps;
    }
  }, {
    key: "gapSize",
    value: function gapSize(line, pos, start, structure) {
      if (this.heightOracle.lineWrapping) {
        var height = line.height * findFraction(structure, pos);
        return start ? height : line.height - height;
      } else {
        var ratio = findFraction(structure, pos);
        return structure.total * this.heightOracle.charWidth * (start ? ratio : 1 - ratio);
      }
    }
  }, {
    key: "updateLineGaps",
    value: function updateLineGaps(gaps) {
      var _this27 = this;
      if (!LineGap.same(gaps, this.lineGaps)) {
        this.lineGaps = gaps;
        this.lineGapDeco = Decoration.set(gaps.map(function (gap) {
          return gap.draw(_this27.heightOracle.lineWrapping);
        }));
        return 8 /* LineGaps */;
      }

      return 0;
    }
  }, {
    key: "computeVisibleRanges",
    value: function computeVisibleRanges() {
      var deco = this.state.facet(decorations);
      if (this.lineGaps.length) deco = deco.concat(this.lineGapDeco);
      var ranges = [];
      _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeSet.spans(deco, this.viewport.from, this.viewport.to, {
        span: function span(from, to) {
          ranges.push({
            from: from,
            to: to
          });
        },
        point: function point() {}
      }, 20);
      this.visibleRanges = ranges;
    }
  }, {
    key: "lineAt",
    value: function lineAt(pos, editorTop) {
      editorTop += this.paddingTop;
      return scaleBlock(this.heightMap.lineAt(pos, QueryType.ByPos, this.state.doc, editorTop, 0), this.scaler, editorTop);
    }
  }, {
    key: "lineAtHeight",
    value: function lineAtHeight(height, editorTop) {
      editorTop += this.paddingTop;
      return scaleBlock(this.heightMap.lineAt(this.scaler.fromDOM(height, editorTop), QueryType.ByHeight, this.state.doc, editorTop, 0), this.scaler, editorTop);
    }
  }, {
    key: "blockAtHeight",
    value: function blockAtHeight(height, editorTop) {
      editorTop += this.paddingTop;
      return scaleBlock(this.heightMap.blockAt(this.scaler.fromDOM(height, editorTop), this.state.doc, editorTop, 0), this.scaler, editorTop);
    }
  }, {
    key: "forEachLine",
    value: function forEachLine(from, to, f, editorTop) {
      var _this28 = this;
      editorTop += this.paddingTop;
      return this.heightMap.forEachLine(from, to, this.state.doc, editorTop, 0, this.scaler.scale == 1 ? f : function (b) {
        return f(scaleBlock(b, _this28.scaler, editorTop));
      });
    }
  }, {
    key: "contentHeight",
    get: function get() {
      return this.domHeight + this.paddingTop + this.paddingBottom;
    }
  }, {
    key: "domHeight",
    get: function get() {
      return this.scaler.toDOM(this.heightMap.height, this.paddingTop);
    }
  }]);
  return ViewState;
}(); /**
     Indicates the range of the document that is in the visible
     viewport.
     */
var Viewport = /*#__PURE__*/function () {
  function Viewport(from, to) {
    _classCallCheck(this, Viewport);
    this.from = from;
    this.to = to;
  }
  _createClass(Viewport, [{
    key: "eq",
    value: function eq(b) {
      return this.from == b.from && this.to == b.to;
    }
  }]);
  return Viewport;
}();
function lineStructure(from, to, state) {
  var ranges = [],
    pos = from,
    total = 0;
  _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeSet.spans(state.facet(decorations), from, to, {
    span: function span() {},
    point: function point(from, to) {
      if (from > pos) {
        ranges.push({
          from: pos,
          to: from
        });
        total += from - pos;
      }
      pos = to;
    }
  }, 20); // We're only interested in collapsed ranges of a significant size
  if (pos < to) {
    ranges.push({
      from: pos,
      to: to
    });
    total += to - pos;
  }
  return {
    total: total,
    ranges: ranges
  };
}
function findPosition(_ref9, ratio) {
  var total = _ref9.total,
    ranges = _ref9.ranges;
  if (ratio <= 0) return ranges[0].from;
  if (ratio >= 1) return ranges[ranges.length - 1].to;
  var dist = Math.floor(total * ratio);
  for (var i = 0;; i++) {
    var _ranges$i = ranges[i],
      from = _ranges$i.from,
      to = _ranges$i.to,
      size = to - from;
    if (dist <= size) return from + dist;
    dist -= size;
  }
}
function findFraction(structure, pos) {
  var counted = 0;
  var _iterator24 = _createForOfIteratorHelper(structure.ranges),
    _step24;
  try {
    for (_iterator24.s(); !(_step24 = _iterator24.n()).done;) {
      var _step24$value = _step24.value,
        from = _step24$value.from,
        to = _step24$value.to;
      if (pos <= to) {
        counted += pos - from;
        break;
      }
      counted += to - from;
    }
  } catch (err) {
    _iterator24.e(err);
  } finally {
    _iterator24.f();
  }
  return counted / structure.total;
}
function find(array, f) {
  var _iterator25 = _createForOfIteratorHelper(array),
    _step25;
  try {
    for (_iterator25.s(); !(_step25 = _iterator25.n()).done;) {
      var val = _step25.value;
      if (f(val)) return val;
    }
  } catch (err) {
    _iterator25.e(err);
  } finally {
    _iterator25.f();
  }
  return undefined;
}
// Don't scale when the document height is within the range of what
// the DOM can handle.
var IdScaler = {
  toDOM: function toDOM(n) {
    return n;
  },
  fromDOM: function fromDOM(n) {
    return n;
  },
  scale: 1
};
// When the height is too big (> VP.MaxDOMHeight), scale down the
// regions outside the viewports so that the total height is
// VP.MaxDOMHeight.
var BigScaler = /*#__PURE__*/function () {
  function BigScaler(doc, heightMap, viewports) {
    _classCallCheck(this, BigScaler);
    var vpHeight = 0,
      base = 0,
      domBase = 0;
    this.viewports = viewports.map(function (_ref10) {
      var from = _ref10.from,
        to = _ref10.to;
      var top = heightMap.lineAt(from, QueryType.ByPos, doc, 0, 0).top;
      var bottom = heightMap.lineAt(to, QueryType.ByPos, doc, 0, 0).bottom;
      vpHeight += bottom - top;
      return {
        from: from,
        to: to,
        top: top,
        bottom: bottom,
        domTop: 0,
        domBottom: 0
      };
    });
    this.scale = (7000000 /* MaxDOMHeight */ - vpHeight) / (heightMap.height - vpHeight);
    var _iterator26 = _createForOfIteratorHelper(this.viewports),
      _step26;
    try {
      for (_iterator26.s(); !(_step26 = _iterator26.n()).done;) {
        var obj = _step26.value;
        obj.domTop = domBase + (obj.top - base) * this.scale;
        domBase = obj.domBottom = obj.domTop + (obj.bottom - obj.top);
        base = obj.bottom;
      }
    } catch (err) {
      _iterator26.e(err);
    } finally {
      _iterator26.f();
    }
  }
  _createClass(BigScaler, [{
    key: "toDOM",
    value: function toDOM(n, top) {
      n -= top;
      for (var i = 0, _base = 0, domBase = 0;; i++) {
        var vp = i < this.viewports.length ? this.viewports[i] : null;
        if (!vp || n < vp.top) return domBase + (n - _base) * this.scale + top;
        if (n <= vp.bottom) return vp.domTop + (n - vp.top) + top;
        _base = vp.bottom;
        domBase = vp.domBottom;
      }
    }
  }, {
    key: "fromDOM",
    value: function fromDOM(n, top) {
      n -= top;
      for (var i = 0, _base2 = 0, domBase = 0;; i++) {
        var vp = i < this.viewports.length ? this.viewports[i] : null;
        if (!vp || n < vp.domTop) return _base2 + (n - domBase) / this.scale + top;
        if (n <= vp.domBottom) return vp.top + (n - vp.domTop) + top;
        _base2 = vp.bottom;
        domBase = vp.domBottom;
      }
    }
  }]);
  return BigScaler;
}();
function scaleBlock(block, scaler, top) {
  if (scaler.scale == 1) return block;
  var bTop = scaler.toDOM(block.top, top),
    bBottom = scaler.toDOM(block.bottom, top);
  return new BlockInfo(block.from, block.length, bTop, bBottom - bTop, Array.isArray(block.type) ? block.type.map(function (b) {
    return scaleBlock(b, scaler, top);
  }) : block.type);
}
var _theme = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define({
  combine: function combine(strs) {
    return strs.join(" ");
  }
});
var darkTheme = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define({
  combine: function combine(values) {
    return values.indexOf(true) > -1;
  }
});
var baseThemeID = /*@__PURE__*/style_mod__WEBPACK_IMPORTED_MODULE_0__.StyleModule.newName(),
  baseLightID = /*@__PURE__*/style_mod__WEBPACK_IMPORTED_MODULE_0__.StyleModule.newName(),
  baseDarkID = /*@__PURE__*/style_mod__WEBPACK_IMPORTED_MODULE_0__.StyleModule.newName();
var lightDarkIDs = {
  "&light": "." + baseLightID,
  "&dark": "." + baseDarkID
};
function buildTheme(main, spec, scopes) {
  return new style_mod__WEBPACK_IMPORTED_MODULE_0__.StyleModule(spec, {
    finish: function finish(sel) {
      return /&/.test(sel) ? sel.replace(/&\w*/, function (m) {
        if (m == "&") return main;
        if (!scopes || !scopes[m]) throw new RangeError("Unsupported selector: ".concat(m));
        return scopes[m];
      }) : main + " " + sel;
    }
  });
}
var baseTheme = /*@__PURE__*/buildTheme("." + baseThemeID, {
  "&": {
    position: "relative !important",
    boxSizing: "border-box",
    "&.cm-focused": {
      // Provide a simple default outline to make sure a focused
      // editor is visually distinct. Can't leave the default behavior
      // because that will apply to the content element, which is
      // inside the scrollable container and doesn't include the
      // gutters. We also can't use an 'auto' outline, since those
      // are, for some reason, drawn behind the element content, which
      // will cause things like the active line background to cover
      // the outline (#297).
      outline: "1px dotted #212121"
    },
    display: "flex !important",
    flexDirection: "column"
  },
  ".cm-scroller": {
    display: "flex !important",
    alignItems: "flex-start !important",
    fontFamily: "monospace",
    lineHeight: 1.4,
    height: "100%",
    overflowX: "auto",
    position: "relative",
    zIndex: 0
  },
  ".cm-content": {
    margin: 0,
    flexGrow: 2,
    minHeight: "100%",
    display: "block",
    whiteSpace: "pre",
    wordWrap: "normal",
    boxSizing: "border-box",
    padding: "4px 0",
    outline: "none"
  },
  ".cm-lineWrapping": {
    whiteSpace: "pre-wrap",
    wordBreak: "break-word",
    overflowWrap: "anywhere"
  },
  "&light .cm-content": {
    caretColor: "black"
  },
  "&dark .cm-content": {
    caretColor: "white"
  },
  ".cm-line": {
    display: "block",
    padding: "0 2px 0 4px"
  },
  ".cm-selectionLayer": {
    zIndex: -1,
    contain: "size style"
  },
  ".cm-selectionBackground": {
    position: "absolute"
  },
  "&light .cm-selectionBackground": {
    background: "#d9d9d9"
  },
  "&dark .cm-selectionBackground": {
    background: "#222"
  },
  "&light.cm-focused .cm-selectionBackground": {
    background: "#d7d4f0"
  },
  "&dark.cm-focused .cm-selectionBackground": {
    background: "#233"
  },
  ".cm-cursorLayer": {
    zIndex: 100,
    contain: "size style",
    pointerEvents: "none"
  },
  "&.cm-focused .cm-cursorLayer": {
    animation: "steps(1) cm-blink 1.2s infinite"
  },
  // Two animations defined so that we can switch between them to
  // restart the animation without forcing another style
  // recomputation.
  "@keyframes cm-blink": {
    "0%": {},
    "50%": {
      visibility: "hidden"
    },
    "100%": {}
  },
  "@keyframes cm-blink2": {
    "0%": {},
    "50%": {
      visibility: "hidden"
    },
    "100%": {}
  },
  ".cm-cursor": {
    position: "absolute",
    borderLeft: "1.2px solid black",
    marginLeft: "-0.6px",
    pointerEvents: "none",
    display: "none"
  },
  "&dark .cm-cursor": {
    borderLeftColor: "#444"
  },
  "&.cm-focused .cm-cursor": {
    display: "block"
  },
  "&light .cm-activeLine": {
    backgroundColor: "#f3f9ff"
  },
  "&dark .cm-activeLine": {
    backgroundColor: "#223039"
  },
  "&light .cm-specialChar": {
    color: "red"
  },
  "&dark .cm-specialChar": {
    color: "#f78"
  },
  ".cm-tab": {
    display: "inline-block",
    overflow: "hidden",
    verticalAlign: "bottom"
  },
  ".cm-placeholder": {
    color: "#888",
    display: "inline-block"
  },
  ".cm-button": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    padding: ".2em 1em",
    borderRadius: "3px"
  },
  "&light .cm-button": {
    backgroundImage: "linear-gradient(#eff1f5, #d9d9df)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#b4b4b4, #d0d3d6)"
    }
  },
  "&dark .cm-button": {
    backgroundImage: "linear-gradient(#393939, #111)",
    border: "1px solid #888",
    "&:active": {
      backgroundImage: "linear-gradient(#111, #333)"
    }
  },
  ".cm-textfield": {
    verticalAlign: "middle",
    color: "inherit",
    fontSize: "70%",
    border: "1px solid silver",
    padding: ".2em .5em"
  },
  "&light .cm-textfield": {
    backgroundColor: "white"
  },
  "&dark .cm-textfield": {
    border: "1px solid #555",
    backgroundColor: "inherit"
  }
}, lightDarkIDs);
var observeOptions = {
  childList: true,
  characterData: true,
  subtree: true,
  characterDataOldValue: true
};
// IE11 has very broken mutation observers, so we also listen to
// DOMCharacterDataModified there
var useCharData = browser.ie && browser.ie_version <= 11;
var DOMObserver = /*#__PURE__*/function () {
  function DOMObserver(view, onChange, onScrollChanged) {
    var _this29 = this;
    _classCallCheck(this, DOMObserver);
    this.view = view;
    this.onChange = onChange;
    this.onScrollChanged = onScrollChanged;
    this.active = false;
    this.ignoreSelection = new DOMSelection();
    this.delayedFlush = -1;
    this.queue = [];
    this.lastFlush = 0;
    this.scrollTargets = [];
    this.intersection = null;
    this.intersecting = false;
    // Used to work around a Safari Selection/shadow DOM bug (#414)
    this._selectionRange = null;
    // Timeout for scheduling check of the parents that need scroll handlers
    this.parentCheck = -1;
    this.dom = view.contentDOM;
    this.observer = new MutationObserver(function (mutations) {
      var _iterator27 = _createForOfIteratorHelper(mutations),
        _step27;
      try {
        for (_iterator27.s(); !(_step27 = _iterator27.n()).done;) {
          var mut = _step27.value;
          _this29.queue.push(mut);
        }
      } catch (err) {
        _iterator27.e(err);
      } finally {
        _iterator27.f();
      }
      _this29._selectionRange = null;
      // IE11 will sometimes (on typing over a selection or
      // backspacing out a single character text node) call the
      // observer callback before actually updating the DOM.
      //
      // Unrelatedly, iOS Safari will, when ending a composition,
      // sometimes first clear it, deliver the mutations, and then
      // reinsert the finished text. CodeMirror's handling of the
      // deletion will prevent the reinsertion from happening,
      // breaking composition.
      if ((browser.ie && browser.ie_version <= 11 || browser.ios && view.composing) && mutations.some(function (m) {
        return m.type == "childList" && m.removedNodes.length || m.type == "characterData" && m.oldValue.length > m.target.nodeValue.length;
      })) _this29.flushSoon();else _this29.flush();
    });
    if (useCharData) this.onCharData = function (event) {
      _this29.queue.push({
        target: event.target,
        type: "characterData",
        oldValue: event.prevValue
      });
      _this29.flushSoon();
    };
    this.onSelectionChange = this.onSelectionChange.bind(this);
    this.start();
    this.onScroll = this.onScroll.bind(this);
    window.addEventListener("scroll", this.onScroll);
    if (typeof IntersectionObserver == "function") {
      this.intersection = new IntersectionObserver(function (entries) {
        if (_this29.parentCheck < 0) _this29.parentCheck = setTimeout(_this29.listenForScroll.bind(_this29), 1000);
        if (entries[entries.length - 1].intersectionRatio > 0 != _this29.intersecting) {
          _this29.intersecting = !_this29.intersecting;
          if (_this29.intersecting != _this29.view.inView) _this29.onScrollChanged(document.createEvent("Event"));
        }
      }, {});
      this.intersection.observe(this.dom);
    }
    this.listenForScroll();
  }
  _createClass(DOMObserver, [{
    key: "onScroll",
    value: function onScroll(e) {
      if (this.intersecting) this.flush();
      this.onScrollChanged(e);
    }
  }, {
    key: "onSelectionChange",
    value: function onSelectionChange(event) {
      if (this.lastFlush < Date.now() - 50) this._selectionRange = null;
      var view = this.view,
        sel = this.selectionRange;
      if (view.state.facet(editable) ? view.root.activeElement != this.dom : !hasSelection(view.dom, sel)) return;
      var context = sel.anchorNode && view.docView.nearest(sel.anchorNode);
      if (context && context.ignoreEvent(event)) return;
      // Deletions on IE11 fire their events in the wrong order, giving
      // us a selection change event before the DOM changes are
      // reported.
      // (Selection.isCollapsed isn't reliable on IE)
      if (browser.ie && browser.ie_version <= 11 && !view.state.selection.main.empty && sel.focusNode && isEquivalentPosition(sel.focusNode, sel.focusOffset, sel.anchorNode, sel.anchorOffset)) this.flushSoon();else this.flush();
    }
  }, {
    key: "selectionRange",
    get: function get() {
      if (!this._selectionRange) {
        var root = this.view.root,
          sel = getSelection(root);
        // The Selection object is broken in shadow roots in Safari. See
        // https://github.com/codemirror/codemirror.next/issues/414
        if (browser.safari && root.nodeType == 11 && deepActiveElement() == this.view.contentDOM) sel = safariSelectionRangeHack(this.view) || sel;
        this._selectionRange = sel;
      }
      return this._selectionRange;
    }
  }, {
    key: "setSelectionRange",
    value: function setSelectionRange(anchor, head) {
      var _a;
      if (!((_a = this._selectionRange) === null || _a === void 0 ? void 0 : _a.type)) this._selectionRange = {
        anchorNode: anchor.node,
        anchorOffset: anchor.offset,
        focusNode: head.node,
        focusOffset: head.offset
      };
    }
  }, {
    key: "listenForScroll",
    value: function listenForScroll() {
      this.parentCheck = -1;
      var i = 0,
        changed = null;
      for (var dom = this.dom; dom;) {
        if (dom.nodeType == 1) {
          if (!changed && i < this.scrollTargets.length && this.scrollTargets[i] == dom) i++;else if (!changed) changed = this.scrollTargets.slice(0, i);
          if (changed) changed.push(dom);
          dom = dom.assignedSlot || dom.parentNode;
        } else if (dom.nodeType == 11) {
          // Shadow root
          dom = dom.host;
        } else {
          break;
        }
      }
      if (i < this.scrollTargets.length && !changed) changed = this.scrollTargets.slice(0, i);
      if (changed) {
        var _iterator28 = _createForOfIteratorHelper(this.scrollTargets),
          _step28;
        try {
          for (_iterator28.s(); !(_step28 = _iterator28.n()).done;) {
            var _dom2 = _step28.value;
            _dom2.removeEventListener("scroll", this.onScroll);
          }
        } catch (err) {
          _iterator28.e(err);
        } finally {
          _iterator28.f();
        }
        var _iterator29 = _createForOfIteratorHelper(this.scrollTargets = changed),
          _step29;
        try {
          for (_iterator29.s(); !(_step29 = _iterator29.n()).done;) {
            var _dom3 = _step29.value;
            _dom3.addEventListener("scroll", this.onScroll);
          }
        } catch (err) {
          _iterator29.e(err);
        } finally {
          _iterator29.f();
        }
      }
    }
  }, {
    key: "ignore",
    value: function ignore(f) {
      if (!this.active) return f();
      try {
        this.stop();
        return f();
      } finally {
        this.start();
        this.clear();
      }
    }
  }, {
    key: "start",
    value: function start() {
      if (this.active) return;
      this.observer.observe(this.dom, observeOptions);
      this.dom.ownerDocument.addEventListener("selectionchange", this.onSelectionChange);
      if (useCharData) this.dom.addEventListener("DOMCharacterDataModified", this.onCharData);
      this.active = true;
    }
  }, {
    key: "stop",
    value: function stop() {
      if (!this.active) return;
      this.active = false;
      this.observer.disconnect();
      this.dom.ownerDocument.removeEventListener("selectionchange", this.onSelectionChange);
      if (useCharData) this.dom.removeEventListener("DOMCharacterDataModified", this.onCharData);
    }
  }, {
    key: "clearSelection",
    value: function clearSelection() {
      this.ignoreSelection.set(this.selectionRange);
    }
    // Throw away any pending changes
  }, {
    key: "clear",
    value: function clear() {
      this.observer.takeRecords();
      this.queue.length = 0;
      this.clearSelection();
    }
  }, {
    key: "flushSoon",
    value: function flushSoon() {
      var _this30 = this;
      if (this.delayedFlush < 0) this.delayedFlush = window.setTimeout(function () {
        _this30.delayedFlush = -1;
        _this30.flush();
      }, 20);
    }
  }, {
    key: "forceFlush",
    value: function forceFlush() {
      if (this.delayedFlush >= 0) {
        window.clearTimeout(this.delayedFlush);
        this.delayedFlush = -1;
        this.flush();
      }
    }
    // Apply pending changes, if any
  }, {
    key: "flush",
    value: function flush() {
      var _this31 = this;
      if (this.delayedFlush >= 0) return;
      this.lastFlush = Date.now();
      var records = this.queue;
      var _iterator30 = _createForOfIteratorHelper(this.observer.takeRecords()),
        _step30;
      try {
        for (_iterator30.s(); !(_step30 = _iterator30.n()).done;) {
          var mut = _step30.value;
          records.push(mut);
        }
      } catch (err) {
        _iterator30.e(err);
      } finally {
        _iterator30.f();
      }
      if (records.length) this.queue = [];
      var selection = this.selectionRange;
      var newSel = !this.ignoreSelection.eq(selection) && hasSelection(this.dom, selection);
      if (records.length == 0 && !newSel) return;
      var from = -1,
        to = -1,
        typeOver = false;
      var _iterator31 = _createForOfIteratorHelper(records),
        _step31;
      try {
        for (_iterator31.s(); !(_step31 = _iterator31.n()).done;) {
          var record = _step31.value;
          var range = this.readMutation(record);
          if (!range) continue;
          if (range.typeOver) typeOver = true;
          if (from == -1) {
            from = range.from;
            to = range.to;
          } else {
            from = Math.min(range.from, from);
            to = Math.max(range.to, to);
          }
        }
      } catch (err) {
        _iterator31.e(err);
      } finally {
        _iterator31.f();
      }
      var startState = this.view.state;
      if (from > -1 || newSel) this.onChange(from, to, typeOver);
      if (this.view.state == startState) {
        // The view wasn't updated
        if (this.view.docView.dirty) {
          this.ignore(function () {
            return _this31.view.docView.sync();
          });
          this.view.docView.dirty = 0 /* Not */;
        }

        if (newSel) this.view.docView.updateSelection();
      }
      this.clearSelection();
    }
  }, {
    key: "readMutation",
    value: function readMutation(rec) {
      var cView = this.view.docView.nearest(rec.target);
      if (!cView || cView.ignoreMutation(rec)) return null;
      cView.markDirty();
      if (rec.type == "childList") {
        var childBefore = findChild(cView, rec.previousSibling || rec.target.previousSibling, -1);
        var childAfter = findChild(cView, rec.nextSibling || rec.target.nextSibling, 1);
        return {
          from: childBefore ? cView.posAfter(childBefore) : cView.posAtStart,
          to: childAfter ? cView.posBefore(childAfter) : cView.posAtEnd,
          typeOver: false
        };
      } else {
        // "characterData"
        return {
          from: cView.posAtStart,
          to: cView.posAtEnd,
          typeOver: rec.target.nodeValue == rec.oldValue
        };
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.stop();
      if (this.intersection) this.intersection.disconnect();
      var _iterator32 = _createForOfIteratorHelper(this.scrollTargets),
        _step32;
      try {
        for (_iterator32.s(); !(_step32 = _iterator32.n()).done;) {
          var dom = _step32.value;
          dom.removeEventListener("scroll", this.onScroll);
        }
      } catch (err) {
        _iterator32.e(err);
      } finally {
        _iterator32.f();
      }
      window.removeEventListener("scroll", this.onScroll);
      clearTimeout(this.parentCheck);
    }
  }]);
  return DOMObserver;
}();
function findChild(cView, dom, dir) {
  while (dom) {
    var curView = ContentView.get(dom);
    if (curView && curView.parent == cView) return curView;
    var parent = dom.parentNode;
    dom = parent != cView.dom ? parent : dir > 0 ? dom.nextSibling : dom.previousSibling;
  }
  return null;
}
function safariSelectionRangeHack(view) {
  var found = null;
  // Because Safari (at least in 2018-2021) doesn't provide regular
  // access to the selection inside a shadowroot, we have to perform a
  // ridiculous hack to get at it—using `execCommand` to trigger a
  // `beforeInput` event so that we can read the target range from the
  // event.
  function read(event) {
    event.preventDefault();
    event.stopImmediatePropagation();
    found = event.getTargetRanges()[0];
  }
  view.contentDOM.addEventListener("beforeinput", read, true);
  document.execCommand("indent");
  view.contentDOM.removeEventListener("beforeinput", read, true);
  if (!found) return null;
  var anchorNode = found.startContainer,
    anchorOffset = found.startOffset;
  var focusNode = found.endContainer,
    focusOffset = found.endOffset;
  var curAnchor = view.docView.domAtPos(view.state.selection.main.anchor);
  // Since such a range doesn't distinguish between anchor and head,
  // use a heuristic that flips it around if its end matches the
  // current anchor.
  if (isEquivalentPosition(curAnchor.node, curAnchor.offset, focusNode, focusOffset)) {
    var _ref11 = [focusNode, focusOffset, anchorNode, anchorOffset];
    anchorNode = _ref11[0];
    anchorOffset = _ref11[1];
    focusNode = _ref11[2];
    focusOffset = _ref11[3];
  }
  return {
    anchorNode: anchorNode,
    anchorOffset: anchorOffset,
    focusNode: focusNode,
    focusOffset: focusOffset
  };
}
function applyDOMChange(view, start, end, typeOver) {
  var change, newSel;
  var sel = view.state.selection.main,
    bounds;
  if (start > -1 && (bounds = view.docView.domBoundsAround(start, end, 0))) {
    var _bounds = bounds,
      from = _bounds.from,
      to = _bounds.to;
    var selPoints = view.docView.impreciseHead || view.docView.impreciseAnchor ? [] : selectionPoints(view);
    var reader = new DOMReader(selPoints, view);
    reader.readRange(bounds.startDOM, bounds.endDOM);
    newSel = selectionFromPoints(selPoints, from);
    var preferredPos = sel.from,
      preferredSide = null;
    // Prefer anchoring to end when Backspace is pressed (or, on
    // Android, when something was deleted)
    if (view.inputState.lastKeyCode === 8 && view.inputState.lastKeyTime > Date.now() - 100 || browser.android && reader.text.length < to - from) {
      preferredPos = sel.to;
      preferredSide = "end";
    }
    var diff = findDiff(view.state.sliceDoc(from, to), reader.text, preferredPos - from, preferredSide);
    if (diff) change = {
      from: from + diff.from,
      to: from + diff.toA,
      insert: view.state.toText(reader.text.slice(diff.from, diff.toB))
    };
  } else if (view.hasFocus || !view.state.facet(editable)) {
    var domSel = view.observer.selectionRange;
    var _view$docView = view.docView,
      iHead = _view$docView.impreciseHead,
      iAnchor = _view$docView.impreciseAnchor;
    var head = iHead && iHead.node == domSel.focusNode && iHead.offset == domSel.focusOffset || !contains(view.contentDOM, domSel.focusNode) ? view.state.selection.main.head : view.docView.posFromDOM(domSel.focusNode, domSel.focusOffset);
    var anchor = iAnchor && iAnchor.node == domSel.anchorNode && iAnchor.offset == domSel.anchorOffset || !contains(view.contentDOM, domSel.anchorNode) ? view.state.selection.main.anchor : view.docView.posFromDOM(domSel.anchorNode, domSel.anchorOffset);
    if (head != sel.head || anchor != sel.anchor) newSel = _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.single(anchor, head);
  }
  if (!change && !newSel) return;
  // Heuristic to notice typing over a selected character
  if (!change && typeOver && !sel.empty && newSel && newSel.main.empty) change = {
    from: sel.from,
    to: sel.to,
    insert: view.state.doc.slice(sel.from, sel.to)
  };
  // If the change is inside the selection and covers most of it,
  // assume it is a selection replace (with identical characters at
  // the start/end not included in the diff)
  else if (change && change.from >= sel.from && change.to <= sel.to && (change.from != sel.from || change.to != sel.to) && sel.to - sel.from - (change.to - change.from) <= 4) change = {
    from: sel.from,
    to: sel.to,
    insert: view.state.doc.slice(sel.from, change.from).append(change.insert).append(view.state.doc.slice(change.to, sel.to))
  };
  if (change) {
    var startState = view.state;
    // Android browsers don't fire reasonable key events for enter,
    // backspace, or delete. So this detects changes that look like
    // they're caused by those keys, and reinterprets them as key
    // events.
    if (browser.android && (change.from == sel.from && change.to == sel.to && change.insert.length == 1 && change.insert.lines == 2 && dispatchKey(view.contentDOM, "Enter", 13) || change.from == sel.from - 1 && change.to == sel.to && change.insert.length == 0 && dispatchKey(view.contentDOM, "Backspace", 8) || change.from == sel.from && change.to == sel.to + 1 && change.insert.length == 0 && dispatchKey(view.contentDOM, "Delete", 46)) || browser.ios && view.inputState.flushIOSKey(view)) return;
    var text = change.insert.toString();
    if (view.state.facet(inputHandler).some(function (h) {
      return h(view, change.from, change.to, text);
    })) return;
    if (view.inputState.composing >= 0) view.inputState.composing++;
    var tr;
    if (change.from >= sel.from && change.to <= sel.to && change.to - change.from >= (sel.to - sel.from) / 3 && (!newSel || newSel.main.empty && newSel.main.from == change.from + change.insert.length)) {
      var before = sel.from < change.from ? startState.sliceDoc(sel.from, change.from) : "";
      var after = sel.to > change.to ? startState.sliceDoc(change.to, sel.to) : "";
      tr = startState.replaceSelection(view.state.toText(before + change.insert.sliceString(0, undefined, view.state.lineBreak) + after));
    } else {
      var changes = startState.changes(change);
      tr = {
        changes: changes,
        selection: newSel && !startState.selection.main.eq(newSel.main) && newSel.main.to <= changes.newLength ? startState.selection.replaceRange(newSel.main) : undefined
      };
    }
    view.dispatch(tr, {
      scrollIntoView: true,
      annotations: _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Transaction.userEvent.of("input")
    });
  } else if (newSel && !newSel.main.eq(sel)) {
    var scrollIntoView = false,
      annotations;
    if (view.inputState.lastSelectionTime > Date.now() - 50) {
      if (view.inputState.lastSelectionOrigin == "keyboardselection") scrollIntoView = true;else annotations = _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Transaction.userEvent.of(view.inputState.lastSelectionOrigin);
    }
    view.dispatch({
      selection: newSel,
      scrollIntoView: scrollIntoView,
      annotations: annotations
    });
  }
}
function findDiff(a, b, preferredPos, preferredSide) {
  var minLen = Math.min(a.length, b.length);
  var from = 0;
  while (from < minLen && a.charCodeAt(from) == b.charCodeAt(from)) {
    from++;
  }
  if (from == minLen && a.length == b.length) return null;
  var toA = a.length,
    toB = b.length;
  while (toA > 0 && toB > 0 && a.charCodeAt(toA - 1) == b.charCodeAt(toB - 1)) {
    toA--;
    toB--;
  }
  if (preferredSide == "end") {
    var adjust = Math.max(0, from - Math.min(toA, toB));
    preferredPos -= toA + adjust - from;
  }
  if (toA < from && a.length < b.length) {
    var move = preferredPos <= from && preferredPos >= toA ? from - preferredPos : 0;
    from -= move;
    toB = from + (toB - toA);
    toA = from;
  } else if (toB < from) {
    var _move = preferredPos <= from && preferredPos >= toB ? from - preferredPos : 0;
    from -= _move;
    toA = from + (toA - toB);
    toB = from;
  }
  return {
    from: from,
    toA: toA,
    toB: toB
  };
}
var DOMReader = /*#__PURE__*/function () {
  function DOMReader(points, view) {
    _classCallCheck(this, DOMReader);
    this.points = points;
    this.view = view;
    this.text = "";
    this.lineBreak = view.state.lineBreak;
  }
  _createClass(DOMReader, [{
    key: "readRange",
    value: function readRange(start, end) {
      if (!start) return;
      var parent = start.parentNode;
      for (var cur = start;;) {
        this.findPointBefore(parent, cur);
        this.readNode(cur);
        var next = cur.nextSibling;
        if (next == end) break;
        var view = ContentView.get(cur),
          nextView = ContentView.get(next);
        if ((view ? view.breakAfter : isBlockElement(cur)) || (nextView ? nextView.breakAfter : isBlockElement(next)) && !(cur.nodeName == "BR" && !cur.cmIgnore)) this.text += this.lineBreak;
        cur = next;
      }
      this.findPointBefore(parent, end);
    }
  }, {
    key: "readNode",
    value: function readNode(node) {
      if (node.cmIgnore) return;
      var view = ContentView.get(node);
      var fromView = view && view.overrideDOMText;
      var text;
      if (fromView != null) text = fromView.sliceString(0, undefined, this.lineBreak);else if (node.nodeType == 3) text = node.nodeValue;else if (node.nodeName == "BR") text = node.nextSibling ? this.lineBreak : "";else if (node.nodeType == 1) this.readRange(node.firstChild, null);
      if (text != null) {
        this.findPointIn(node, text.length);
        this.text += text;
        // Chrome inserts two newlines when pressing shift-enter at the
        // end of a line. This drops one of those.
        if (browser.chrome && this.view.inputState.lastKeyCode == 13 && !node.nextSibling && /\n\n$/.test(this.text)) this.text = this.text.slice(0, -1);
      }
    }
  }, {
    key: "findPointBefore",
    value: function findPointBefore(node, next) {
      var _iterator33 = _createForOfIteratorHelper(this.points),
        _step33;
      try {
        for (_iterator33.s(); !(_step33 = _iterator33.n()).done;) {
          var point = _step33.value;
          if (point.node == node && node.childNodes[point.offset] == next) point.pos = this.text.length;
        }
      } catch (err) {
        _iterator33.e(err);
      } finally {
        _iterator33.f();
      }
    }
  }, {
    key: "findPointIn",
    value: function findPointIn(node, maxLen) {
      var _iterator34 = _createForOfIteratorHelper(this.points),
        _step34;
      try {
        for (_iterator34.s(); !(_step34 = _iterator34.n()).done;) {
          var point = _step34.value;
          if (point.node == node) point.pos = this.text.length + Math.min(point.offset, maxLen);
        }
      } catch (err) {
        _iterator34.e(err);
      } finally {
        _iterator34.f();
      }
    }
  }]);
  return DOMReader;
}();
function isBlockElement(node) {
  return node.nodeType == 1 && /^(DIV|P|LI|UL|OL|BLOCKQUOTE|DD|DT|H\d|SECTION|PRE)$/.test(node.nodeName);
}
var DOMPoint = /*#__PURE__*/_createClass(function DOMPoint(node, offset) {
  _classCallCheck(this, DOMPoint);
  this.node = node;
  this.offset = offset;
  this.pos = -1;
});
function selectionPoints(view) {
  var result = [];
  if (view.root.activeElement != view.contentDOM) return result;
  var _view$observer$select = view.observer.selectionRange,
    anchorNode = _view$observer$select.anchorNode,
    anchorOffset = _view$observer$select.anchorOffset,
    focusNode = _view$observer$select.focusNode,
    focusOffset = _view$observer$select.focusOffset;
  if (anchorNode) {
    result.push(new DOMPoint(anchorNode, anchorOffset));
    if (focusNode != anchorNode || focusOffset != anchorOffset) result.push(new DOMPoint(focusNode, focusOffset));
  }
  return result;
}
function selectionFromPoints(points, base) {
  if (points.length == 0) return null;
  var anchor = points[0].pos,
    head = points.length == 2 ? points[1].pos : anchor;
  return anchor > -1 && head > -1 ? _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.single(anchor + base, head + base) : null;
}

// The editor's update state machine looks something like this:
//
//     Idle → Updating ⇆ Idle (unchecked) → Measuring → Idle
//                                         ↑      ↓
//                                         Updating (measure)
//
// The difference between 'Idle' and 'Idle (unchecked)' lies in
// whether a layout check has been scheduled. A regular update through
// the `update` method updates the DOM in a write-only fashion, and
// relies on a check (scheduled with `requestAnimationFrame`) to make
// sure everything is where it should be and the viewport covers the
// visible code. That check continues to measure and then optionally
// update until it reaches a coherent state.
/**
An editor view represents the editor's user interface. It holds
the editable DOM surface, and possibly other elements such as the
line number gutter. It handles events and dispatches state
transactions for editing actions.
*/
var EditorView = /*#__PURE__*/function () {
  /**
  Construct a new view. You'll usually want to put `view.dom` into
  your document after creating a view, so that the user can see
  it.
  */
  function EditorView() {
    var _this32 = this;
    var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, EditorView);
    this.plugins = [];
    this.editorAttrs = {};
    this.contentAttrs = {};
    this.bidiCache = [];
    /**
    @internal
    */
    this.updateState = 2 /* Updating */;
    /**
    @internal
    */
    this.measureScheduled = -1;
    /**
    @internal
    */
    this.measureRequests = [];
    this.contentDOM = document.createElement("div");
    this.scrollDOM = document.createElement("div");
    this.scrollDOM.tabIndex = -1;
    this.scrollDOM.className = "cm-scroller";
    this.scrollDOM.appendChild(this.contentDOM);
    this.announceDOM = document.createElement("div");
    this.announceDOM.style.cssText = "position: absolute; top: -10000px";
    this.announceDOM.setAttribute("aria-live", "polite");
    this.dom = document.createElement("div");
    this.dom.appendChild(this.announceDOM);
    this.dom.appendChild(this.scrollDOM);
    this._dispatch = config.dispatch || function (tr) {
      return _this32.update([tr]);
    };
    this.dispatch = this.dispatch.bind(this);
    this.root = config.root || document;
    this.viewState = new ViewState(config.state || _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorState.create());
    this.plugins = this.state.facet(viewPlugin).map(function (spec) {
      return new PluginInstance(spec).update(_this32);
    });
    this.observer = new DOMObserver(this, function (from, to, typeOver) {
      applyDOMChange(_this32, from, to, typeOver);
    }, function (event) {
      _this32.inputState.runScrollHandlers(_this32, event);
      if (_this32.observer.intersecting) _this32.measure();
    });
    this.inputState = new InputState(this);
    this.docView = new DocView(this);
    this.mountStyles();
    this.updateAttrs();
    this.updateState = 0 /* Idle */;
    ensureGlobalHandler();
    this.requestMeasure();
    if (config.parent) config.parent.appendChild(this.dom);
  }
  /**
  The current editor state.
  */
  _createClass(EditorView, [{
    key: "state",
    get: function get() {
      return this.viewState.state;
    }
    /**
    To be able to display large documents without consuming too much
    memory or overloading the browser, CodeMirror only draws the
    code that is visible (plus a margin around it) to the DOM. This
    property tells you the extent of the current drawn viewport, in
    document positions.
    */
  }, {
    key: "viewport",
    get: function get() {
      return this.viewState.viewport;
    }
    /**
    When there are, for example, large collapsed ranges in the
    viewport, its size can be a lot bigger than the actual visible
    content. Thus, if you are doing something like styling the
    content in the viewport, it is preferable to only do so for
    these ranges, which are the subset of the viewport that is
    actually drawn.
    */
  }, {
    key: "visibleRanges",
    get: function get() {
      return this.viewState.visibleRanges;
    }
    /**
    Returns false when the editor is entirely scrolled out of view
    or otherwise hidden.
    */
  }, {
    key: "inView",
    get: function get() {
      return this.viewState.inView;
    }
    /**
    Indicates whether the user is currently composing text via
    [IME](https://developer.mozilla.org/en-US/docs/Mozilla/IME_handling_guide).
    */
  }, {
    key: "composing",
    get: function get() {
      return this.inputState.composing > 0;
    }
  }, {
    key: "dispatch",
    value: function dispatch() {
      var _this$state;
      this._dispatch(arguments.length == 1 && (arguments.length <= 0 ? undefined : arguments[0]) instanceof _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Transaction ? arguments.length <= 0 ? undefined : arguments[0] : (_this$state = this.state).update.apply(_this$state, arguments));
    }
    /**
    Update the view for the given array of transactions. This will
    update the visible document and selection to match the state
    produced by the transactions, and notify view plugins of the
    change. You should usually call
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead, which uses this
    as a primitive.
    */
  }, {
    key: "update",
    value: function update(transactions) {
      if (this.updateState != 0 /* Idle */) throw new Error("Calls to EditorView.update are not allowed while an update is in progress");
      var redrawn = false,
        update;
      var state = this.state;
      var _iterator35 = _createForOfIteratorHelper(transactions),
        _step35;
      try {
        for (_iterator35.s(); !(_step35 = _iterator35.n()).done;) {
          var tr = _step35.value;
          if (tr.startState != state) throw new RangeError("Trying to update state with a transaction that doesn't start from the previous state.");
          state = tr.state;
        }
        // When the phrases change, redraw the editor
      } catch (err) {
        _iterator35.e(err);
      } finally {
        _iterator35.f();
      }
      if (state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorState.phrases) != this.state.facet(_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorState.phrases)) return this.setState(state);
      update = new ViewUpdate(this, state, transactions);
      var scrollTo;
      try {
        this.updateState = 2 /* Updating */;
        scrollTo = transactions.some(function (tr) {
          return tr.scrollIntoView;
        }) ? state.selection.main : null;
        this.viewState.update(update, scrollTo);
        this.bidiCache = CachedOrder.update(this.bidiCache, update.changes);
        if (!update.empty) {
          this.updatePlugins(update);
          this.inputState.update(update);
        }
        redrawn = this.docView.update(update);
        if (this.state.facet(styleModule) != this.styleModules) this.mountStyles();
        this.updateAttrs();
        this.showAnnouncements(transactions);
      } finally {
        this.updateState = 0 /* Idle */;
      }

      if (redrawn || scrollTo || this.viewState.mustEnforceCursorAssoc) this.requestMeasure();
      if (!update.empty) {
        var _iterator36 = _createForOfIteratorHelper(this.state.facet(updateListener)),
          _step36;
        try {
          for (_iterator36.s(); !(_step36 = _iterator36.n()).done;) {
            var listener = _step36.value;
            listener(update);
          }
        } catch (err) {
          _iterator36.e(err);
        } finally {
          _iterator36.f();
        }
      }
    }
    /**
    Reset the view to the given state. (This will cause the entire
    document to be redrawn and all view plugins to be reinitialized,
    so you should probably only use it when the new state isn't
    derived from the old state. Otherwise, use
    [`dispatch`](https://codemirror.net/6/docs/ref/#view.EditorView.dispatch) instead.)
    */
  }, {
    key: "setState",
    value: function setState(newState) {
      var _this33 = this;
      if (this.updateState != 0 /* Idle */) throw new Error("Calls to EditorView.setState are not allowed while an update is in progress");
      this.updateState = 2 /* Updating */;
      try {
        var _iterator37 = _createForOfIteratorHelper(this.plugins),
          _step37;
        try {
          for (_iterator37.s(); !(_step37 = _iterator37.n()).done;) {
            var plugin = _step37.value;
            plugin.destroy(this);
          }
        } catch (err) {
          _iterator37.e(err);
        } finally {
          _iterator37.f();
        }
        this.viewState = new ViewState(newState);
        this.plugins = newState.facet(viewPlugin).map(function (spec) {
          return new PluginInstance(spec).update(_this33);
        });
        this.docView = new DocView(this);
        this.inputState.ensureHandlers(this);
        this.mountStyles();
        this.updateAttrs();
        this.bidiCache = [];
      } finally {
        this.updateState = 0 /* Idle */;
      }

      this.requestMeasure();
    }
  }, {
    key: "updatePlugins",
    value: function updatePlugins(update) {
      var prevSpecs = update.startState.facet(viewPlugin),
        specs = update.state.facet(viewPlugin);
      if (prevSpecs != specs) {
        var newPlugins = [];
        var _iterator38 = _createForOfIteratorHelper(specs),
          _step38;
        try {
          for (_iterator38.s(); !(_step38 = _iterator38.n()).done;) {
            var spec = _step38.value;
            var found = prevSpecs.indexOf(spec);
            if (found < 0) {
              newPlugins.push(new PluginInstance(spec));
            } else {
              var plugin = this.plugins[found];
              plugin.mustUpdate = update;
              newPlugins.push(plugin);
            }
          }
        } catch (err) {
          _iterator38.e(err);
        } finally {
          _iterator38.f();
        }
        var _iterator39 = _createForOfIteratorHelper(this.plugins),
          _step39;
        try {
          for (_iterator39.s(); !(_step39 = _iterator39.n()).done;) {
            var _plugin3 = _step39.value;
            if (_plugin3.mustUpdate != update) _plugin3.destroy(this);
          }
        } catch (err) {
          _iterator39.e(err);
        } finally {
          _iterator39.f();
        }
        this.plugins = newPlugins;
        this.inputState.ensureHandlers(this);
      } else {
        var _iterator40 = _createForOfIteratorHelper(this.plugins),
          _step40;
        try {
          for (_iterator40.s(); !(_step40 = _iterator40.n()).done;) {
            var _p = _step40.value;
            _p.mustUpdate = update;
          }
        } catch (err) {
          _iterator40.e(err);
        } finally {
          _iterator40.f();
        }
      }
      for (var i = 0; i < this.plugins.length; i++) {
        this.plugins[i] = this.plugins[i].update(this);
      }
    }
    /**
    @internal
    */
  }, {
    key: "measure",
    value: function measure() {
      var _this34 = this;
      var flush = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (this.measureScheduled > -1) cancelAnimationFrame(this.measureScheduled);
      this.measureScheduled = -1; // Prevent requestMeasure calls from scheduling another animation frame
      if (flush) this.observer.flush();
      var updated = null;
      try {
        for (var i = 0;; i++) {
          this.updateState = 1 /* Measuring */;
          var changed = this.viewState.measure(this.docView, i > 0);
          var measuring = this.measureRequests;
          if (!changed && !measuring.length && this.viewState.scrollTo == null) break;
          this.measureRequests = [];
          if (i > 5) {
            console.warn("Viewport failed to stabilize");
            break;
          }
          var measured = measuring.map(function (m) {
            try {
              return m.read(_this34);
            } catch (e) {
              logException(_this34.state, e);
              return BadMeasure;
            }
          });
          var update = new ViewUpdate(this, this.state);
          update.flags |= changed;
          if (!updated) updated = update;else updated.flags |= changed;
          this.updateState = 2 /* Updating */;
          if (!update.empty) {
            this.updatePlugins(update);
            this.inputState.update(update);
          }
          this.updateAttrs();
          if (changed) this.docView.update(update);
          for (var _i9 = 0; _i9 < measuring.length; _i9++) {
            if (measured[_i9] != BadMeasure) {
              try {
                measuring[_i9].write(measured[_i9], this);
              } catch (e) {
                logException(this.state, e);
              }
            }
          }
          if (this.viewState.scrollTo) {
            this.docView.scrollPosIntoView(this.viewState.scrollTo.head, this.viewState.scrollTo.assoc);
            this.viewState.scrollTo = null;
          }
          if (!(changed & 4 /* Viewport */) && this.measureRequests.length == 0) break;
        }
      } finally {
        this.updateState = 0 /* Idle */;
      }

      this.measureScheduled = -1;
      if (updated && !updated.empty) {
        var _iterator41 = _createForOfIteratorHelper(this.state.facet(updateListener)),
          _step41;
        try {
          for (_iterator41.s(); !(_step41 = _iterator41.n()).done;) {
            var listener = _step41.value;
            listener(updated);
          }
        } catch (err) {
          _iterator41.e(err);
        } finally {
          _iterator41.f();
        }
      }
    }
    /**
    Get the CSS classes for the currently active editor themes.
    */
  }, {
    key: "themeClasses",
    get: function get() {
      return baseThemeID + " " + (this.state.facet(darkTheme) ? baseDarkID : baseLightID) + " " + this.state.facet(_theme);
    }
  }, {
    key: "updateAttrs",
    value: function updateAttrs() {
      var editorAttrs = combineAttrs(this.state.facet(editorAttributes), {
        // FIXME drop cm-wrap in next major release
        "class": "cm-editor cm-wrap" + (this.hasFocus ? " cm-focused " : " ") + this.themeClasses
      });
      _updateAttrs(this.dom, this.editorAttrs, editorAttrs);
      this.editorAttrs = editorAttrs;
      var contentAttrs = combineAttrs(this.state.facet(contentAttributes), {
        spellcheck: "false",
        autocorrect: "off",
        autocapitalize: "off",
        contenteditable: !this.state.facet(editable) ? "false" : contentEditablePlainTextSupported() ? "plaintext-only" : "true",
        "class": "cm-content",
        style: "".concat(browser.tabSize, ": ").concat(this.state.tabSize),
        role: "textbox",
        "aria-multiline": "true"
      });
      _updateAttrs(this.contentDOM, this.contentAttrs, contentAttrs);
      this.contentAttrs = contentAttrs;
    }
  }, {
    key: "showAnnouncements",
    value: function showAnnouncements(trs) {
      var first = true;
      var _iterator42 = _createForOfIteratorHelper(trs),
        _step42;
      try {
        for (_iterator42.s(); !(_step42 = _iterator42.n()).done;) {
          var tr = _step42.value;
          var _iterator43 = _createForOfIteratorHelper(tr.effects),
            _step43;
          try {
            for (_iterator43.s(); !(_step43 = _iterator43.n()).done;) {
              var effect = _step43.value;
              if (effect.is(EditorView.announce)) {
                if (first) this.announceDOM.textContent = "";
                first = false;
                var div = this.announceDOM.appendChild(document.createElement("div"));
                div.textContent = effect.value;
              }
            }
          } catch (err) {
            _iterator43.e(err);
          } finally {
            _iterator43.f();
          }
        }
      } catch (err) {
        _iterator42.e(err);
      } finally {
        _iterator42.f();
      }
    }
  }, {
    key: "mountStyles",
    value: function mountStyles() {
      this.styleModules = this.state.facet(styleModule);
      style_mod__WEBPACK_IMPORTED_MODULE_0__.StyleModule.mount(this.root, this.styleModules.concat(baseTheme).reverse());
    }
  }, {
    key: "readMeasured",
    value: function readMeasured() {
      if (this.updateState == 2 /* Updating */) throw new Error("Reading the editor layout isn't allowed during an update");
      if (this.updateState == 0 /* Idle */ && this.measureScheduled > -1) this.measure(false);
    }
    /**
    Schedule a layout measurement, optionally providing callbacks to
    do custom DOM measuring followed by a DOM write phase. Using
    this is preferable reading DOM layout directly from, for
    example, an event handler, because it'll make sure measuring and
    drawing done by other components is synchronized, avoiding
    unnecessary DOM layout computations.
    */
  }, {
    key: "requestMeasure",
    value: function requestMeasure(request) {
      var _this35 = this;
      if (this.measureScheduled < 0) this.measureScheduled = requestAnimationFrame(function () {
        return _this35.measure();
      });
      if (request) {
        if (request.key != null) for (var i = 0; i < this.measureRequests.length; i++) {
          if (this.measureRequests[i].key === request.key) {
            this.measureRequests[i] = request;
            return;
          }
        }
        this.measureRequests.push(request);
      }
    }
    /**
    Collect all values provided by the active plugins for a given
    field.
    */
  }, {
    key: "pluginField",
    value: function pluginField(field) {
      var result = [];
      var _iterator44 = _createForOfIteratorHelper(this.plugins),
        _step44;
      try {
        for (_iterator44.s(); !(_step44 = _iterator44.n()).done;) {
          var plugin = _step44.value;
          plugin.update(this).takeField(field, result);
        }
      } catch (err) {
        _iterator44.e(err);
      } finally {
        _iterator44.f();
      }
      return result;
    }
    /**
    Get the value of a specific plugin, if present. Note that
    plugins that crash can be dropped from a view, so even when you
    know you registered a given plugin, it is recommended to check
    the return value of this method.
    */
  }, {
    key: "plugin",
    value: function plugin(_plugin2) {
      var _iterator45 = _createForOfIteratorHelper(this.plugins),
        _step45;
      try {
        for (_iterator45.s(); !(_step45 = _iterator45.n()).done;) {
          var inst = _step45.value;
          if (inst.spec == _plugin2) return inst.update(this).value;
        }
      } catch (err) {
        _iterator45.e(err);
      } finally {
        _iterator45.f();
      }
      return null;
    }
    /**
    Find the line or block widget at the given vertical position.
    
    By default, this position is interpreted as a screen position,
    meaning `docTop` is set to the DOM top position of the editor
    content (forcing a layout). You can pass a different `docTop`
    value—for example 0 to interpret `height` as a document-relative
    position, or a precomputed document top
    (`view.contentDOM.getBoundingClientRect().top`) to limit layout
    queries.
    */
  }, {
    key: "blockAtHeight",
    value: function blockAtHeight(height, docTop) {
      this.readMeasured();
      return this.viewState.blockAtHeight(height, ensureTop(docTop, this.contentDOM));
    }
    /**
    Find information for the visual line (see
    [`visualLineAt`](https://codemirror.net/6/docs/ref/#view.EditorView.visualLineAt)) at the given
    vertical position. The resulting block info might hold another
    array of block info structs in its `type` field if this line
    consists of more than one block.
    
    Defaults to treating `height` as a screen position. See
    [`blockAtHeight`](https://codemirror.net/6/docs/ref/#view.EditorView.blockAtHeight) for the
    interpretation of the `docTop` parameter.
    */
  }, {
    key: "visualLineAtHeight",
    value: function visualLineAtHeight(height, docTop) {
      this.readMeasured();
      return this.viewState.lineAtHeight(height, ensureTop(docTop, this.contentDOM));
    }
    /**
    Iterate over the height information of the visual lines in the
    viewport. The heights of lines are reported relative to the
    given document top, which defaults to the screen position of the
    document (forcing a layout).
    */
  }, {
    key: "viewportLines",
    value: function viewportLines(f, docTop) {
      var _this$viewport = this.viewport,
        from = _this$viewport.from,
        to = _this$viewport.to;
      this.viewState.forEachLine(from, to, f, ensureTop(docTop, this.contentDOM));
    }
    /**
    Find the extent and height of the visual line (a range delimited
    on both sides by either non-[hidden](https://codemirror.net/6/docs/ref/#view.Decoration^range)
    line breaks, or the start/end of the document) at the given position.
    
    Vertical positions are computed relative to the `docTop`
    argument, which defaults to 0 for this method. You can pass
    `view.contentDOM.getBoundingClientRect().top` here to get screen
    coordinates.
    */
  }, {
    key: "visualLineAt",
    value: function visualLineAt(pos) {
      var docTop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return this.viewState.lineAt(pos, docTop);
    }
    /**
    The editor's total content height.
    */
  }, {
    key: "contentHeight",
    get: function get() {
      return this.viewState.contentHeight;
    }
    /**
    Move a cursor position by [grapheme
    cluster](https://codemirror.net/6/docs/ref/#text.findClusterBreak). `forward` determines whether
    the motion is away from the line start, or towards it. Motion in
    bidirectional text is in visual order, in the editor's [text
    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection). When the start
    position was the last one on the line, the returned position
    will be across the line break. If there is no further line, the
    original position is returned.
    
    By default, this method moves over a single cluster. The
    optional `by` argument can be used to move across more. It will
    be called with the first cluster as argument, and should return
    a predicate that determines, for each subsequent cluster,
    whether it should also be moved over.
    */
  }, {
    key: "moveByChar",
    value: function moveByChar(start, forward, by) {
      return skipAtoms(this, start, _moveByChar(this, start, forward, by));
    }
    /**
    Move a cursor position across the next group of either
    [letters](https://codemirror.net/6/docs/ref/#state.EditorState.charCategorizer) or non-letter
    non-whitespace characters.
    */
  }, {
    key: "moveByGroup",
    value: function moveByGroup(start, forward) {
      var _this36 = this;
      return skipAtoms(this, start, _moveByChar(this, start, forward, function (initial) {
        return byGroup(_this36, start.head, initial);
      }));
    }
    /**
    Move to the next line boundary in the given direction. If
    `includeWrap` is true, line wrapping is on, and there is a
    further wrap point on the current line, the wrap point will be
    returned. Otherwise this function will return the start or end
    of the line.
    */
  }, {
    key: "moveToLineBoundary",
    value: function moveToLineBoundary(start, forward) {
      var includeWrap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
      return _moveToLineBoundary(this, start, forward, includeWrap);
    }
    /**
    Move a cursor position vertically. When `distance` isn't given,
    it defaults to moving to the next line (including wrapped
    lines). Otherwise, `distance` should provide a positive distance
    in pixels.
    
    When `start` has a
    [`goalColumn`](https://codemirror.net/6/docs/ref/#state.SelectionRange.goalColumn), the vertical
    motion will use that as a target horizontal position. Otherwise,
    the cursor's own horizontal position is used. The returned
    cursor will have its goal column set to whichever column was
    used.
    */
  }, {
    key: "moveVertically",
    value: function moveVertically(start, forward, distance) {
      return skipAtoms(this, start, _moveVertically(this, start, forward, distance));
    }
    /**
    Scroll the given document position into view.
    */
  }, {
    key: "scrollPosIntoView",
    value: function scrollPosIntoView(pos) {
      this.viewState.scrollTo = _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(pos);
      this.requestMeasure();
    }
    /**
    Find the DOM parent node and offset (child offset if `node` is
    an element, character offset when it is a text node) at the
    given document position.
    */
  }, {
    key: "domAtPos",
    value: function domAtPos(pos) {
      return this.docView.domAtPos(pos);
    }
    /**
    Find the document position at the given DOM node. Can be useful
    for associating positions with DOM events. Will raise an error
    when `node` isn't part of the editor content.
    */
  }, {
    key: "posAtDOM",
    value: function posAtDOM(node) {
      var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return this.docView.posFromDOM(node, offset);
    }
  }, {
    key: "posAtCoords",
    value: function posAtCoords(coords) {
      var precise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.readMeasured();
      return _posAtCoords(this, coords, precise);
    }
    /**
    Get the screen coordinates at the given document position.
    `side` determines whether the coordinates are based on the
    element before (-1) or after (1) the position (if no element is
    available on the given side, the method will transparently use
    another strategy to get reasonable coordinates).
    */
  }, {
    key: "coordsAtPos",
    value: function coordsAtPos(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
      this.readMeasured();
      var rect = this.docView.coordsAt(pos, side);
      if (!rect || rect.left == rect.right) return rect;
      var line = this.state.doc.lineAt(pos),
        order = this.bidiSpans(line);
      var span = order[BidiSpan.find(order, pos - line.from, -1, side)];
      return flattenRect(rect, span.dir == Direction.LTR == side > 0);
    }
    /**
    The default width of a character in the editor. May not
    accurately reflect the width of all characters (given variable
    width fonts or styling of invididual ranges).
    */
  }, {
    key: "defaultCharacterWidth",
    get: function get() {
      return this.viewState.heightOracle.charWidth;
    }
    /**
    The default height of a line in the editor. May not be accurate
    for all lines.
    */
  }, {
    key: "defaultLineHeight",
    get: function get() {
      return this.viewState.heightOracle.lineHeight;
    }
    /**
    The text direction
    ([`direction`](https://developer.mozilla.org/en-US/docs/Web/CSS/direction)
    CSS property) of the editor.
    */
  }, {
    key: "textDirection",
    get: function get() {
      return this.viewState.heightOracle.direction;
    }
    /**
    Whether this editor [wraps lines](https://codemirror.net/6/docs/ref/#view.EditorView.lineWrapping)
    (as determined by the
    [`white-space`](https://developer.mozilla.org/en-US/docs/Web/CSS/white-space)
    CSS property of its content element).
    */
  }, {
    key: "lineWrapping",
    get: function get() {
      return this.viewState.heightOracle.lineWrapping;
    }
    /**
    Returns the bidirectional text structure of the given line
    (which should be in the current document) as an array of span
    objects. The order of these spans matches the [text
    direction](https://codemirror.net/6/docs/ref/#view.EditorView.textDirection)—if that is
    left-to-right, the leftmost spans come first, otherwise the
    rightmost spans come first.
    */
  }, {
    key: "bidiSpans",
    value: function bidiSpans(line) {
      if (line.length > MaxBidiLine) return trivialOrder(line.length);
      var dir = this.textDirection;
      var _iterator46 = _createForOfIteratorHelper(this.bidiCache),
        _step46;
      try {
        for (_iterator46.s(); !(_step46 = _iterator46.n()).done;) {
          var entry = _step46.value;
          if (entry.from == line.from && entry.dir == dir) return entry.order;
        }
      } catch (err) {
        _iterator46.e(err);
      } finally {
        _iterator46.f();
      }
      var order = computeOrder(line.text, this.textDirection);
      this.bidiCache.push(new CachedOrder(line.from, line.to, dir, order));
      return order;
    }
    /**
    Check whether the editor has focus.
    */
  }, {
    key: "hasFocus",
    get: function get() {
      var _a;
      // Safari return false for hasFocus when the context menu is open
      // or closing, which leads us to ignore selection changes from the
      // context menu because it looks like the editor isn't focused.
      // This kludges around that.
      return (document.hasFocus() || browser.safari && ((_a = this.inputState) === null || _a === void 0 ? void 0 : _a.lastContextMenu) > Date.now() - 3e4) && this.root.activeElement == this.contentDOM;
    }
    /**
    Put focus on the editor.
    */
  }, {
    key: "focus",
    value: function focus() {
      var _this37 = this;
      this.observer.ignore(function () {
        focusPreventScroll(_this37.contentDOM);
        _this37.docView.updateSelection();
      });
    }
    /**
    Clean up this editor view, removing its element from the
    document, unregistering event handlers, and notifying
    plugins. The view instance can no longer be used after
    calling this.
    */
  }, {
    key: "destroy",
    value: function destroy() {
      var _iterator47 = _createForOfIteratorHelper(this.plugins),
        _step47;
      try {
        for (_iterator47.s(); !(_step47 = _iterator47.n()).done;) {
          var plugin = _step47.value;
          plugin.destroy(this);
        }
      } catch (err) {
        _iterator47.e(err);
      } finally {
        _iterator47.f();
      }
      this.inputState.destroy();
      this.dom.remove();
      this.observer.destroy();
      if (this.measureScheduled > -1) cancelAnimationFrame(this.measureScheduled);
    }
    /**
    Facet that can be used to add DOM event handlers. The value
    should be an object mapping event names to handler functions. The
    first such function to return true will be assumed to have handled
    that event, and no other handlers or built-in behavior will be
    activated for it.
    These are registered on the [content
    element](https://codemirror.net/6/docs/ref/#view.EditorView.contentDOM), except for `scroll`
    handlers, which will be called any time the editor's [scroll
    element](https://codemirror.net/6/docs/ref/#view.EditorView.scrollDOM) or one of its parent nodes
    is scrolled.
    */
  }], [{
    key: "domEventHandlers",
    value: function domEventHandlers(handlers) {
      return ViewPlugin.define(function () {
        return {};
      }, {
        eventHandlers: handlers
      });
    }
    /**
    Create a theme extension. The first argument can be a
    [`style-mod`](https://github.com/marijnh/style-mod#documentation)
    style spec providing the styles for the theme. These will be
    prefixed with a generated class for the style.
    
    Because the selectors will be prefixed with a scope class, rule
    that directly match the editor's [wrapper
    element](https://codemirror.net/6/docs/ref/#view.EditorView.dom)—to which the scope class will be
    added—need to be explicitly differentiated by adding an `&` to
    the selector for that element—for example
    `&.cm-focused`.
    
    When `dark` is set to true, the theme will be marked as dark,
    which will cause the `&dark` rules from [base
    themes](https://codemirror.net/6/docs/ref/#view.EditorView^baseTheme) to be used (as opposed to
    `&light` when a light theme is active).
    */
  }, {
    key: "theme",
    value: function theme(spec, options) {
      var prefix = style_mod__WEBPACK_IMPORTED_MODULE_0__.StyleModule.newName();
      var result = [_theme.of(prefix), styleModule.of(buildTheme(".".concat(prefix), spec))];
      if (options && options.dark) result.push(darkTheme.of(true));
      return result;
    }
    /**
    Create an extension that adds styles to the base theme. Like
    with [`theme`](https://codemirror.net/6/docs/ref/#view.EditorView^theme), use `&` to indicate the
    place of the editor wrapper element when directly targeting
    that. You can also use `&dark` or `&light` instead to only
    target editors with a dark or light theme.
    */
  }, {
    key: "baseTheme",
    value: function baseTheme(spec) {
      return _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Prec.fallback(styleModule.of(buildTheme("." + baseThemeID, spec, lightDarkIDs)));
    }
  }]);
  return EditorView;
}(); /**
     Facet to add a [style
     module](https://github.com/marijnh/style-mod#documentation) to
     an editor view. The view will ensure that the module is
     mounted in its [document
     root](https://codemirror.net/6/docs/ref/#view.EditorView.constructor^config.root).
     */
EditorView.styleModule = styleModule;
/**
An input handler can override the way changes to the editable
DOM content are handled. Handlers are passed the document
positions between which the change was found, and the new
content. When one returns true, no further input handlers are
called and the default behavior is prevented.
*/
EditorView.inputHandler = inputHandler;
/**
Allows you to provide a function that should be called when the
library catches an exception from an extension (mostly from view
plugins, but may be used by other extensions to route exceptions
from user-code-provided callbacks). This is mostly useful for
debugging and logging. See [`logException`](https://codemirror.net/6/docs/ref/#view.logException).
*/
EditorView.exceptionSink = exceptionSink;
/**
A facet that can be used to register a function to be called
every time the view updates.
*/
EditorView.updateListener = updateListener;
/**
Facet that controls whether the editor content is editable. When
its highest-precedence value is `false`, editing is disabled,
and the content element will no longer have its
`contenteditable` attribute set to `true`. (Note that this
doesn't affect API calls that change the editor content, even
when those are bound to keys or buttons.)
*/
EditorView.editable = editable;
/**
Allows you to influence the way mouse selection happens. The
functions in this facet will be called for a `mousedown` event
on the editor, and can return an object that overrides the way a
selection is computed from that mouse click or drag.
*/
EditorView.mouseSelectionStyle = mouseSelectionStyle;
/**
Facet used to configure whether a given selection drag event
should move or copy the selection. The given predicate will be
called with the `mousedown` event, and can return `true` when
the drag should move the content.
*/
EditorView.dragMovesSelection = dragMovesSelection$1;
/**
Facet used to configure whether a given selecting click adds
a new range to the existing selection or replaces it entirely.
*/
EditorView.clickAddsSelectionRange = clickAddsSelectionRange;
/**
A facet that determines which [decorations](https://codemirror.net/6/docs/ref/#view.Decoration)
are shown in the view. See also [view
plugins](https://codemirror.net/6/docs/ref/#view.EditorView^decorations), which have a separate
mechanism for providing decorations.
*/
EditorView.decorations = decorations;
/**
Facet that provides additional DOM attributes for the editor's
editable DOM element.
*/
EditorView.contentAttributes = contentAttributes;
/**
Facet that provides DOM attributes for the editor's outer
element.
*/
EditorView.editorAttributes = editorAttributes;
/**
An extension that enables line wrapping in the editor (by
setting CSS `white-space` to `pre-wrap` in the content).
*/
EditorView.lineWrapping = /*@__PURE__*/EditorView.contentAttributes.of({
  "class": "cm-lineWrapping"
});
/**
State effect used to include screen reader announcements in a
transaction. These will be added to the DOM in a visually hidden
element with `aria-live="polite"` set, and should be used to
describe effects that are visually obvious but may not be
noticed by screen reader users (such as moving to the next
search match).
*/
EditorView.announce = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.StateEffect.define();
// Maximum line length for which we compute accurate bidi info
var MaxBidiLine = 4096;
function ensureTop(given, dom) {
  return given == null ? dom.getBoundingClientRect().top : given;
}
var resizeDebounce = -1;
function ensureGlobalHandler() {
  window.addEventListener("resize", function () {
    if (resizeDebounce == -1) resizeDebounce = setTimeout(handleResize, 50);
  });
}
function handleResize() {
  resizeDebounce = -1;
  var found = document.querySelectorAll(".cm-content");
  for (var i = 0; i < found.length; i++) {
    var docView = ContentView.get(found[i]);
    if (docView) docView.editorView.requestMeasure();
  }
}
var BadMeasure = {};
var CachedOrder = /*#__PURE__*/function () {
  function CachedOrder(from, to, dir, order) {
    _classCallCheck(this, CachedOrder);
    this.from = from;
    this.to = to;
    this.dir = dir;
    this.order = order;
  }
  _createClass(CachedOrder, null, [{
    key: "update",
    value: function update(cache, changes) {
      if (changes.empty) return cache;
      var result = [],
        lastDir = cache.length ? cache[cache.length - 1].dir : Direction.LTR;
      for (var i = Math.max(0, cache.length - 10); i < cache.length; i++) {
        var entry = cache[i];
        if (entry.dir == lastDir && !changes.touchesRange(entry.from, entry.to)) result.push(new CachedOrder(changes.mapPos(entry.from, 1), changes.mapPos(entry.to, -1), entry.dir, entry.order));
      }
      return result;
    }
  }]);
  return CachedOrder;
}();
var currentPlatform = typeof navigator == "undefined" ? "key" : /*@__PURE__*/ /Mac/.test(navigator.platform) ? "mac" : /*@__PURE__*/ /Win/.test(navigator.platform) ? "win" : /*@__PURE__*/ /Linux|X11/.test(navigator.platform) ? "linux" : "key";
function normalizeKeyName(name, platform) {
  var parts = name.split(/-(?!$)/);
  var result = parts[parts.length - 1];
  if (result == "Space") result = " ";
  var alt, ctrl, shift, meta;
  for (var i = 0; i < parts.length - 1; ++i) {
    var mod = parts[i];
    if (/^(cmd|meta|m)$/i.test(mod)) meta = true;else if (/^a(lt)?$/i.test(mod)) alt = true;else if (/^(c|ctrl|control)$/i.test(mod)) ctrl = true;else if (/^s(hift)?$/i.test(mod)) shift = true;else if (/^mod$/i.test(mod)) {
      if (platform == "mac") meta = true;else ctrl = true;
    } else throw new Error("Unrecognized modifier name: " + mod);
  }
  if (alt) result = "Alt-" + result;
  if (ctrl) result = "Ctrl-" + result;
  if (meta) result = "Meta-" + result;
  if (shift) result = "Shift-" + result;
  return result;
}
function modifiers(name, event, shift) {
  if (event.altKey) name = "Alt-" + name;
  if (event.ctrlKey) name = "Ctrl-" + name;
  if (event.metaKey) name = "Meta-" + name;
  if (shift !== false && event.shiftKey) name = "Shift-" + name;
  return name;
}
var handleKeyEvents = /*@__PURE__*/EditorView.domEventHandlers({
  keydown: function keydown(event, view) {
    return runHandlers(getKeymap(view.state), event, view, "editor");
  }
});
/**
Facet used for registering keymaps.

You can add multiple keymaps to an editor. Their priorities
determine their precedence (the ones specified early or with high
priority get checked first). When a handler has returned `true`
for a given key, no further handlers are called.
*/
var keymap = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define({
  enables: handleKeyEvents
});
var Keymaps = /*@__PURE__*/new WeakMap();
// This is hidden behind an indirection, rather than directly computed
// by the facet, to keep internal types out of the facet's type.
function getKeymap(state) {
  var bindings = state.facet(keymap);
  var map = Keymaps.get(bindings);
  if (!map) Keymaps.set(bindings, map = buildKeymap(bindings.reduce(function (a, b) {
    return a.concat(b);
  }, [])));
  return map;
}
/**
Run the key handlers registered for a given scope. The event
object should be `"keydown"` event. Returns true if any of the
handlers handled it.
*/
function runScopeHandlers(view, event, scope) {
  return runHandlers(getKeymap(view.state), event, view, scope);
}
var storedPrefix = null;
var PrefixTimeout = 4000;
function buildKeymap(bindings) {
  var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : currentPlatform;
  var bound = Object.create(null);
  var isPrefix = Object.create(null);
  var checkPrefix = function checkPrefix(name, is) {
    var current = isPrefix[name];
    if (current == null) isPrefix[name] = is;else if (current != is) throw new Error("Key binding " + name + " is used both as a regular binding and as a multi-stroke prefix");
  };
  var add = function add(scope, key, command, preventDefault) {
    var scopeObj = bound[scope] || (bound[scope] = Object.create(null));
    var parts = key.split(/ (?!$)/).map(function (k) {
      return normalizeKeyName(k, platform);
    });
    var _loop5 = function _loop5(i) {
      var prefix = parts.slice(0, i).join(" ");
      checkPrefix(prefix, true);
      if (!scopeObj[prefix]) scopeObj[prefix] = {
        preventDefault: true,
        commands: [function (view) {
          var ourObj = storedPrefix = {
            view: view,
            prefix: prefix,
            scope: scope
          };
          setTimeout(function () {
            if (storedPrefix == ourObj) storedPrefix = null;
          }, PrefixTimeout);
          return true;
        }]
      };
    };
    for (var i = 1; i < parts.length; i++) {
      _loop5(i);
    }
    var full = parts.join(" ");
    checkPrefix(full, false);
    var binding = scopeObj[full] || (scopeObj[full] = {
      preventDefault: false,
      commands: []
    });
    binding.commands.push(command);
    if (preventDefault) binding.preventDefault = true;
  };
  var _iterator48 = _createForOfIteratorHelper(bindings),
    _step48;
  try {
    for (_iterator48.s(); !(_step48 = _iterator48.n()).done;) {
      var b = _step48.value;
      var name = b[platform] || b.key;
      if (!name) continue;
      var _iterator49 = _createForOfIteratorHelper(b.scope ? b.scope.split(" ") : ["editor"]),
        _step49;
      try {
        for (_iterator49.s(); !(_step49 = _iterator49.n()).done;) {
          var scope = _step49.value;
          add(scope, name, b.run, b.preventDefault);
          if (b.shift) add(scope, "Shift-" + name, b.shift, b.preventDefault);
        }
      } catch (err) {
        _iterator49.e(err);
      } finally {
        _iterator49.f();
      }
    }
  } catch (err) {
    _iterator48.e(err);
  } finally {
    _iterator48.f();
  }
  return bound;
}
function runHandlers(map, event, view, scope) {
  var name = (0,w3c_keyname__WEBPACK_IMPORTED_MODULE_2__.keyName)(event),
    isChar = name.length == 1 && name != " ";
  var prefix = "",
    fallthrough = false;
  if (storedPrefix && storedPrefix.view == view && storedPrefix.scope == scope) {
    prefix = storedPrefix.prefix + " ";
    if (fallthrough = modifierCodes.indexOf(event.keyCode) < 0) storedPrefix = null;
  }
  var runFor = function runFor(binding) {
    if (binding) {
      var _iterator50 = _createForOfIteratorHelper(binding.commands),
        _step50;
      try {
        for (_iterator50.s(); !(_step50 = _iterator50.n()).done;) {
          var cmd = _step50.value;
          if (cmd(view)) return true;
        }
      } catch (err) {
        _iterator50.e(err);
      } finally {
        _iterator50.f();
      }
      if (binding.preventDefault) fallthrough = true;
    }
    return false;
  };
  var scopeObj = map[scope],
    baseName;
  if (scopeObj) {
    if (runFor(scopeObj[prefix + modifiers(name, event, !isChar)])) return true;
    if (isChar && (event.shiftKey || event.altKey || event.metaKey) && (baseName = w3c_keyname__WEBPACK_IMPORTED_MODULE_2__.base[event.keyCode]) && baseName != name) {
      if (runFor(scopeObj[prefix + modifiers(baseName, event, true)])) return true;
    } else if (isChar && event.shiftKey) {
      if (runFor(scopeObj[prefix + modifiers(name, event, true)])) return true;
    }
  }
  return fallthrough;
}
var CanHidePrimary = !browser.ios; // FIXME test IE
var selectionConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define({
  combine: function combine(configs) {
    return (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.combineConfig)(configs, {
      cursorBlinkRate: 1200,
      drawRangeCursor: true
    }, {
      cursorBlinkRate: function cursorBlinkRate(a, b) {
        return Math.min(a, b);
      },
      drawRangeCursor: function drawRangeCursor(a, b) {
        return a || b;
      }
    });
  }
});
/**
Returns an extension that hides the browser's native selection and
cursor, replacing the selection with a background behind the text
(with the `cm-selectionBackground` class), and the
cursors with elements overlaid over the code (using
`cm-cursor-primary` and `cm-cursor-secondary`).

This allows the editor to display secondary selection ranges, and
tends to produce a type of selection more in line with that users
expect in a text editor (the native selection styling will often
leave gaps between lines and won't fill the horizontal space after
a line when the selection continues past it).

It does have a performance cost, in that it requires an extra DOM
layout cycle for many updates (the selection is drawn based on DOM
layout information that's only available after laying out the
content).
*/
function drawSelection() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [selectionConfig.of(config), drawSelectionPlugin, hideNativeSelection];
}
var Piece = /*#__PURE__*/function () {
  function Piece(left, top, width, height, className) {
    _classCallCheck(this, Piece);
    this.left = left;
    this.top = top;
    this.width = width;
    this.height = height;
    this.className = className;
  }
  _createClass(Piece, [{
    key: "draw",
    value: function draw() {
      var elt = document.createElement("div");
      elt.className = this.className;
      this.adjust(elt);
      return elt;
    }
  }, {
    key: "adjust",
    value: function adjust(elt) {
      elt.style.left = this.left + "px";
      elt.style.top = this.top + "px";
      if (this.width >= 0) elt.style.width = this.width + "px";
      elt.style.height = this.height + "px";
    }
  }, {
    key: "eq",
    value: function eq(p) {
      return this.left == p.left && this.top == p.top && this.width == p.width && this.height == p.height && this.className == p.className;
    }
  }]);
  return Piece;
}();
var drawSelectionPlugin = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class(view) {
    _classCallCheck(this, _class);
    this.view = view;
    this.rangePieces = [];
    this.cursors = [];
    this.measureReq = {
      read: this.readPos.bind(this),
      write: this.drawSel.bind(this)
    };
    this.selectionLayer = view.scrollDOM.appendChild(document.createElement("div"));
    this.selectionLayer.className = "cm-selectionLayer";
    this.selectionLayer.setAttribute("aria-hidden", "true");
    this.cursorLayer = view.scrollDOM.appendChild(document.createElement("div"));
    this.cursorLayer.className = "cm-cursorLayer";
    this.cursorLayer.setAttribute("aria-hidden", "true");
    view.requestMeasure(this.measureReq);
    this.setBlinkRate();
  }
  _createClass(_class, [{
    key: "setBlinkRate",
    value: function setBlinkRate() {
      this.cursorLayer.style.animationDuration = this.view.state.facet(selectionConfig).cursorBlinkRate + "ms";
    }
  }, {
    key: "update",
    value: function update(_update6) {
      var confChanged = _update6.startState.facet(selectionConfig) != _update6.state.facet(selectionConfig);
      if (confChanged || _update6.selectionSet || _update6.geometryChanged || _update6.viewportChanged) this.view.requestMeasure(this.measureReq);
      if (_update6.transactions.some(function (tr) {
        return tr.scrollIntoView;
      })) this.cursorLayer.style.animationName = this.cursorLayer.style.animationName == "cm-blink" ? "cm-blink2" : "cm-blink";
      if (confChanged) this.setBlinkRate();
    }
  }, {
    key: "readPos",
    value: function readPos() {
      var _this38 = this;
      var state = this.view.state,
        conf = state.facet(selectionConfig);
      var rangePieces = state.selection.ranges.map(function (r) {
        return r.empty ? [] : measureRange(_this38.view, r);
      }).reduce(function (a, b) {
        return a.concat(b);
      });
      var cursors = [];
      var _iterator51 = _createForOfIteratorHelper(state.selection.ranges),
        _step51;
      try {
        for (_iterator51.s(); !(_step51 = _iterator51.n()).done;) {
          var _r = _step51.value;
          var prim = _r == state.selection.main;
          if (_r.empty ? !prim || CanHidePrimary : conf.drawRangeCursor) {
            var piece = measureCursor(this.view, _r, prim);
            if (piece) cursors.push(piece);
          }
        }
      } catch (err) {
        _iterator51.e(err);
      } finally {
        _iterator51.f();
      }
      return {
        rangePieces: rangePieces,
        cursors: cursors
      };
    }
  }, {
    key: "drawSel",
    value: function drawSel(_ref12) {
      var _this39 = this;
      var rangePieces = _ref12.rangePieces,
        cursors = _ref12.cursors;
      if (rangePieces.length != this.rangePieces.length || rangePieces.some(function (p, i) {
        return !p.eq(_this39.rangePieces[i]);
      })) {
        this.selectionLayer.textContent = "";
        var _iterator52 = _createForOfIteratorHelper(rangePieces),
          _step52;
        try {
          for (_iterator52.s(); !(_step52 = _iterator52.n()).done;) {
            var _p2 = _step52.value;
            this.selectionLayer.appendChild(_p2.draw());
          }
        } catch (err) {
          _iterator52.e(err);
        } finally {
          _iterator52.f();
        }
        this.rangePieces = rangePieces;
      }
      if (cursors.length != this.cursors.length || cursors.some(function (c, i) {
        return !c.eq(_this39.cursors[i]);
      })) {
        var oldCursors = this.cursorLayer.children;
        if (oldCursors.length !== cursors.length) {
          this.cursorLayer.textContent = "";
          var _iterator53 = _createForOfIteratorHelper(cursors),
            _step53;
          try {
            for (_iterator53.s(); !(_step53 = _iterator53.n()).done;) {
              var c = _step53.value;
              this.cursorLayer.appendChild(c.draw());
            }
          } catch (err) {
            _iterator53.e(err);
          } finally {
            _iterator53.f();
          }
        } else {
          cursors.forEach(function (c, idx) {
            return c.adjust(oldCursors[idx]);
          });
        }
        this.cursors = cursors;
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      this.selectionLayer.remove();
      this.cursorLayer.remove();
    }
  }]);
  return _class;
}());
var themeSpec = {
  ".cm-line": {
    "& ::selection": {
      backgroundColor: "transparent !important"
    },
    "&::selection": {
      backgroundColor: "transparent !important"
    }
  }
};
if (CanHidePrimary) themeSpec[".cm-line"].caretColor = "transparent !important";
var hideNativeSelection = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Prec.override( /*@__PURE__*/EditorView.theme(themeSpec));
function getBase(view) {
  var rect = view.scrollDOM.getBoundingClientRect();
  var left = view.textDirection == Direction.LTR ? rect.left : rect.right - view.scrollDOM.clientWidth;
  return {
    left: left - view.scrollDOM.scrollLeft,
    top: rect.top - view.scrollDOM.scrollTop
  };
}
function wrappedLine(view, pos, inside) {
  var range = _codemirror_state__WEBPACK_IMPORTED_MODULE_4__.EditorSelection.cursor(pos);
  return {
    from: Math.max(inside.from, view.moveToLineBoundary(range, false, true).from),
    to: Math.min(inside.to, view.moveToLineBoundary(range, true, true).from),
    type: BlockType.Text
  };
}
function blockAt(view, pos) {
  var line = view.visualLineAt(pos);
  if (Array.isArray(line.type)) {
    var _iterator54 = _createForOfIteratorHelper(line.type),
      _step54;
    try {
      for (_iterator54.s(); !(_step54 = _iterator54.n()).done;) {
        var _l2 = _step54.value;
        if (_l2.to > pos || _l2.to == pos && (_l2.to == line.to || _l2.type == BlockType.Text)) return _l2;
      }
    } catch (err) {
      _iterator54.e(err);
    } finally {
      _iterator54.f();
    }
  }
  return line;
}
function measureRange(view, range) {
  if (range.to <= view.viewport.from || range.from >= view.viewport.to) return [];
  var from = Math.max(range.from, view.viewport.from),
    to = Math.min(range.to, view.viewport.to);
  var ltr = view.textDirection == Direction.LTR;
  var content = view.contentDOM,
    contentRect = content.getBoundingClientRect(),
    base = getBase(view);
  var lineStyle = window.getComputedStyle(content.firstChild);
  var leftSide = contentRect.left + parseInt(lineStyle.paddingLeft);
  var rightSide = contentRect.right - parseInt(lineStyle.paddingRight);
  var startBlock = blockAt(view, from),
    endBlock = blockAt(view, to);
  var visualStart = startBlock.type == BlockType.Text ? startBlock : null;
  var visualEnd = endBlock.type == BlockType.Text ? endBlock : null;
  if (view.lineWrapping) {
    if (visualStart) visualStart = wrappedLine(view, from, visualStart);
    if (visualEnd) visualEnd = wrappedLine(view, to, visualEnd);
  }
  if (visualStart && visualEnd && visualStart.from == visualEnd.from) {
    return pieces(drawForLine(range.from, range.to, visualStart));
  } else {
    var top = visualStart ? drawForLine(range.from, null, visualStart) : drawForWidget(startBlock, false);
    var bottom = visualEnd ? drawForLine(null, range.to, visualEnd) : drawForWidget(endBlock, true);
    var between = [];
    if ((visualStart || startBlock).to < (visualEnd || endBlock).from - 1) between.push(piece(leftSide, top.bottom, rightSide, bottom.top));else if (top.bottom < bottom.top && blockAt(view, (top.bottom + bottom.top) / 2).type == BlockType.Text) top.bottom = bottom.top = (top.bottom + bottom.top) / 2;
    return pieces(top).concat(between).concat(pieces(bottom));
  }
  function piece(left, top, right, bottom) {
    return new Piece(left - base.left, top - base.top, right - left, bottom - top, "cm-selectionBackground");
  }
  function pieces(_ref13) {
    var top = _ref13.top,
      bottom = _ref13.bottom,
      horizontal = _ref13.horizontal;
    var pieces = [];
    for (var i = 0; i < horizontal.length; i += 2) {
      pieces.push(piece(horizontal[i], top, horizontal[i + 1], bottom));
    }
    return pieces;
  }
  // Gets passed from/to in line-local positions
  function drawForLine(from, to, line) {
    var top = 1e9,
      bottom = -1e9,
      horizontal = [];
    function addSpan(from, fromOpen, to, toOpen, dir) {
      // Passing 2/-2 is a kludge to force the view to return
      // coordinates on the proper side of block widgets, since
      // normalizing the side there, though appropriate for most
      // coordsAtPos queries, would break selection drawing.
      var fromCoords = view.coordsAtPos(from, from == line.to ? -2 : 2);
      var toCoords = view.coordsAtPos(to, to == line.from ? 2 : -2);
      top = Math.min(fromCoords.top, toCoords.top, top);
      bottom = Math.max(fromCoords.bottom, toCoords.bottom, bottom);
      if (dir == Direction.LTR) horizontal.push(ltr && fromOpen ? leftSide : fromCoords.left, ltr && toOpen ? rightSide : toCoords.right);else horizontal.push(!ltr && toOpen ? leftSide : toCoords.left, !ltr && fromOpen ? rightSide : fromCoords.right);
    }
    var start = from !== null && from !== void 0 ? from : line.from,
      end = to !== null && to !== void 0 ? to : line.to;
    // Split the range by visible range and document line
    var _iterator55 = _createForOfIteratorHelper(view.visibleRanges),
      _step55;
    try {
      for (_iterator55.s(); !(_step55 = _iterator55.n()).done;) {
        var _r2 = _step55.value;
        if (_r2.to > start && _r2.from < end) {
          for (var pos = Math.max(_r2.from, start), endPos = Math.min(_r2.to, end);;) {
            var docLine = view.state.doc.lineAt(pos);
            var _iterator56 = _createForOfIteratorHelper(view.bidiSpans(docLine)),
              _step56;
            try {
              for (_iterator56.s(); !(_step56 = _iterator56.n()).done;) {
                var span = _step56.value;
                var spanFrom = span.from + docLine.from,
                  spanTo = span.to + docLine.from;
                if (spanFrom >= endPos) break;
                if (spanTo > pos) addSpan(Math.max(spanFrom, pos), from == null && spanFrom <= start, Math.min(spanTo, endPos), to == null && spanTo >= end, span.dir);
              }
            } catch (err) {
              _iterator56.e(err);
            } finally {
              _iterator56.f();
            }
            pos = docLine.to + 1;
            if (pos >= endPos) break;
          }
        }
      }
    } catch (err) {
      _iterator55.e(err);
    } finally {
      _iterator55.f();
    }
    if (horizontal.length == 0) addSpan(start, from == null, end, to == null, view.textDirection);
    return {
      top: top,
      bottom: bottom,
      horizontal: horizontal
    };
  }
  function drawForWidget(block, top) {
    var y = contentRect.top + (top ? block.top : block.bottom);
    return {
      top: y,
      bottom: y,
      horizontal: []
    };
  }
}
function measureCursor(view, cursor, primary) {
  var pos = view.coordsAtPos(cursor.head, cursor.assoc || 1);
  if (!pos) return null;
  var base = getBase(view);
  return new Piece(pos.left - base.left, pos.top - base.top, -1, pos.bottom - pos.top, primary ? "cm-cursor cm-cursor-primary" : "cm-cursor cm-cursor-secondary");
}
function iterMatches(doc, re, from, to, f) {
  re.lastIndex = 0;
  for (var cursor = doc.iterRange(from, to), pos = from, m; !cursor.next().done; pos += cursor.value.length) {
    if (!cursor.lineBreak) while (m = re.exec(cursor.value)) {
      f(pos + m.index, pos + m.index + m[0].length, m);
    }
  }
}
/**
Helper class used to make it easier to maintain decorations on
visible code that matches a given regular expression. To be used
in a [view plugin](https://codemirror.net/6/docs/ref/#view.ViewPlugin). Instances of this object
represent a matching configuration.
*/
var MatchDecorator = /*#__PURE__*/function () {
  /**
  Create a decorator.
  */
  function MatchDecorator(config) {
    _classCallCheck(this, MatchDecorator);
    var regexp = config.regexp,
      decoration = config.decoration,
      boundary = config.boundary;
    if (!regexp.global) throw new RangeError("The regular expression given to MatchDecorator should have its 'g' flag set");
    this.regexp = regexp;
    this.getDeco = typeof decoration == "function" ? decoration : function () {
      return decoration;
    };
    this.boundary = boundary;
  }
  /**
  Compute the full set of decorations for matches in the given
  view's viewport. You'll want to call this when initializing your
  plugin.
  */
  _createClass(MatchDecorator, [{
    key: "createDeco",
    value: function createDeco(view) {
      var _this40 = this;
      var build = new _codemirror_rangeset__WEBPACK_IMPORTED_MODULE_1__.RangeSetBuilder();
      var _iterator57 = _createForOfIteratorHelper(view.visibleRanges),
        _step57;
      try {
        for (_iterator57.s(); !(_step57 = _iterator57.n()).done;) {
          var _step57$value = _step57.value,
            from = _step57$value.from,
            to = _step57$value.to;
          iterMatches(view.state.doc, this.regexp, from, to, function (a, b, m) {
            return build.add(a, b, _this40.getDeco(m, view, a));
          });
        }
      } catch (err) {
        _iterator57.e(err);
      } finally {
        _iterator57.f();
      }
      return build.finish();
    }
    /**
    Update a set of decorations for a view update. `deco` _must_ be
    the set of decorations produced by _this_ `MatchDecorator` for
    the view state before the update.
    */
  }, {
    key: "updateDeco",
    value: function updateDeco(update, deco) {
      var changeFrom = 1e9,
        changeTo = -1;
      if (update.docChanged) update.changes.iterChanges(function (_f, _t, from, to) {
        if (to > update.view.viewport.from && from < update.view.viewport.to) {
          changeFrom = Math.min(from, changeFrom);
          changeTo = Math.max(to, changeTo);
        }
      });
      if (update.viewportChanged || changeTo - changeFrom > 1000) return this.createDeco(update.view);
      if (changeTo > -1) return this.updateRange(update.view, deco.map(update.changes), changeFrom, changeTo);
      return deco;
    }
  }, {
    key: "updateRange",
    value: function updateRange(view, deco, updateFrom, updateTo) {
      var _this41 = this;
      var _iterator58 = _createForOfIteratorHelper(view.visibleRanges),
        _step58;
      try {
        for (_iterator58.s(); !(_step58 = _iterator58.n()).done;) {
          var _r3 = _step58.value;
          var from = Math.max(_r3.from, updateFrom),
            to = Math.min(_r3.to, updateTo);
          if (to > from) {
            (function () {
              var fromLine = view.state.doc.lineAt(from),
                toLine = fromLine.to < to ? view.state.doc.lineAt(to) : fromLine;
              var start = Math.max(_r3.from, fromLine.from),
                end = Math.min(_r3.to, toLine.to);
              if (_this41.boundary) {
                for (; from > fromLine.from; from--) {
                  if (_this41.boundary.test(fromLine.text[from - 1 - fromLine.from])) {
                    start = from;
                    break;
                  }
                }
                for (; to < toLine.to; to++) {
                  if (_this41.boundary.test(toLine.text[to - toLine.from])) {
                    end = to;
                    break;
                  }
                }
              }
              var ranges = [],
                m = void 0;
              if (fromLine == toLine) {
                _this41.regexp.lastIndex = start - fromLine.from;
                while ((m = _this41.regexp.exec(fromLine.text)) && m.index < end - fromLine.from) {
                  var pos = m.index + fromLine.from;
                  ranges.push(_this41.getDeco(m, view, pos).range(pos, pos + m[0].length));
                }
              } else {
                iterMatches(view.state.doc, _this41.regexp, start, end, function (from, to, m) {
                  return ranges.push(_this41.getDeco(m, view, from).range(from, to));
                });
              }
              deco = deco.update({
                filterFrom: start,
                filterTo: end,
                filter: function filter() {
                  return false;
                },
                add: ranges
              });
            })();
          }
        }
      } catch (err) {
        _iterator58.e(err);
      } finally {
        _iterator58.f();
      }
      return deco;
    }
  }]);
  return MatchDecorator;
}();
var UnicodeRegexpSupport = /x/.unicode != null ? "gu" : "g";
var Specials = /*@__PURE__*/new RegExp("[\0-\b\n-\x1F\x7F-\x9F\xAD\u061C\u200B\u200E\u200F\u2028\u2029\uFEFF\uFFF9-\uFFFC]", UnicodeRegexpSupport);
var Names = {
  0: "null",
  7: "bell",
  8: "backspace",
  10: "newline",
  11: "vertical tab",
  13: "carriage return",
  27: "escape",
  8203: "zero width space",
  8204: "zero width non-joiner",
  8205: "zero width joiner",
  8206: "left-to-right mark",
  8207: "right-to-left mark",
  8232: "line separator",
  8233: "paragraph separator",
  65279: "zero width no-break space",
  65532: "object replacement"
};
var _supportsTabSize = null;
function supportsTabSize() {
  var _a;
  if (_supportsTabSize == null && typeof document != "undefined" && document.body) {
    var styles = document.body.style;
    _supportsTabSize = ((_a = styles.tabSize) !== null && _a !== void 0 ? _a : styles.MozTabSize) != null;
  }
  return _supportsTabSize || false;
}
var specialCharConfig = /*@__PURE__*/_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.Facet.define({
  combine: function combine(configs) {
    var config = (0,_codemirror_state__WEBPACK_IMPORTED_MODULE_4__.combineConfig)(configs, {
      render: null,
      specialChars: Specials,
      addSpecialChars: null
    });
    if (config.replaceTabs = !supportsTabSize()) config.specialChars = new RegExp("\t|" + config.specialChars.source, UnicodeRegexpSupport);
    if (config.addSpecialChars) config.specialChars = new RegExp(config.specialChars.source + "|" + config.addSpecialChars.source, UnicodeRegexpSupport);
    return config;
  }
});
/**
Returns an extension that installs highlighting of special
characters.
*/
function highlightSpecialChars() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return [specialCharConfig.of(config), specialCharPlugin()];
}
var _plugin = null;
function specialCharPlugin() {
  return _plugin || (_plugin = ViewPlugin.fromClass( /*#__PURE__*/function () {
    function _class2(view) {
      _classCallCheck(this, _class2);
      this.view = view;
      this.decorations = Decoration.none;
      this.decorationCache = Object.create(null);
      this.decorator = this.makeDecorator(view.state.facet(specialCharConfig));
      this.decorations = this.decorator.createDeco(view);
    }
    _createClass(_class2, [{
      key: "makeDecorator",
      value: function makeDecorator(conf) {
        var _this42 = this;
        return new MatchDecorator({
          regexp: conf.specialChars,
          decoration: function decoration(m, view, pos) {
            var doc = view.state.doc;
            var code = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.codePointAt)(m[0], 0);
            if (code == 9) {
              var line = doc.lineAt(pos);
              var size = view.state.tabSize,
                col = (0,_codemirror_text__WEBPACK_IMPORTED_MODULE_3__.countColumn)(doc.sliceString(line.from, pos), 0, size);
              return Decoration.replace({
                widget: new TabWidget((size - col % size) * _this42.view.defaultCharacterWidth)
              });
            }
            return _this42.decorationCache[code] || (_this42.decorationCache[code] = Decoration.replace({
              widget: new SpecialCharWidget(conf, code)
            }));
          },
          boundary: conf.replaceTabs ? undefined : /[^]/
        });
      }
    }, {
      key: "update",
      value: function update(_update7) {
        var conf = _update7.state.facet(specialCharConfig);
        if (_update7.startState.facet(specialCharConfig) != conf) {
          this.decorator = this.makeDecorator(conf);
          this.decorations = this.decorator.createDeco(_update7.view);
        } else {
          this.decorations = this.decorator.updateDeco(_update7, this.decorations);
        }
      }
    }]);
    return _class2;
  }(), {
    decorations: function decorations(v) {
      return v.decorations;
    }
  }));
}
var DefaultPlaceholder = "\u2022";
// Assigns placeholder characters from the Control Pictures block to
// ASCII control characters
function placeholder$1(code) {
  if (code >= 32) return DefaultPlaceholder;
  if (code == 10) return "\u2424";
  return String.fromCharCode(9216 + code);
}
var SpecialCharWidget = /*#__PURE__*/function (_WidgetType5) {
  _inherits(SpecialCharWidget, _WidgetType5);
  var _super21 = _createSuper(SpecialCharWidget);
  function SpecialCharWidget(options, code) {
    var _this43;
    _classCallCheck(this, SpecialCharWidget);
    _this43 = _super21.call(this);
    _this43.options = options;
    _this43.code = code;
    return _this43;
  }
  _createClass(SpecialCharWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.code == this.code;
    }
  }, {
    key: "toDOM",
    value: function toDOM(view) {
      var ph = placeholder$1(this.code);
      var desc = view.state.phrase("Control character") + " " + (Names[this.code] || "0x" + this.code.toString(16));
      var custom = this.options.render && this.options.render(this.code, desc, ph);
      if (custom) return custom;
      var span = document.createElement("span");
      span.textContent = ph;
      span.title = desc;
      span.setAttribute("aria-label", desc);
      span.className = "cm-specialChar";
      return span;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent() {
      return false;
    }
  }]);
  return SpecialCharWidget;
}(WidgetType);
var TabWidget = /*#__PURE__*/function (_WidgetType6) {
  _inherits(TabWidget, _WidgetType6);
  var _super22 = _createSuper(TabWidget);
  function TabWidget(width) {
    var _this44;
    _classCallCheck(this, TabWidget);
    _this44 = _super22.call(this);
    _this44.width = width;
    return _this44;
  }
  _createClass(TabWidget, [{
    key: "eq",
    value: function eq(other) {
      return other.width == this.width;
    }
  }, {
    key: "toDOM",
    value: function toDOM() {
      var span = document.createElement("span");
      span.textContent = "\t";
      span.className = "cm-tab";
      span.style.width = this.width + "px";
      return span;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent() {
      return false;
    }
  }]);
  return TabWidget;
}(WidgetType); /**
               Mark lines that have a cursor on them with the `"cm-activeLine"`
               DOM class.
               */
function highlightActiveLine() {
  return activeLineHighlighter;
}
var lineDeco = /*@__PURE__*/Decoration.line({
  attributes: {
    "class": "cm-activeLine"
  }
});
var activeLineHighlighter = /*@__PURE__*/ViewPlugin.fromClass( /*#__PURE__*/function () {
  function _class3(view) {
    _classCallCheck(this, _class3);
    this.decorations = this.getDeco(view);
  }
  _createClass(_class3, [{
    key: "update",
    value: function update(_update8) {
      if (_update8.docChanged || _update8.selectionSet) this.decorations = this.getDeco(_update8.view);
    }
  }, {
    key: "getDeco",
    value: function getDeco(view) {
      var lastLineStart = -1,
        deco = [];
      var _iterator59 = _createForOfIteratorHelper(view.state.selection.ranges),
        _step59;
      try {
        for (_iterator59.s(); !(_step59 = _iterator59.n()).done;) {
          var _r4 = _step59.value;
          if (!_r4.empty) return Decoration.none;
          var line = view.visualLineAt(_r4.head);
          if (line.from > lastLineStart) {
            deco.push(lineDeco.range(line.from));
            lastLineStart = line.from;
          }
        }
      } catch (err) {
        _iterator59.e(err);
      } finally {
        _iterator59.f();
      }
      return Decoration.set(deco);
    }
  }]);
  return _class3;
}(), {
  decorations: function decorations(v) {
    return v.decorations;
  }
});
var Placeholder = /*#__PURE__*/function (_WidgetType7) {
  _inherits(Placeholder, _WidgetType7);
  var _super23 = _createSuper(Placeholder);
  function Placeholder(content) {
    var _this45;
    _classCallCheck(this, Placeholder);
    _this45 = _super23.call(this);
    _this45.content = content;
    return _this45;
  }
  _createClass(Placeholder, [{
    key: "toDOM",
    value: function toDOM() {
      var wrap = document.createElement("span");
      wrap.className = "cm-placeholder";
      wrap.style.pointerEvents = "none";
      wrap.appendChild(typeof this.content == "string" ? document.createTextNode(this.content) : this.content);
      if (typeof this.content == "string") wrap.setAttribute("aria-label", "placeholder " + this.content);else wrap.setAttribute("aria-hidden", "true");
      return wrap;
    }
  }, {
    key: "ignoreEvent",
    value: function ignoreEvent() {
      return false;
    }
  }]);
  return Placeholder;
}(WidgetType); /**
               Extension that enables a placeholder—a piece of example content
               to show when the editor is empty.
               */
function placeholder(content) {
  return ViewPlugin.fromClass( /*#__PURE__*/function () {
    function _class4(view) {
      _classCallCheck(this, _class4);
      this.view = view;
      this.placeholder = Decoration.set([Decoration.widget({
        widget: new Placeholder(content),
        side: 1
      }).range(0)]);
    }
    _createClass(_class4, [{
      key: "decorations",
      get: function get() {
        return this.view.state.doc.length ? Decoration.none : this.placeholder;
      }
    }]);
    return _class4;
  }(), {
    decorations: function decorations(v) {
      return v.decorations;
    }
  });
}

/**
@internal
*/
var __test = {
  HeightMap: HeightMap,
  HeightOracle: HeightOracle,
  MeasuredHeights: MeasuredHeights,
  QueryType: QueryType,
  ChangedRange: ChangedRange,
  computeOrder: computeOrder,
  moveVisually: moveVisually
};


/***/ }),

/***/ "./node_modules/axios/index.js":
/*!*************************************!*\
  !*** ./node_modules/axios/index.js ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Axios": () => (/* binding */ Axios),
/* harmony export */   "AxiosError": () => (/* binding */ AxiosError),
/* harmony export */   "Cancel": () => (/* binding */ Cancel),
/* harmony export */   "CancelToken": () => (/* binding */ CancelToken),
/* harmony export */   "CanceledError": () => (/* binding */ CanceledError),
/* harmony export */   "VERSION": () => (/* binding */ VERSION),
/* harmony export */   "all": () => (/* binding */ all),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__),
/* harmony export */   "isAxiosError": () => (/* binding */ isAxiosError),
/* harmony export */   "isCancel": () => (/* binding */ isCancel),
/* harmony export */   "spread": () => (/* binding */ spread),
/* harmony export */   "toFormData": () => (/* binding */ toFormData)
/* harmony export */ });
/* harmony import */ var _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/axios.js */ "./node_modules/axios/lib/axios.js");


// Keep top-level export same with static properties
// so that it can keep same with es module or cjs
var Axios = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].Axios,
  AxiosError = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].AxiosError,
  CanceledError = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].CanceledError,
  isCancel = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].isCancel,
  CancelToken = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].CancelToken,
  VERSION = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].VERSION,
  all = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].all,
  Cancel = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].Cancel,
  isAxiosError = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].isAxiosError,
  spread = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].spread,
  toFormData = _lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFormData;
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_lib_axios_js__WEBPACK_IMPORTED_MODULE_0__["default"]);


/***/ }),

/***/ "./node_modules/axios/lib/adapters/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/adapters/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _http_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./xhr.js */ "./node_modules/axios/lib/adapters/xhr.js");



var adapters = {
  http: _http_js__WEBPACK_IMPORTED_MODULE_1__["default"],
  xhr: _http_js__WEBPACK_IMPORTED_MODULE_1__["default"]
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  getAdapter: function getAdapter(nameOrAdapter) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(nameOrAdapter)) {
      var adapter = adapters[nameOrAdapter];
      if (!nameOrAdapter) {
        throw Error(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProp(nameOrAdapter) ? "Adapter '".concat(nameOrAdapter, "' is not available in the build") : "Can not resolve adapter '".concat(nameOrAdapter, "'"));
      }
      return adapter;
    }
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(nameOrAdapter)) {
      throw new TypeError('adapter is not a function');
    }
    return nameOrAdapter;
  },
  adapters: adapters
});

/***/ }),

/***/ "./node_modules/axios/lib/adapters/xhr.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/adapters/xhr.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ xhrAdapter)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_settle_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../core/settle.js */ "./node_modules/axios/lib/core/settle.js");
/* harmony import */ var _helpers_cookies_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../helpers/cookies.js */ "./node_modules/axios/lib/helpers/cookies.js");
/* harmony import */ var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../helpers/buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js");
/* harmony import */ var _core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js");
/* harmony import */ var _helpers_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../helpers/isURLSameOrigin.js */ "./node_modules/axios/lib/helpers/isURLSameOrigin.js");
/* harmony import */ var _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../defaults/transitional.js */ "./node_modules/axios/lib/defaults/transitional.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../helpers/parseProtocol.js */ "./node_modules/axios/lib/helpers/parseProtocol.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");
/* harmony import */ var _helpers_speedometer_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../helpers/speedometer.js */ "./node_modules/axios/lib/helpers/speedometer.js");















function progressEventReducer(listener, isDownloadStream) {
  var bytesNotified = 0;
  var _speedometer = (0,_helpers_speedometer_js__WEBPACK_IMPORTED_MODULE_12__["default"])(50, 250);
  return function (e) {
    var loaded = e.loaded;
    var total = e.lengthComputable ? e.total : undefined;
    var progressBytes = loaded - bytesNotified;
    var rate = _speedometer(progressBytes);
    var inRange = loaded <= total;
    bytesNotified = loaded;
    var data = {
      loaded: loaded,
      total: total,
      progress: total ? loaded / total : undefined,
      bytes: progressBytes,
      rate: rate ? rate : undefined,
      estimated: rate && total && inRange ? (total - loaded) / rate : undefined
    };
    data[isDownloadStream ? 'download' : 'upload'] = true;
    listener(data);
  };
}
function xhrAdapter(config) {
  return new Promise(function dispatchXhrRequest(resolve, reject) {
    var requestData = config.data;
    var requestHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_11__["default"].from(config.headers).normalize();
    var responseType = config.responseType;
    var onCanceled;
    function done() {
      if (config.cancelToken) {
        config.cancelToken.unsubscribe(onCanceled);
      }
      if (config.signal) {
        config.signal.removeEventListener('abort', onCanceled);
      }
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(requestData) && _platform_index_js__WEBPACK_IMPORTED_MODULE_10__["default"].isStandardBrowserEnv) {
      requestHeaders.setContentType(false); // Let the browser set it
    }

    var request = new XMLHttpRequest();

    // HTTP basic authentication
    if (config.auth) {
      var username = config.auth.username || '';
      var password = config.auth.password ? unescape(encodeURIComponent(config.auth.password)) : '';
      requestHeaders.set('Authorization', 'Basic ' + btoa(username + ':' + password));
    }
    var fullPath = (0,_core_buildFullPath_js__WEBPACK_IMPORTED_MODULE_4__["default"])(config.baseURL, config.url);
    request.open(config.method.toUpperCase(), (0,_helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_3__["default"])(fullPath, config.params, config.paramsSerializer), true);

    // Set the request timeout in MS
    request.timeout = config.timeout;
    function onloadend() {
      if (!request) {
        return;
      }
      // Prepare the response
      var responseHeaders = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_11__["default"].from('getAllResponseHeaders' in request && request.getAllResponseHeaders());
      var responseData = !responseType || responseType === 'text' || responseType === 'json' ? request.responseText : request.response;
      var response = {
        data: responseData,
        status: request.status,
        statusText: request.statusText,
        headers: responseHeaders,
        config: config,
        request: request
      };
      (0,_core_settle_js__WEBPACK_IMPORTED_MODULE_1__["default"])(function _resolve(value) {
        resolve(value);
        done();
      }, function _reject(err) {
        reject(err);
        done();
      }, response);

      // Clean up request
      request = null;
    }
    if ('onloadend' in request) {
      // Use onloadend if available
      request.onloadend = onloadend;
    } else {
      // Listen for ready state to emulate onloadend
      request.onreadystatechange = function handleLoad() {
        if (!request || request.readyState !== 4) {
          return;
        }

        // The request errored out and we didn't get a response, this will be
        // handled by onerror instead
        // With one exception: request that using file: protocol, most browsers
        // will return status as 0 even though it's a successful request
        if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf('file:') === 0)) {
          return;
        }
        // readystate handler is calling before onerror or ontimeout handlers,
        // so we should call onloadend on the next 'tick'
        setTimeout(onloadend);
      };
    }

    // Handle browser request cancellation (as opposed to a manual cancellation)
    request.onabort = function handleAbort() {
      if (!request) {
        return;
      }
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"]('Request aborted', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Handle low level network errors
    request.onerror = function handleError() {
      // Real errors are hidden from us by the browser
      // onerror should only fire if it's a network error
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"]('Network Error', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ERR_NETWORK, config, request));

      // Clean up request
      request = null;
    };

    // Handle timeout
    request.ontimeout = function handleTimeout() {
      var timeoutErrorMessage = config.timeout ? 'timeout of ' + config.timeout + 'ms exceeded' : 'timeout exceeded';
      var transitional = config.transitional || _defaults_transitional_js__WEBPACK_IMPORTED_MODULE_6__["default"];
      if (config.timeoutErrorMessage) {
        timeoutErrorMessage = config.timeoutErrorMessage;
      }
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"](timeoutErrorMessage, transitional.clarifyTimeoutError ? _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ETIMEDOUT : _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ECONNABORTED, config, request));

      // Clean up request
      request = null;
    };

    // Add xsrf header
    // This is only done if running in a standard browser environment.
    // Specifically not if we're in a web worker, or react-native.
    if (_platform_index_js__WEBPACK_IMPORTED_MODULE_10__["default"].isStandardBrowserEnv) {
      // Add xsrf header
      var xsrfValue = (config.withCredentials || (0,_helpers_isURLSameOrigin_js__WEBPACK_IMPORTED_MODULE_5__["default"])(fullPath)) && config.xsrfCookieName && _helpers_cookies_js__WEBPACK_IMPORTED_MODULE_2__["default"].read(config.xsrfCookieName);
      if (xsrfValue) {
        requestHeaders.set(config.xsrfHeaderName, xsrfValue);
      }
    }

    // Remove Content-Type if data is undefined
    requestData === undefined && requestHeaders.setContentType(null);

    // Add headers to the request
    if ('setRequestHeader' in request) {
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
        request.setRequestHeader(key, val);
      });
    }

    // Add withCredentials to request if needed
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(config.withCredentials)) {
      request.withCredentials = !!config.withCredentials;
    }

    // Add responseType to request if needed
    if (responseType && responseType !== 'json') {
      request.responseType = config.responseType;
    }

    // Handle progress if needed
    if (typeof config.onDownloadProgress === 'function') {
      request.addEventListener('progress', progressEventReducer(config.onDownloadProgress, true));
    }

    // Not all browsers support upload events
    if (typeof config.onUploadProgress === 'function' && request.upload) {
      request.upload.addEventListener('progress', progressEventReducer(config.onUploadProgress));
    }
    if (config.cancelToken || config.signal) {
      // Handle cancellation
      // eslint-disable-next-line func-names
      onCanceled = function onCanceled(cancel) {
        if (!request) {
          return;
        }
        reject(!cancel || cancel.type ? new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_8__["default"](null, config, request) : cancel);
        request.abort();
        request = null;
      };
      config.cancelToken && config.cancelToken.subscribe(onCanceled);
      if (config.signal) {
        config.signal.aborted ? onCanceled() : config.signal.addEventListener('abort', onCanceled);
      }
    }
    var protocol = (0,_helpers_parseProtocol_js__WEBPACK_IMPORTED_MODULE_9__["default"])(fullPath);
    if (protocol && _platform_index_js__WEBPACK_IMPORTED_MODULE_10__["default"].protocols.indexOf(protocol) === -1) {
      reject(new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"]('Unsupported protocol ' + protocol + ':', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_7__["default"].ERR_BAD_REQUEST, config));
      return;
    }

    // Send the request
    request.send(requestData || null);
  });
}

/***/ }),

/***/ "./node_modules/axios/lib/axios.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/axios.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js");
/* harmony import */ var _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/Axios.js */ "./node_modules/axios/lib/core/Axios.js");
/* harmony import */ var _core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./cancel/CancelToken.js */ "./node_modules/axios/lib/cancel/CancelToken.js");
/* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js");
/* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./env/data.js */ "./node_modules/axios/lib/env/data.js");
/* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _helpers_spread_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./helpers/spread.js */ "./node_modules/axios/lib/helpers/spread.js");
/* harmony import */ var _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./helpers/isAxiosError.js */ "./node_modules/axios/lib/helpers/isAxiosError.js");

















/**
 * Create an instance of Axios
 *
 * @param {Object} defaultConfig The default config for the instance
 *
 * @returns {Axios} A new instance of Axios
 */
function createInstance(defaultConfig) {
  var context = new _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__["default"](defaultConfig);
  var instance = (0,_helpers_bind_js__WEBPACK_IMPORTED_MODULE_1__["default"])(_core_Axios_js__WEBPACK_IMPORTED_MODULE_2__["default"].prototype.request, context);

  // Copy axios.prototype to instance
  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].extend(instance, _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__["default"].prototype, context, {
    allOwnKeys: true
  });

  // Copy context to instance
  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].extend(instance, context, null, {
    allOwnKeys: true
  });

  // Factory for creating new instances
  instance.create = function create(instanceConfig) {
    return createInstance((0,_core_mergeConfig_js__WEBPACK_IMPORTED_MODULE_3__["default"])(defaultConfig, instanceConfig));
  };
  return instance;
}

// Create the default instance to be exported
var axios = createInstance(_defaults_index_js__WEBPACK_IMPORTED_MODULE_4__["default"]);

// Expose Axios class to allow class inheritance
axios.Axios = _core_Axios_js__WEBPACK_IMPORTED_MODULE_2__["default"];

// Expose Cancel & CancelToken
axios.CanceledError = _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_6__["default"];
axios.CancelToken = _cancel_CancelToken_js__WEBPACK_IMPORTED_MODULE_7__["default"];
axios.isCancel = _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_8__["default"];
axios.VERSION = _env_data_js__WEBPACK_IMPORTED_MODULE_9__.VERSION;
axios.toFormData = _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_10__["default"];

// Expose AxiosError class
axios.AxiosError = _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_11__["default"];

// alias for CanceledError for backward compatibility
axios.Cancel = axios.CanceledError;

// Expose all/spread
axios.all = function all(promises) {
  return Promise.all(promises);
};
axios.spread = _helpers_spread_js__WEBPACK_IMPORTED_MODULE_12__["default"];

// Expose isAxiosError
axios.isAxiosError = _helpers_isAxiosError_js__WEBPACK_IMPORTED_MODULE_13__["default"];
axios.formToJSON = function (thing) {
  return (0,_helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_5__["default"])(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHTMLForm(thing) ? new FormData(thing) : thing);
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (axios);

/***/ }),

/***/ "./node_modules/axios/lib/cancel/CancelToken.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CancelToken.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }


/**
 * A `CancelToken` is an object that can be used to request cancellation of an operation.
 *
 * @param {Function} executor The executor function.
 *
 * @returns {CancelToken}
 */
var CancelToken = /*#__PURE__*/function () {
  function CancelToken(executor) {
    _classCallCheck(this, CancelToken);
    if (typeof executor !== 'function') {
      throw new TypeError('executor must be a function.');
    }
    var resolvePromise;
    this.promise = new Promise(function promiseExecutor(resolve) {
      resolvePromise = resolve;
    });
    var token = this;

    // eslint-disable-next-line func-names
    this.promise.then(function (cancel) {
      if (!token._listeners) return;
      var i = token._listeners.length;
      while (i-- > 0) {
        token._listeners[i](cancel);
      }
      token._listeners = null;
    });

    // eslint-disable-next-line func-names
    this.promise.then = function (onfulfilled) {
      var _resolve;
      // eslint-disable-next-line func-names
      var promise = new Promise(function (resolve) {
        token.subscribe(resolve);
        _resolve = resolve;
      }).then(onfulfilled);
      promise.cancel = function reject() {
        token.unsubscribe(_resolve);
      };
      return promise;
    };
    executor(function cancel(message, config, request) {
      if (token.reason) {
        // Cancellation has already been requested
        return;
      }
      token.reason = new _CanceledError_js__WEBPACK_IMPORTED_MODULE_0__["default"](message, config, request);
      resolvePromise(token.reason);
    });
  }

  /**
   * Throws a `CanceledError` if cancellation has been requested.
   */
  _createClass(CancelToken, [{
    key: "throwIfRequested",
    value: function throwIfRequested() {
      if (this.reason) {
        throw this.reason;
      }
    }

    /**
     * Subscribe to the cancel signal
     */
  }, {
    key: "subscribe",
    value: function subscribe(listener) {
      if (this.reason) {
        listener(this.reason);
        return;
      }
      if (this._listeners) {
        this._listeners.push(listener);
      } else {
        this._listeners = [listener];
      }
    }

    /**
     * Unsubscribe from the cancel signal
     */
  }, {
    key: "unsubscribe",
    value: function unsubscribe(listener) {
      if (!this._listeners) {
        return;
      }
      var index = this._listeners.indexOf(listener);
      if (index !== -1) {
        this._listeners.splice(index, 1);
      }
    }

    /**
     * Returns an object that contains a new `CancelToken` and a function that, when called,
     * cancels the `CancelToken`.
     */
  }], [{
    key: "source",
    value: function source() {
      var cancel;
      var token = new CancelToken(function executor(c) {
        cancel = c;
      });
      return {
        token: token,
        cancel: cancel
      };
    }
  }]);
  return CancelToken;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CancelToken);

/***/ }),

/***/ "./node_modules/axios/lib/cancel/CanceledError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/cancel/CanceledError.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");





/**
 * A `CanceledError` is an object that is thrown when an operation is canceled.
 *
 * @param {string=} message The message.
 * @param {Object=} config The config.
 * @param {Object=} request The request.
 *
 * @returns {CanceledError} The created error.
 */
function CanceledError(message, config, request) {
  // eslint-disable-next-line no-eq-null,eqeqeq
  _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(this, message == null ? 'canceled' : message, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_CANCELED, config, request);
  this.name = 'CanceledError';
}
_utils_js__WEBPACK_IMPORTED_MODULE_1__["default"].inherits(CanceledError, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"], {
  __CANCEL__: true
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (CanceledError);

/***/ }),

/***/ "./node_modules/axios/lib/cancel/isCancel.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/cancel/isCancel.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isCancel)
/* harmony export */ });


function isCancel(value) {
  return !!(value && value.__CANCEL__);
}

/***/ }),

/***/ "./node_modules/axios/lib/core/Axios.js":
/*!**********************************************!*\
  !*** ./node_modules/axios/lib/core/Axios.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/buildURL.js */ "./node_modules/axios/lib/helpers/buildURL.js");
/* harmony import */ var _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./InterceptorManager.js */ "./node_modules/axios/lib/core/InterceptorManager.js");
/* harmony import */ var _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./dispatchRequest.js */ "./node_modules/axios/lib/core/dispatchRequest.js");
/* harmony import */ var _mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./mergeConfig.js */ "./node_modules/axios/lib/core/mergeConfig.js");
/* harmony import */ var _buildFullPath_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./buildFullPath.js */ "./node_modules/axios/lib/core/buildFullPath.js");
/* harmony import */ var _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/validator.js */ "./node_modules/axios/lib/helpers/validator.js");
/* harmony import */ var _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }








var validators = _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__["default"].validators;

/**
 * Create a new instance of Axios
 *
 * @param {Object} instanceConfig The default config for the instance
 *
 * @return {Axios} A new instance of Axios
 */
var Axios = /*#__PURE__*/function () {
  function Axios(instanceConfig) {
    _classCallCheck(this, Axios);
    this.defaults = instanceConfig;
    this.interceptors = {
      request: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_2__["default"](),
      response: new _InterceptorManager_js__WEBPACK_IMPORTED_MODULE_2__["default"]()
    };
  }

  /**
   * Dispatch a request
   *
   * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
   * @param {?Object} config
   *
   * @returns {Promise} The Promise to be fulfilled
   */
  _createClass(Axios, [{
    key: "request",
    value: function request(configOrUrl, config) {
      /*eslint no-param-reassign:0*/
      // Allow for axios('example/url'[, config]) a la fetch API
      if (typeof configOrUrl === 'string') {
        config = config || {};
        config.url = configOrUrl;
      } else {
        config = configOrUrl || {};
      }
      config = (0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__["default"])(this.defaults, config);
      var _config = config,
        transitional = _config.transitional,
        paramsSerializer = _config.paramsSerializer;
      if (transitional !== undefined) {
        _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__["default"].assertOptions(transitional, {
          silentJSONParsing: validators.transitional(validators["boolean"]),
          forcedJSONParsing: validators.transitional(validators["boolean"]),
          clarifyTimeoutError: validators.transitional(validators["boolean"])
        }, false);
      }
      if (paramsSerializer !== undefined) {
        _helpers_validator_js__WEBPACK_IMPORTED_MODULE_6__["default"].assertOptions(paramsSerializer, {
          encode: validators["function"],
          serialize: validators["function"]
        }, true);
      }

      // Set config.method
      config.method = (config.method || this.defaults.method || 'get').toLowerCase();

      // Flatten headers
      var defaultHeaders = config.headers && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].merge(config.headers.common, config.headers[config.method]);
      defaultHeaders && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(['delete', 'get', 'head', 'post', 'put', 'patch', 'common'], function cleanHeaderConfig(method) {
        delete config.headers[method];
      });
      config.headers = new _AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_7__["default"](config.headers, defaultHeaders);

      // filter out skipped interceptors
      var requestInterceptorChain = [];
      var synchronousRequestInterceptors = true;
      this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
        if (typeof interceptor.runWhen === 'function' && interceptor.runWhen(config) === false) {
          return;
        }
        synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
        requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
      });
      var responseInterceptorChain = [];
      this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
        responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
      });
      var promise;
      var i = 0;
      var len;
      if (!synchronousRequestInterceptors) {
        var chain = [_dispatchRequest_js__WEBPACK_IMPORTED_MODULE_3__["default"].bind(this), undefined];
        chain.unshift.apply(chain, requestInterceptorChain);
        chain.push.apply(chain, responseInterceptorChain);
        len = chain.length;
        promise = Promise.resolve(config);
        while (i < len) {
          promise = promise.then(chain[i++], chain[i++]);
        }
        return promise;
      }
      len = requestInterceptorChain.length;
      var newConfig = config;
      i = 0;
      while (i < len) {
        var onFulfilled = requestInterceptorChain[i++];
        var onRejected = requestInterceptorChain[i++];
        try {
          newConfig = onFulfilled(newConfig);
        } catch (error) {
          onRejected.call(this, error);
          break;
        }
      }
      try {
        promise = _dispatchRequest_js__WEBPACK_IMPORTED_MODULE_3__["default"].call(this, newConfig);
      } catch (error) {
        return Promise.reject(error);
      }
      i = 0;
      len = responseInterceptorChain.length;
      while (i < len) {
        promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
      }
      return promise;
    }
  }, {
    key: "getUri",
    value: function getUri(config) {
      config = (0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__["default"])(this.defaults, config);
      var fullPath = (0,_buildFullPath_js__WEBPACK_IMPORTED_MODULE_5__["default"])(config.baseURL, config.url);
      return (0,_helpers_buildURL_js__WEBPACK_IMPORTED_MODULE_1__["default"])(fullPath, config.params, config.paramsSerializer);
    }
  }]);
  return Axios;
}(); // Provide aliases for supported request methods
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(['delete', 'get', 'head', 'options'], function forEachMethodNoData(method) {
  /*eslint func-names:0*/
  Axios.prototype[method] = function (url, config) {
    return this.request((0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__["default"])(config || {}, {
      method: method,
      url: url,
      data: (config || {}).data
    }));
  };
});
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  /*eslint func-names:0*/

  function generateHTTPMethod(isForm) {
    return function httpMethod(url, data, config) {
      return this.request((0,_mergeConfig_js__WEBPACK_IMPORTED_MODULE_4__["default"])(config || {}, {
        method: method,
        headers: isForm ? {
          'Content-Type': 'multipart/form-data'
        } : {},
        url: url,
        data: data
      }));
    };
  }
  Axios.prototype[method] = generateHTTPMethod();
  Axios.prototype[method + 'Form'] = generateHTTPMethod(true);
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Axios);

/***/ }),

/***/ "./node_modules/axios/lib/core/AxiosError.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosError.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * Create an Error with the specified message, config, error code, request and response.
 *
 * @param {string} message The error message.
 * @param {string} [code] The error code (for example, 'ECONNABORTED').
 * @param {Object} [config] The config.
 * @param {Object} [request] The request.
 * @param {Object} [response] The response.
 *
 * @returns {Error} The created error.
 */
function AxiosError(message, code, config, request, response) {
  Error.call(this);
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, this.constructor);
  } else {
    this.stack = new Error().stack;
  }
  this.message = message;
  this.name = 'AxiosError';
  code && (this.code = code);
  config && (this.config = config);
  request && (this.request = request);
  response && (this.response = response);
}
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].inherits(AxiosError, Error, {
  toJSON: function toJSON() {
    return {
      // Standard
      message: this.message,
      name: this.name,
      // Microsoft
      description: this.description,
      number: this.number,
      // Mozilla
      fileName: this.fileName,
      lineNumber: this.lineNumber,
      columnNumber: this.columnNumber,
      stack: this.stack,
      // Axios
      config: this.config,
      code: this.code,
      status: this.response && this.response.status ? this.response.status : null
    };
  }
});
var prototype = AxiosError.prototype;
var descriptors = {};
['ERR_BAD_OPTION_VALUE', 'ERR_BAD_OPTION', 'ECONNABORTED', 'ETIMEDOUT', 'ERR_NETWORK', 'ERR_FR_TOO_MANY_REDIRECTS', 'ERR_DEPRECATED', 'ERR_BAD_RESPONSE', 'ERR_BAD_REQUEST', 'ERR_CANCELED', 'ERR_NOT_SUPPORT', 'ERR_INVALID_URL'
// eslint-disable-next-line func-names
].forEach(function (code) {
  descriptors[code] = {
    value: code
  };
});
Object.defineProperties(AxiosError, descriptors);
Object.defineProperty(prototype, 'isAxiosError', {
  value: true
});

// eslint-disable-next-line func-names
AxiosError.from = function (error, code, config, request, response, customProps) {
  var axiosError = Object.create(prototype);
  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(error, axiosError, function filter(obj) {
    return obj !== Error.prototype;
  }, function (prop) {
    return prop !== 'isAxiosError';
  });
  AxiosError.call(axiosError, error.message, code, config, request, response);
  axiosError.cause = error;
  axiosError.name = error.name;
  customProps && Object.assign(axiosError, customProps);
  return axiosError;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosError);

/***/ }),

/***/ "./node_modules/axios/lib/core/AxiosHeaders.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/core/AxiosHeaders.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/parseHeaders.js */ "./node_modules/axios/lib/helpers/parseHeaders.js");




var $internals = Symbol('internals');
var $defaults = Symbol('defaults');
function normalizeHeader(header) {
  return header && String(header).trim().toLowerCase();
}
function normalizeValue(value) {
  if (value === false || value == null) {
    return value;
  }
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.map(normalizeValue) : String(value);
}
function parseTokens(str) {
  var tokens = Object.create(null);
  var tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
  var match;
  while (match = tokensRE.exec(str)) {
    tokens[match[1]] = match[2];
  }
  return tokens;
}
function matchHeaderValue(context, value, header, filter) {
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(filter)) {
    return filter.call(this, value, header);
  }
  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(value)) return;
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(filter)) {
    return value.indexOf(filter) !== -1;
  }
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(filter)) {
    return filter.test(value);
  }
}
function formatHeader(header) {
  return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, function (w, _char, str) {
    return _char.toUpperCase() + str;
  });
}
function buildAccessors(obj, header) {
  var accessorName = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toCamelCase(' ' + header);
  ['get', 'set', 'has'].forEach(function (methodName) {
    Object.defineProperty(obj, methodName + accessorName, {
      value: function value(arg1, arg2, arg3) {
        return this[methodName].call(this, header, arg1, arg2, arg3);
      },
      configurable: true
    });
  });
}
function findKey(obj, key) {
  key = key.toLowerCase();
  var keys = Object.keys(obj);
  var i = keys.length;
  var _key;
  while (i-- > 0) {
    _key = keys[i];
    if (key === _key.toLowerCase()) {
      return _key;
    }
  }
  return null;
}
function AxiosHeaders(headers, defaults) {
  headers && this.set(headers);
  this[$defaults] = defaults || null;
}
Object.assign(AxiosHeaders.prototype, {
  set: function set(header, valueOrRewrite, rewrite) {
    var self = this;
    function setHeader(_value, _header, _rewrite) {
      var lHeader = normalizeHeader(_header);
      if (!lHeader) {
        throw new Error('header name must be a non-empty string');
      }
      var key = findKey(self, lHeader);
      if (key && _rewrite !== true && (self[key] === false || _rewrite === false)) {
        return;
      }
      self[key || _header] = normalizeValue(_value);
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(header)) {
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(header, function (_value, _header) {
        setHeader(_value, _header, valueOrRewrite);
      });
    } else {
      setHeader(valueOrRewrite, header, rewrite);
    }
    return this;
  },
  get: function get(header, parser) {
    header = normalizeHeader(header);
    if (!header) return undefined;
    var key = findKey(this, header);
    if (key) {
      var value = this[key];
      if (!parser) {
        return value;
      }
      if (parser === true) {
        return parseTokens(value);
      }
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(parser)) {
        return parser.call(this, value, key);
      }
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isRegExp(parser)) {
        return parser.exec(value);
      }
      throw new TypeError('parser must be boolean|regexp|function');
    }
  },
  has: function has(header, matcher) {
    header = normalizeHeader(header);
    if (header) {
      var key = findKey(this, header);
      return !!(key && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
    }
    return false;
  },
  "delete": function _delete(header, matcher) {
    var self = this;
    var deleted = false;
    function deleteHeader(_header) {
      _header = normalizeHeader(_header);
      if (_header) {
        var key = findKey(self, _header);
        if (key && (!matcher || matchHeaderValue(self, self[key], key, matcher))) {
          delete self[key];
          deleted = true;
        }
      }
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header)) {
      header.forEach(deleteHeader);
    } else {
      deleteHeader(header);
    }
    return deleted;
  },
  clear: function clear() {
    return Object.keys(this).forEach(this["delete"].bind(this));
  },
  normalize: function normalize(format) {
    var self = this;
    var headers = {};
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this, function (value, header) {
      var key = findKey(headers, header);
      if (key) {
        self[key] = normalizeValue(value);
        delete self[header];
        return;
      }
      var normalized = format ? formatHeader(header) : String(header).trim();
      if (normalized !== header) {
        delete self[header];
      }
      self[normalized] = normalizeValue(value);
      headers[normalized] = true;
    });
    return this;
  },
  toJSON: function toJSON(asStrings) {
    var obj = Object.create(null);
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(Object.assign({}, this[$defaults] || null, this), function (value, header) {
      if (value == null || value === false) return;
      obj[header] = asStrings && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) ? value.join(', ') : value;
    });
    return obj;
  }
});
Object.assign(AxiosHeaders, {
  from: function from(thing) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(thing)) {
      return new this((0,_helpers_parseHeaders_js__WEBPACK_IMPORTED_MODULE_1__["default"])(thing));
    }
    return thing instanceof this ? thing : new this(thing);
  },
  accessor: function accessor(header) {
    var internals = this[$internals] = this[$internals] = {
      accessors: {}
    };
    var accessors = internals.accessors;
    var prototype = this.prototype;
    function defineAccessor(_header) {
      var lHeader = normalizeHeader(_header);
      if (!accessors[lHeader]) {
        buildAccessors(prototype, _header);
        accessors[lHeader] = true;
      }
    }
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
    return this;
  }
});
AxiosHeaders.accessor(['Content-Type', 'Content-Length', 'Accept', 'Accept-Encoding', 'User-Agent']);
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].freezeMethods(AxiosHeaders.prototype);
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].freezeMethods(AxiosHeaders);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosHeaders);

/***/ }),

/***/ "./node_modules/axios/lib/core/InterceptorManager.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/core/InterceptorManager.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");


function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var InterceptorManager = /*#__PURE__*/function () {
  function InterceptorManager() {
    _classCallCheck(this, InterceptorManager);
    this.handlers = [];
  }

  /**
   * Add a new interceptor to the stack
   *
   * @param {Function} fulfilled The function to handle `then` for a `Promise`
   * @param {Function} rejected The function to handle `reject` for a `Promise`
   *
   * @return {Number} An ID used to remove interceptor later
   */
  _createClass(InterceptorManager, [{
    key: "use",
    value: function use(fulfilled, rejected, options) {
      this.handlers.push({
        fulfilled: fulfilled,
        rejected: rejected,
        synchronous: options ? options.synchronous : false,
        runWhen: options ? options.runWhen : null
      });
      return this.handlers.length - 1;
    }

    /**
     * Remove an interceptor from the stack
     *
     * @param {Number} id The ID that was returned by `use`
     *
     * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
     */
  }, {
    key: "eject",
    value: function eject(id) {
      if (this.handlers[id]) {
        this.handlers[id] = null;
      }
    }

    /**
     * Clear all interceptors from the stack
     *
     * @returns {void}
     */
  }, {
    key: "clear",
    value: function clear() {
      if (this.handlers) {
        this.handlers = [];
      }
    }

    /**
     * Iterate over all the registered interceptors
     *
     * This method is particularly useful for skipping over any
     * interceptors that may have become `null` calling `eject`.
     *
     * @param {Function} fn The function to call for each interceptor
     *
     * @returns {void}
     */
  }, {
    key: "forEach",
    value: function forEach(fn) {
      _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(this.handlers, function forEachHandler(h) {
        if (h !== null) {
          fn(h);
        }
      });
    }
  }]);
  return InterceptorManager;
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (InterceptorManager);

/***/ }),

/***/ "./node_modules/axios/lib/core/buildFullPath.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/buildFullPath.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildFullPath)
/* harmony export */ });
/* harmony import */ var _helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/isAbsoluteURL.js */ "./node_modules/axios/lib/helpers/isAbsoluteURL.js");
/* harmony import */ var _helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/combineURLs.js */ "./node_modules/axios/lib/helpers/combineURLs.js");





/**
 * Creates a new URL by combining the baseURL with the requestedURL,
 * only when the requestedURL is not already an absolute URL.
 * If the requestURL is absolute, this function returns the requestedURL untouched.
 *
 * @param {string} baseURL The base URL
 * @param {string} requestedURL Absolute or relative URL to combine
 *
 * @returns {string} The combined full path
 */
function buildFullPath(baseURL, requestedURL) {
  if (baseURL && !(0,_helpers_isAbsoluteURL_js__WEBPACK_IMPORTED_MODULE_0__["default"])(requestedURL)) {
    return (0,_helpers_combineURLs_js__WEBPACK_IMPORTED_MODULE_1__["default"])(baseURL, requestedURL);
  }
  return requestedURL;
}

/***/ }),

/***/ "./node_modules/axios/lib/core/dispatchRequest.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/core/dispatchRequest.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ dispatchRequest)
/* harmony export */ });
/* harmony import */ var _transformData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./transformData.js */ "./node_modules/axios/lib/core/transformData.js");
/* harmony import */ var _cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../cancel/isCancel.js */ "./node_modules/axios/lib/cancel/isCancel.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../cancel/CanceledError.js */ "./node_modules/axios/lib/cancel/CanceledError.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");








/**
 * Throws a `CanceledError` if cancellation has been requested.
 *
 * @param {Object} config The config that is to be used for the request
 *
 * @returns {void}
 */
function throwIfCancellationRequested(config) {
  if (config.cancelToken) {
    config.cancelToken.throwIfRequested();
  }
  if (config.signal && config.signal.aborted) {
    throw new _cancel_CanceledError_js__WEBPACK_IMPORTED_MODULE_3__["default"]();
  }
}

/**
 * Dispatch a request to the server using the configured adapter.
 *
 * @param {object} config The config that is to be used for the request
 *
 * @returns {Promise} The Promise to be fulfilled
 */
function dispatchRequest(config) {
  throwIfCancellationRequested(config);
  config.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__["default"].from(config.headers);

  // Transform request data
  config.data = _transformData_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(config, config.transformRequest);
  var adapter = config.adapter || _defaults_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].adapter;
  return adapter(config).then(function onAdapterResolution(response) {
    throwIfCancellationRequested(config);

    // Transform response data
    response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(config, config.transformResponse, response);
    response.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__["default"].from(response.headers);
    return response;
  }, function onAdapterRejection(reason) {
    if (!(0,_cancel_isCancel_js__WEBPACK_IMPORTED_MODULE_1__["default"])(reason)) {
      throwIfCancellationRequested(config);

      // Transform response data
      if (reason && reason.response) {
        reason.response.data = _transformData_js__WEBPACK_IMPORTED_MODULE_0__["default"].call(config, config.transformResponse, reason.response);
        reason.response.headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_4__["default"].from(reason.response.headers);
      }
    }
    return Promise.reject(reason);
  });
}

/***/ }),

/***/ "./node_modules/axios/lib/core/mergeConfig.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/core/mergeConfig.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ mergeConfig)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * Config-specific merge-function which creates a new config-object
 * by merging two configuration objects together.
 *
 * @param {Object} config1
 * @param {Object} config2
 *
 * @returns {Object} New object resulting from merging config2 to config1
 */
function mergeConfig(config1, config2) {
  // eslint-disable-next-line no-param-reassign
  config2 = config2 || {};
  var config = {};
  function getMergedValue(target, source) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(target) && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(source)) {
      return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].merge(target, source);
    } else if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(source)) {
      return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].merge({}, source);
    } else if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(source)) {
      return source.slice();
    }
    return source;
  }

  // eslint-disable-next-line consistent-return
  function mergeDeepProperties(prop) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(config2[prop])) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function valueFromConfig2(prop) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function defaultToConfig2(prop) {
    if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(config2[prop])) {
      return getMergedValue(undefined, config2[prop]);
    } else if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(config1[prop])) {
      return getMergedValue(undefined, config1[prop]);
    }
  }

  // eslint-disable-next-line consistent-return
  function mergeDirectKeys(prop) {
    if (prop in config2) {
      return getMergedValue(config1[prop], config2[prop]);
    } else if (prop in config1) {
      return getMergedValue(undefined, config1[prop]);
    }
  }
  var mergeMap = {
    'url': valueFromConfig2,
    'method': valueFromConfig2,
    'data': valueFromConfig2,
    'baseURL': defaultToConfig2,
    'transformRequest': defaultToConfig2,
    'transformResponse': defaultToConfig2,
    'paramsSerializer': defaultToConfig2,
    'timeout': defaultToConfig2,
    'timeoutMessage': defaultToConfig2,
    'withCredentials': defaultToConfig2,
    'adapter': defaultToConfig2,
    'responseType': defaultToConfig2,
    'xsrfCookieName': defaultToConfig2,
    'xsrfHeaderName': defaultToConfig2,
    'onUploadProgress': defaultToConfig2,
    'onDownloadProgress': defaultToConfig2,
    'decompress': defaultToConfig2,
    'maxContentLength': defaultToConfig2,
    'maxBodyLength': defaultToConfig2,
    'beforeRedirect': defaultToConfig2,
    'transport': defaultToConfig2,
    'httpAgent': defaultToConfig2,
    'httpsAgent': defaultToConfig2,
    'cancelToken': defaultToConfig2,
    'socketPath': defaultToConfig2,
    'responseEncoding': defaultToConfig2,
    'validateStatus': mergeDirectKeys
  };
  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(Object.keys(config1).concat(Object.keys(config2)), function computeConfigValue(prop) {
    var merge = mergeMap[prop] || mergeDeepProperties;
    var configValue = merge(prop);
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(configValue) && merge !== mergeDirectKeys || (config[prop] = configValue);
  });
  return config;
}

/***/ }),

/***/ "./node_modules/axios/lib/core/settle.js":
/*!***********************************************!*\
  !*** ./node_modules/axios/lib/core/settle.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ settle)
/* harmony export */ });
/* harmony import */ var _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");




/**
 * Resolve or reject a Promise based on response status.
 *
 * @param {Function} resolve A function that resolves the promise.
 * @param {Function} reject A function that rejects the promise.
 * @param {object} response The response.
 *
 * @returns {object} The response.
 */
function settle(resolve, reject, response) {
  var validateStatus = response.config.validateStatus;
  if (!response.status || !validateStatus || validateStatus(response.status)) {
    resolve(response);
  } else {
    reject(new _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"]('Request failed with status code ' + response.status, [_AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_BAD_REQUEST, _AxiosError_js__WEBPACK_IMPORTED_MODULE_0__["default"].ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4], response.config, response.request, response));
  }
}

/***/ }),

/***/ "./node_modules/axios/lib/core/transformData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/core/transformData.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ transformData)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _defaults_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../defaults/index.js */ "./node_modules/axios/lib/defaults/index.js");
/* harmony import */ var _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/AxiosHeaders.js */ "./node_modules/axios/lib/core/AxiosHeaders.js");






/**
 * Transform the data for a request or a response
 *
 * @param {Array|Function} fns A single function or Array of functions
 * @param {?Object} response The response object
 *
 * @returns {*} The resulting transformed data
 */
function transformData(fns, response) {
  var config = this || _defaults_index_js__WEBPACK_IMPORTED_MODULE_1__["default"];
  var context = response || config;
  var headers = _core_AxiosHeaders_js__WEBPACK_IMPORTED_MODULE_2__["default"].from(context.headers);
  var data = context.data;
  _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(fns, function transform(fn) {
    data = fn.call(config, data, headers.normalize(), response ? response.status : undefined);
  });
  headers.normalize();
  return data;
}

/***/ }),

/***/ "./node_modules/axios/lib/defaults/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/defaults/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _transitional_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./transitional.js */ "./node_modules/axios/lib/defaults/transitional.js");
/* harmony import */ var _helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../helpers/toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../helpers/toURLEncodedForm.js */ "./node_modules/axios/lib/helpers/toURLEncodedForm.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");
/* harmony import */ var _helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../helpers/formDataToJSON.js */ "./node_modules/axios/lib/helpers/formDataToJSON.js");
/* harmony import */ var _adapters_index_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../adapters/index.js */ "./node_modules/axios/lib/adapters/index.js");










var DEFAULT_CONTENT_TYPE = {
  'Content-Type': 'application/x-www-form-urlencoded'
};

/**
 * If the browser has an XMLHttpRequest object, use the XHR adapter, otherwise use the HTTP
 * adapter
 *
 * @returns {Function}
 */
function getDefaultAdapter() {
  var adapter;
  if (typeof XMLHttpRequest !== 'undefined') {
    // For browsers use XHR adapter
    adapter = _adapters_index_js__WEBPACK_IMPORTED_MODULE_7__["default"].getAdapter('xhr');
  } else if (typeof process !== 'undefined' && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].kindOf(process) === 'process') {
    // For node use HTTP adapter
    adapter = _adapters_index_js__WEBPACK_IMPORTED_MODULE_7__["default"].getAdapter('http');
  }
  return adapter;
}

/**
 * It takes a string, tries to parse it, and if it fails, it returns the stringified version
 * of the input
 *
 * @param {any} rawValue - The value to be stringified.
 * @param {Function} parser - A function that parses a string into a JavaScript object.
 * @param {Function} encoder - A function that takes a value and returns a string.
 *
 * @returns {string} A stringified version of the rawValue.
 */
function stringifySafely(rawValue, parser, encoder) {
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(rawValue)) {
    try {
      (parser || JSON.parse)(rawValue);
      return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].trim(rawValue);
    } catch (e) {
      if (e.name !== 'SyntaxError') {
        throw e;
      }
    }
  }
  return (encoder || JSON.stringify)(rawValue);
}
var defaults = {
  transitional: _transitional_js__WEBPACK_IMPORTED_MODULE_2__["default"],
  adapter: getDefaultAdapter(),
  transformRequest: [function transformRequest(data, headers) {
    var contentType = headers.getContentType() || '';
    var hasJSONContentType = contentType.indexOf('application/json') > -1;
    var isObjectPayload = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(data);
    if (isObjectPayload && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isHTMLForm(data)) {
      data = new FormData(data);
    }
    var isFormData = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(data);
    if (isFormData) {
      if (!hasJSONContentType) {
        return data;
      }
      return hasJSONContentType ? JSON.stringify((0,_helpers_formDataToJSON_js__WEBPACK_IMPORTED_MODULE_6__["default"])(data)) : data;
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(data) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBuffer(data) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isStream(data) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFile(data) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(data)) {
      return data;
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBufferView(data)) {
      return data.buffer;
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isURLSearchParams(data)) {
      headers.setContentType('application/x-www-form-urlencoded;charset=utf-8', false);
      return data.toString();
    }
    var isFileList;
    if (isObjectPayload) {
      if (contentType.indexOf('application/x-www-form-urlencoded') > -1) {
        return (0,_helpers_toURLEncodedForm_js__WEBPACK_IMPORTED_MODULE_4__["default"])(data, this.formSerializer).toString();
      }
      if ((isFileList = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(data)) || contentType.indexOf('multipart/form-data') > -1) {
        var _FormData = this.env && this.env.FormData;
        return (0,_helpers_toFormData_js__WEBPACK_IMPORTED_MODULE_3__["default"])(isFileList ? {
          'files[]': data
        } : data, _FormData && new _FormData(), this.formSerializer);
      }
    }
    if (isObjectPayload || hasJSONContentType) {
      headers.setContentType('application/json', false);
      return stringifySafely(data);
    }
    return data;
  }],
  transformResponse: [function transformResponse(data) {
    var transitional = this.transitional || defaults.transitional;
    var forcedJSONParsing = transitional && transitional.forcedJSONParsing;
    var JSONRequested = this.responseType === 'json';
    if (data && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
      var silentJSONParsing = transitional && transitional.silentJSONParsing;
      var strictJSONParsing = !silentJSONParsing && JSONRequested;
      try {
        return JSON.parse(data);
      } catch (e) {
        if (strictJSONParsing) {
          if (e.name === 'SyntaxError') {
            throw _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].from(e, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_RESPONSE, this, null, this.response);
          }
          throw e;
        }
      }
    }
    return data;
  }],
  /**
   * A timeout in milliseconds to abort a request. If set to 0 (default) a
   * timeout is not created.
   */
  timeout: 0,
  xsrfCookieName: 'XSRF-TOKEN',
  xsrfHeaderName: 'X-XSRF-TOKEN',
  maxContentLength: -1,
  maxBodyLength: -1,
  env: {
    FormData: _platform_index_js__WEBPACK_IMPORTED_MODULE_5__["default"].classes.FormData,
    Blob: _platform_index_js__WEBPACK_IMPORTED_MODULE_5__["default"].classes.Blob
  },
  validateStatus: function validateStatus(status) {
    return status >= 200 && status < 300;
  },
  headers: {
    common: {
      'Accept': 'application/json, text/plain, */*'
    }
  }
};
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(['delete', 'get', 'head'], function forEachMethodNoData(method) {
  defaults.headers[method] = {};
});
_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(['post', 'put', 'patch'], function forEachMethodWithData(method) {
  defaults.headers[method] = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].merge(DEFAULT_CONTENT_TYPE);
});
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (defaults);

/***/ }),

/***/ "./node_modules/axios/lib/defaults/transitional.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/defaults/transitional.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  silentJSONParsing: true,
  forcedJSONParsing: true,
  clarifyTimeoutError: false
});

/***/ }),

/***/ "./node_modules/axios/lib/env/classes/FormData.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/env/classes/FormData.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var form_data__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! form-data */ "./node_modules/form-data/lib/browser.js");

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (form_data__WEBPACK_IMPORTED_MODULE_0__);

/***/ }),

/***/ "./node_modules/axios/lib/env/data.js":
/*!********************************************!*\
  !*** ./node_modules/axios/lib/env/data.js ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "VERSION": () => (/* binding */ VERSION)
/* harmony export */ });
var VERSION = "1.1.3";

/***/ }),

/***/ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js":
/*!****************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/AxiosURLSearchParams.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");




/**
 * It encodes a string by replacing all characters that are not in the unreserved set with
 * their percent-encoded equivalents
 *
 * @param {string} str - The string to encode.
 *
 * @returns {string} The encoded string.
 */
function encode(str) {
  var charMap = {
    '!': '%21',
    "'": '%27',
    '(': '%28',
    ')': '%29',
    '~': '%7E',
    '%20': '+',
    '%00': '\x00'
  };
  return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
    return charMap[match];
  });
}

/**
 * It takes a params object and converts it to a FormData object
 *
 * @param {Object<string, any>} params - The parameters to be converted to a FormData object.
 * @param {Object<string, any>} options - The options object passed to the Axios constructor.
 *
 * @returns {void}
 */
function AxiosURLSearchParams(params, options) {
  this._pairs = [];
  params && (0,_toFormData_js__WEBPACK_IMPORTED_MODULE_0__["default"])(params, this, options);
}
var prototype = AxiosURLSearchParams.prototype;
prototype.append = function append(name, value) {
  this._pairs.push([name, value]);
};
prototype.toString = function toString(encoder) {
  var _encode = encoder ? function (value) {
    return encoder.call(this, value, encode);
  } : encode;
  return this._pairs.map(function each(pair) {
    return _encode(pair[0]) + '=' + _encode(pair[1]);
  }, '').join('&');
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AxiosURLSearchParams);

/***/ }),

/***/ "./node_modules/axios/lib/helpers/bind.js":
/*!************************************************!*\
  !*** ./node_modules/axios/lib/helpers/bind.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ bind)
/* harmony export */ });


function bind(fn, thisArg) {
  return function wrap() {
    return fn.apply(thisArg, arguments);
  };
}

/***/ }),

/***/ "./node_modules/axios/lib/helpers/buildURL.js":
/*!****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/buildURL.js ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ buildURL)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");





/**
 * It replaces all instances of the characters `:`, `$`, `,`, `+`, `[`, and `]` with their
 * URI encoded counterparts
 *
 * @param {string} val The value to be encoded.
 *
 * @returns {string} The encoded value.
 */
function encode(val) {
  return encodeURIComponent(val).replace(/%3A/gi, ':').replace(/%24/g, '$').replace(/%2C/gi, ',').replace(/%20/g, '+').replace(/%5B/gi, '[').replace(/%5D/gi, ']');
}

/**
 * Build a URL by appending params to the end
 *
 * @param {string} url The base of the url (e.g., http://www.google.com)
 * @param {object} [params] The params to be appended
 * @param {?object} options
 *
 * @returns {string} The formatted url
 */
function buildURL(url, params, options) {
  /*eslint no-param-reassign:0*/
  if (!params) {
    return url;
  }
  var _encode = options && options.encode || encode;
  var serializeFn = options && options.serialize;
  var serializedParams;
  if (serializeFn) {
    serializedParams = serializeFn(params, options);
  } else {
    serializedParams = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isURLSearchParams(params) ? params.toString() : new _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_1__["default"](params, options).toString(_encode);
  }
  if (serializedParams) {
    var hashmarkIndex = url.indexOf("#");
    if (hashmarkIndex !== -1) {
      url = url.slice(0, hashmarkIndex);
    }
    url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
  }
  return url;
}

/***/ }),

/***/ "./node_modules/axios/lib/helpers/combineURLs.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/combineURLs.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ combineURLs)
/* harmony export */ });


/**
 * Creates a new URL by combining the specified URLs
 *
 * @param {string} baseURL The base URL
 * @param {string} relativeURL The relative URL
 *
 * @returns {string} The combined URL
 */
function combineURLs(baseURL, relativeURL) {
  return relativeURL ? baseURL.replace(/\/+$/, '') + '/' + relativeURL.replace(/^\/+/, '') : baseURL;
}

/***/ }),

/***/ "./node_modules/axios/lib/helpers/cookies.js":
/*!***************************************************!*\
  !*** ./node_modules/axios/lib/helpers/cookies.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].isStandardBrowserEnv ?
// Standard browser envs support document.cookie
function standardBrowserEnv() {
  return {
    write: function write(name, value, expires, path, domain, secure) {
      var cookie = [];
      cookie.push(name + '=' + encodeURIComponent(value));
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isNumber(expires)) {
        cookie.push('expires=' + new Date(expires).toGMTString());
      }
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(path)) {
        cookie.push('path=' + path);
      }
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(domain)) {
        cookie.push('domain=' + domain);
      }
      if (secure === true) {
        cookie.push('secure');
      }
      document.cookie = cookie.join('; ');
    },
    read: function read(name) {
      var match = document.cookie.match(new RegExp('(^|;\\s*)(' + name + ')=([^;]*)'));
      return match ? decodeURIComponent(match[3]) : null;
    },
    remove: function remove(name) {
      this.write(name, '', Date.now() - 86400000);
    }
  };
}() :
// Non standard browser env (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return {
    write: function write() {},
    read: function read() {
      return null;
    },
    remove: function remove() {}
  };
}());

/***/ }),

/***/ "./node_modules/axios/lib/helpers/formDataToJSON.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/formDataToJSON.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * It takes a string like `foo[x][y][z]` and returns an array like `['foo', 'x', 'y', 'z']
 *
 * @param {string} name - The name of the property to get.
 *
 * @returns An array of strings.
 */
function parsePropPath(name) {
  // foo[x][y][z]
  // foo.x.y.z
  // foo-x-y-z
  // foo x y z
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].matchAll(/\w+|\[(\w*)]/g, name).map(function (match) {
    return match[0] === '[]' ? '' : match[1] || match[0];
  });
}

/**
 * Convert an array to an object.
 *
 * @param {Array<any>} arr - The array to convert to an object.
 *
 * @returns An object with the same keys and values as the array.
 */
function arrayToObject(arr) {
  var obj = {};
  var keys = Object.keys(arr);
  var i;
  var len = keys.length;
  var key;
  for (i = 0; i < len; i++) {
    key = keys[i];
    obj[key] = arr[key];
  }
  return obj;
}

/**
 * It takes a FormData object and returns a JavaScript object
 *
 * @param {string} formData The FormData object to convert to JSON.
 *
 * @returns {Object<string, any> | null} The converted object.
 */
function formDataToJSON(formData) {
  function buildPath(path, value, target, index) {
    var name = path[index++];
    var isNumericKey = Number.isFinite(+name);
    var isLast = index >= path.length;
    name = !name && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target) ? target.length : name;
    if (isLast) {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].hasOwnProp(target, name)) {
        target[name] = [target[name], value];
      } else {
        target[name] = value;
      }
      return !isNumericKey;
    }
    if (!target[name] || !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(target[name])) {
      target[name] = [];
    }
    var result = buildPath(path, value, target[name], index);
    if (result && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(target[name])) {
      target[name] = arrayToObject(target[name]);
    }
    return !isNumericKey;
  }
  if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFormData(formData) && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(formData.entries)) {
    var obj = {};
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEachEntry(formData, function (name, value) {
      buildPath(parsePropPath(name), value, obj, 0);
    });
    return obj;
  }
  return null;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (formDataToJSON);

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAbsoluteURL.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAbsoluteURL.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isAbsoluteURL)
/* harmony export */ });


/**
 * Determines whether the specified URL is absolute
 *
 * @param {string} url The URL to test
 *
 * @returns {boolean} True if the specified URL is absolute, otherwise false
 */
function isAbsoluteURL(url) {
  // A URL is considered absolute if it begins with "<scheme>://" or "//" (protocol-relative URL).
  // RFC 3986 defines scheme name as a sequence of characters beginning with a letter and followed
  // by any combination of letters, digits, plus, period, or hyphen.
  return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
}

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isAxiosError.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isAxiosError.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ isAxiosError)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




/**
 * Determines whether the payload is an error thrown by Axios
 *
 * @param {*} payload The value to test
 *
 * @returns {boolean} True if the payload is an error thrown by Axios, otherwise false
 */
function isAxiosError(payload) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(payload) && payload.isAxiosError === true;
}

/***/ }),

/***/ "./node_modules/axios/lib/helpers/isURLSameOrigin.js":
/*!***********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/isURLSameOrigin.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");




/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_platform_index_js__WEBPACK_IMPORTED_MODULE_1__["default"].isStandardBrowserEnv ?
// Standard browser envs have full support of the APIs needed to test
// whether the request URL is of the same origin as current location.
function standardBrowserEnv() {
  var msie = /(msie|trident)/i.test(navigator.userAgent);
  var urlParsingNode = document.createElement('a');
  var originURL;

  /**
  * Parse a URL to discover it's components
  *
  * @param {String} url The URL to be parsed
  * @returns {Object}
  */
  function resolveURL(url) {
    var href = url;
    if (msie) {
      // IE needs attribute set twice to normalize properties
      urlParsingNode.setAttribute('href', href);
      href = urlParsingNode.href;
    }
    urlParsingNode.setAttribute('href', href);

    // urlParsingNode provides the UrlUtils interface - http://url.spec.whatwg.org/#urlutils
    return {
      href: urlParsingNode.href,
      protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, '') : '',
      host: urlParsingNode.host,
      search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, '') : '',
      hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, '') : '',
      hostname: urlParsingNode.hostname,
      port: urlParsingNode.port,
      pathname: urlParsingNode.pathname.charAt(0) === '/' ? urlParsingNode.pathname : '/' + urlParsingNode.pathname
    };
  }
  originURL = resolveURL(window.location.href);

  /**
  * Determine if a URL shares the same origin as the current location
  *
  * @param {String} requestURL The URL to test
  * @returns {boolean} True if URL shares the same origin, otherwise false
  */
  return function isURLSameOrigin(requestURL) {
    var parsed = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(requestURL) ? resolveURL(requestURL) : requestURL;
    return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
  };
}() :
// Non standard browser envs (web workers, react-native) lack needed support.
function nonStandardBrowserEnv() {
  return function isURLSameOrigin() {
    return true;
  };
}());

/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseHeaders.js":
/*!********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseHeaders.js ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./../utils.js */ "./node_modules/axios/lib/utils.js");




// RawAxiosHeaders whose duplicates are ignored by node
// c.f. https://nodejs.org/api/http.html#http_message_headers
var ignoreDuplicateOf = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toObjectSet(['age', 'authorization', 'content-length', 'content-type', 'etag', 'expires', 'from', 'host', 'if-modified-since', 'if-unmodified-since', 'last-modified', 'location', 'max-forwards', 'proxy-authorization', 'referer', 'retry-after', 'user-agent']);

/**
 * Parse headers into an object
 *
 * ```
 * Date: Wed, 27 Aug 2014 08:58:49 GMT
 * Content-Type: application/json
 * Connection: keep-alive
 * Transfer-Encoding: chunked
 * ```
 *
 * @param {String} rawHeaders Headers needing to be parsed
 *
 * @returns {Object} Headers parsed into an object
 */
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function (rawHeaders) {
  var parsed = {};
  var key;
  var val;
  var i;
  rawHeaders && rawHeaders.split('\n').forEach(function parser(line) {
    i = line.indexOf(':');
    key = line.substring(0, i).trim().toLowerCase();
    val = line.substring(i + 1).trim();
    if (!key || parsed[key] && ignoreDuplicateOf[key]) {
      return;
    }
    if (key === 'set-cookie') {
      if (parsed[key]) {
        parsed[key].push(val);
      } else {
        parsed[key] = [val];
      }
    } else {
      parsed[key] = parsed[key] ? parsed[key] + ', ' + val : val;
    }
  });
  return parsed;
});

/***/ }),

/***/ "./node_modules/axios/lib/helpers/parseProtocol.js":
/*!*********************************************************!*\
  !*** ./node_modules/axios/lib/helpers/parseProtocol.js ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ parseProtocol)
/* harmony export */ });


function parseProtocol(url) {
  var match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
  return match && match[1] || '';
}

/***/ }),

/***/ "./node_modules/axios/lib/helpers/speedometer.js":
/*!*******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/speedometer.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/**
 * Calculate data maxRate
 * @param {Number} [samplesCount= 10]
 * @param {Number} [min= 1000]
 * @returns {Function}
 */
function speedometer(samplesCount, min) {
  samplesCount = samplesCount || 10;
  var bytes = new Array(samplesCount);
  var timestamps = new Array(samplesCount);
  var head = 0;
  var tail = 0;
  var firstSampleTS;
  min = min !== undefined ? min : 1000;
  return function push(chunkLength) {
    var now = Date.now();
    var startedAt = timestamps[tail];
    if (!firstSampleTS) {
      firstSampleTS = now;
    }
    bytes[head] = chunkLength;
    timestamps[head] = now;
    var i = tail;
    var bytesCount = 0;
    while (i !== head) {
      bytesCount += bytes[i++];
      i = i % samplesCount;
    }
    head = (head + 1) % samplesCount;
    if (head === tail) {
      tail = (tail + 1) % samplesCount;
    }
    if (now - firstSampleTS < min) {
      return;
    }
    var passed = startedAt && now - startedAt;
    return passed ? Math.round(bytesCount * 1000 / passed) : undefined;
  };
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (speedometer);

/***/ }),

/***/ "./node_modules/axios/lib/helpers/spread.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/helpers/spread.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ spread)
/* harmony export */ });


/**
 * Syntactic sugar for invoking a function and expanding an array for arguments.
 *
 * Common use case would be to use `Function.prototype.apply`.
 *
 *  ```js
 *  function f(x, y, z) {}
 *  var args = [1, 2, 3];
 *  f.apply(null, args);
 *  ```
 *
 * With `spread` this example can be re-written.
 *
 *  ```js
 *  spread(function(x, y, z) {})([1, 2, 3]);
 *  ```
 *
 * @param {Function} callback
 *
 * @returns {Function}
 */
function spread(callback) {
  return function wrap(arr) {
    return callback.apply(null, arr);
  };
}

/***/ }),

/***/ "./node_modules/axios/lib/helpers/toFormData.js":
/*!******************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toFormData.js ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");
/* harmony import */ var _env_classes_FormData_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../env/classes/FormData.js */ "./node_modules/axios/lib/env/classes/FormData.js");


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }




/**
 * Determines if the given thing is a array or js object.
 *
 * @param {string} thing - The object or array to be visited.
 *
 * @returns {boolean}
 */
function isVisitable(thing) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isPlainObject(thing) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(thing);
}

/**
 * It removes the brackets from the end of a string
 *
 * @param {string} key - The key of the parameter.
 *
 * @returns {string} the key without the brackets.
 */
function removeBrackets(key) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '[]') ? key.slice(0, -2) : key;
}

/**
 * It takes a path, a key, and a boolean, and returns a string
 *
 * @param {string} path - The path to the current key.
 * @param {string} key - The key of the current object being iterated over.
 * @param {string} dots - If true, the key will be rendered with dots instead of brackets.
 *
 * @returns {string} The path to the current key.
 */
function renderKey(path, key, dots) {
  if (!path) return key;
  return path.concat(key).map(function each(token, i) {
    // eslint-disable-next-line no-param-reassign
    token = removeBrackets(token);
    return !dots && i ? '[' + token + ']' : token;
  }).join(dots ? '.' : '');
}

/**
 * If the array is an array and none of its elements are visitable, then it's a flat array.
 *
 * @param {Array<any>} arr - The array to check
 *
 * @returns {boolean}
 */
function isFlatArray(arr) {
  return _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(arr) && !arr.some(isVisitable);
}
var predicates = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"], {}, null, function filter(prop) {
  return /^is[A-Z]/.test(prop);
});

/**
 * If the thing is a FormData object, return true, otherwise return false.
 *
 * @param {unknown} thing - The thing to check.
 *
 * @returns {boolean}
 */
function isSpecCompliant(thing) {
  return thing && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(thing.append) && thing[Symbol.toStringTag] === 'FormData' && thing[Symbol.iterator];
}

/**
 * Convert a data object to FormData
 *
 * @param {Object} obj
 * @param {?Object} [formData]
 * @param {?Object} [options]
 * @param {Function} [options.visitor]
 * @param {Boolean} [options.metaTokens = true]
 * @param {Boolean} [options.dots = false]
 * @param {?Boolean} [options.indexes = false]
 *
 * @returns {Object}
 **/

/**
 * It converts an object into a FormData object
 *
 * @param {Object<any, any>} obj - The object to convert to form data.
 * @param {string} formData - The FormData object to append to.
 * @param {Object<string, any>} options
 *
 * @returns
 */
function toFormData(obj, formData, options) {
  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)) {
    throw new TypeError('target must be an object');
  }

  // eslint-disable-next-line no-param-reassign
  formData = formData || new (_env_classes_FormData_js__WEBPACK_IMPORTED_MODULE_2__["default"] || FormData)();

  // eslint-disable-next-line no-param-reassign
  options = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toFlatObject(options, {
    metaTokens: true,
    dots: false,
    indexes: false
  }, false, function defined(option, source) {
    // eslint-disable-next-line no-eq-null,eqeqeq
    return !_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(source[option]);
  });
  var metaTokens = options.metaTokens;
  // eslint-disable-next-line no-use-before-define
  var visitor = options.visitor || defaultVisitor;
  var dots = options.dots;
  var indexes = options.indexes;
  var _Blob = options.Blob || typeof Blob !== 'undefined' && Blob;
  var useBlob = _Blob && isSpecCompliant(formData);
  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFunction(visitor)) {
    throw new TypeError('visitor must be a function');
  }
  function convertValue(value) {
    if (value === null) return '';
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isDate(value)) {
      return value.toISOString();
    }
    if (!useBlob && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBlob(value)) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('Blob is not supported. Use a Buffer instead.');
    }
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArrayBuffer(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isTypedArray(value)) {
      return useBlob && typeof Blob === 'function' ? new Blob([value]) : Buffer.from(value);
    }
    return value;
  }

  /**
   * Default visitor.
   *
   * @param {*} value
   * @param {String|Number} key
   * @param {Array<String|Number>} path
   * @this {FormData}
   *
   * @returns {boolean} return true to visit the each prop of the value recursively
   */
  function defaultVisitor(value, key, path) {
    var arr = value;
    if (value && !path && _typeof(value) === 'object') {
      if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '{}')) {
        // eslint-disable-next-line no-param-reassign
        key = metaTokens ? key : key.slice(0, -2);
        // eslint-disable-next-line no-param-reassign
        value = JSON.stringify(value);
      } else if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isArray(value) && isFlatArray(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isFileList(value) || _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].endsWith(key, '[]') && (arr = _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].toArray(value))) {
        // eslint-disable-next-line no-param-reassign
        key = removeBrackets(key);
        arr.forEach(function each(el, index) {
          !(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(el) || el === null) && formData.append(
          // eslint-disable-next-line no-nested-ternary
          indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + '[]', convertValue(el));
        });
        return false;
      }
    }
    if (isVisitable(value)) {
      return true;
    }
    formData.append(renderKey(path, key, dots), convertValue(value));
    return false;
  }
  var stack = [];
  var exposedHelpers = Object.assign(predicates, {
    defaultVisitor: defaultVisitor,
    convertValue: convertValue,
    isVisitable: isVisitable
  });
  function build(value, path) {
    if (_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(value)) return;
    if (stack.indexOf(value) !== -1) {
      throw Error('Circular reference detected in ' + path.join('.'));
    }
    stack.push(value);
    _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].forEach(value, function each(el, key) {
      var result = !(_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isUndefined(el) || el === null) && visitor.call(formData, el, _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isString(key) ? key.trim() : key, path, exposedHelpers);
      if (result === true) {
        build(el, path ? path.concat(key) : [key]);
      }
    });
    stack.pop();
  }
  if (!_utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isObject(obj)) {
    throw new TypeError('data must be an object');
  }
  build(obj);
  return formData;
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (toFormData);

/***/ }),

/***/ "./node_modules/axios/lib/helpers/toURLEncodedForm.js":
/*!************************************************************!*\
  !*** ./node_modules/axios/lib/helpers/toURLEncodedForm.js ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ toURLEncodedForm)
/* harmony export */ });
/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils.js */ "./node_modules/axios/lib/utils.js");
/* harmony import */ var _toFormData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./toFormData.js */ "./node_modules/axios/lib/helpers/toFormData.js");
/* harmony import */ var _platform_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../platform/index.js */ "./node_modules/axios/lib/platform/index.js");





function toURLEncodedForm(data, options) {
  return (0,_toFormData_js__WEBPACK_IMPORTED_MODULE_1__["default"])(data, new _platform_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].classes.URLSearchParams(), Object.assign({
    visitor: function visitor(value, key, path, helpers) {
      if (_platform_index_js__WEBPACK_IMPORTED_MODULE_2__["default"].isNode && _utils_js__WEBPACK_IMPORTED_MODULE_0__["default"].isBuffer(value)) {
        this.append(key, value.toString('base64'));
        return false;
      }
      return helpers.defaultVisitor.apply(this, arguments);
    }
  }, options));
}

/***/ }),

/***/ "./node_modules/axios/lib/helpers/validator.js":
/*!*****************************************************!*\
  !*** ./node_modules/axios/lib/helpers/validator.js ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _env_data_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../env/data.js */ "./node_modules/axios/lib/env/data.js");
/* harmony import */ var _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/AxiosError.js */ "./node_modules/axios/lib/core/AxiosError.js");


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }


var validators = {};

// eslint-disable-next-line func-names
['object', 'boolean', 'number', 'function', 'string', 'symbol'].forEach(function (type, i) {
  validators[type] = function validator(thing) {
    return _typeof(thing) === type || 'a' + (i < 1 ? 'n ' : ' ') + type;
  };
});
var deprecatedWarnings = {};

/**
 * Transitional option validator
 *
 * @param {function|boolean?} validator - set to false if the transitional option has been removed
 * @param {string?} version - deprecated version / removed since version
 * @param {string?} message - some message with additional info
 *
 * @returns {function}
 */
validators.transitional = function transitional(validator, version, message) {
  function formatMessage(opt, desc) {
    return '[Axios v' + _env_data_js__WEBPACK_IMPORTED_MODULE_0__.VERSION + '] Transitional option \'' + opt + '\'' + desc + (message ? '. ' + message : '');
  }

  // eslint-disable-next-line func-names
  return function (value, opt, opts) {
    if (validator === false) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"](formatMessage(opt, ' has been removed' + (version ? ' in ' + version : '')), _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_DEPRECATED);
    }
    if (version && !deprecatedWarnings[opt]) {
      deprecatedWarnings[opt] = true;
      // eslint-disable-next-line no-console
      console.warn(formatMessage(opt, ' has been deprecated since v' + version + ' and will be removed in the near future'));
    }
    return validator ? validator(value, opt, opts) : true;
  };
};

/**
 * Assert object's properties type
 *
 * @param {object} options
 * @param {object} schema
 * @param {boolean?} allowUnknown
 *
 * @returns {object}
 */

function assertOptions(options, schema, allowUnknown) {
  if (_typeof(options) !== 'object') {
    throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('options must be an object', _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION_VALUE);
  }
  var keys = Object.keys(options);
  var i = keys.length;
  while (i-- > 0) {
    var opt = keys[i];
    var validator = schema[opt];
    if (validator) {
      var value = options[opt];
      var result = value === undefined || validator(value, opt, options);
      if (result !== true) {
        throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('option ' + opt + ' must be ' + result, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION_VALUE);
      }
      continue;
    }
    if (allowUnknown !== true) {
      throw new _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"]('Unknown option ' + opt, _core_AxiosError_js__WEBPACK_IMPORTED_MODULE_1__["default"].ERR_BAD_OPTION);
    }
  }
}
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  assertOptions: assertOptions,
  validators: validators
});

/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/FormData.js":
/*!*********************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/FormData.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });


/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (FormData);

/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js":
/*!****************************************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../helpers/AxiosURLSearchParams.js */ "./node_modules/axios/lib/helpers/AxiosURLSearchParams.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (typeof URLSearchParams !== 'undefined' ? URLSearchParams : _helpers_AxiosURLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__["default"]);

/***/ }),

/***/ "./node_modules/axios/lib/platform/browser/index.js":
/*!**********************************************************!*\
  !*** ./node_modules/axios/lib/platform/browser/index.js ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./classes/URLSearchParams.js */ "./node_modules/axios/lib/platform/browser/classes/URLSearchParams.js");
/* harmony import */ var _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./classes/FormData.js */ "./node_modules/axios/lib/platform/browser/classes/FormData.js");



/**
 * Determine if we're running in a standard browser environment
 *
 * This allows axios to run in a web worker, and react-native.
 * Both environments support XMLHttpRequest, but not fully standard globals.
 *
 * web workers:
 *  typeof window -> undefined
 *  typeof document -> undefined
 *
 * react-native:
 *  navigator.product -> 'ReactNative'
 * nativescript
 *  navigator.product -> 'NativeScript' or 'NS'
 *
 * @returns {boolean}
 */
var isStandardBrowserEnv = function () {
  var product;
  if (typeof navigator !== 'undefined' && ((product = navigator.product) === 'ReactNative' || product === 'NativeScript' || product === 'NS')) {
    return false;
  }
  return typeof window !== 'undefined' && typeof document !== 'undefined';
}();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isBrowser: true,
  classes: {
    URLSearchParams: _classes_URLSearchParams_js__WEBPACK_IMPORTED_MODULE_0__["default"],
    FormData: _classes_FormData_js__WEBPACK_IMPORTED_MODULE_1__["default"],
    Blob: Blob
  },
  isStandardBrowserEnv: isStandardBrowserEnv,
  protocols: ['http', 'https', 'file', 'blob', 'url', 'data']
});

/***/ }),

/***/ "./node_modules/axios/lib/platform/index.js":
/*!**************************************************!*\
  !*** ./node_modules/axios/lib/platform/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* reexport safe */ _node_index_js__WEBPACK_IMPORTED_MODULE_0__["default"])
/* harmony export */ });
/* harmony import */ var _node_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./node/index.js */ "./node_modules/axios/lib/platform/browser/index.js");



/***/ }),

/***/ "./node_modules/axios/lib/utils.js":
/*!*****************************************!*\
  !*** ./node_modules/axios/lib/utils.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/bind.js */ "./node_modules/axios/lib/helpers/bind.js");


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }


// utils is a library of generic helper functions non-specific to axios

var toString = Object.prototype.toString;
var getPrototypeOf = Object.getPrototypeOf;
var kindOf = function (cache) {
  return function (thing) {
    var str = toString.call(thing);
    return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
  };
}(Object.create(null));
var kindOfTest = function kindOfTest(type) {
  type = type.toLowerCase();
  return function (thing) {
    return kindOf(thing) === type;
  };
};
var typeOfTest = function typeOfTest(type) {
  return function (thing) {
    return _typeof(thing) === type;
  };
};

/**
 * Determine if a value is an Array
 *
 * @param {Object} val The value to test
 *
 * @returns {boolean} True if value is an Array, otherwise false
 */
var isArray = Array.isArray;

/**
 * Determine if a value is undefined
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if the value is undefined, otherwise false
 */
var isUndefined = typeOfTest('undefined');

/**
 * Determine if a value is a Buffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Buffer, otherwise false
 */
function isBuffer(val) {
  return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
}

/**
 * Determine if a value is an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is an ArrayBuffer, otherwise false
 */
var isArrayBuffer = kindOfTest('ArrayBuffer');

/**
 * Determine if a value is a view on an ArrayBuffer
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a view on an ArrayBuffer, otherwise false
 */
function isArrayBufferView(val) {
  var result;
  if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) {
    result = ArrayBuffer.isView(val);
  } else {
    result = val && val.buffer && isArrayBuffer(val.buffer);
  }
  return result;
}

/**
 * Determine if a value is a String
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a String, otherwise false
 */
var isString = typeOfTest('string');

/**
 * Determine if a value is a Function
 *
 * @param {*} val The value to test
 * @returns {boolean} True if value is a Function, otherwise false
 */
var isFunction = typeOfTest('function');

/**
 * Determine if a value is a Number
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Number, otherwise false
 */
var isNumber = typeOfTest('number');

/**
 * Determine if a value is an Object
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an Object, otherwise false
 */
var isObject = function isObject(thing) {
  return thing !== null && _typeof(thing) === 'object';
};

/**
 * Determine if a value is a Boolean
 *
 * @param {*} thing The value to test
 * @returns {boolean} True if value is a Boolean, otherwise false
 */
var isBoolean = function isBoolean(thing) {
  return thing === true || thing === false;
};

/**
 * Determine if a value is a plain Object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a plain Object, otherwise false
 */
var isPlainObject = function isPlainObject(val) {
  if (kindOf(val) !== 'object') {
    return false;
  }
  var prototype = getPrototypeOf(val);
  return (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
};

/**
 * Determine if a value is a Date
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Date, otherwise false
 */
var isDate = kindOfTest('Date');

/**
 * Determine if a value is a File
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
var isFile = kindOfTest('File');

/**
 * Determine if a value is a Blob
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Blob, otherwise false
 */
var isBlob = kindOfTest('Blob');

/**
 * Determine if a value is a FileList
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a File, otherwise false
 */
var isFileList = kindOfTest('FileList');

/**
 * Determine if a value is a Stream
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a Stream, otherwise false
 */
var isStream = function isStream(val) {
  return isObject(val) && isFunction(val.pipe);
};

/**
 * Determine if a value is a FormData
 *
 * @param {*} thing The value to test
 *
 * @returns {boolean} True if value is an FormData, otherwise false
 */
var isFormData = function isFormData(thing) {
  var pattern = '[object FormData]';
  return thing && (typeof FormData === 'function' && thing instanceof FormData || toString.call(thing) === pattern || isFunction(thing.toString) && thing.toString() === pattern);
};

/**
 * Determine if a value is a URLSearchParams object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a URLSearchParams object, otherwise false
 */
var isURLSearchParams = kindOfTest('URLSearchParams');

/**
 * Trim excess whitespace off the beginning and end of a string
 *
 * @param {String} str The String to trim
 *
 * @returns {String} The String freed of excess whitespace
 */
var trim = function trim(str) {
  return str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
};

/**
 * Iterate over an Array or an Object invoking a function for each item.
 *
 * If `obj` is an Array callback will be called passing
 * the value, index, and complete array for each item.
 *
 * If 'obj' is an Object callback will be called passing
 * the value, key, and complete object for each property.
 *
 * @param {Object|Array} obj The object to iterate
 * @param {Function} fn The callback to invoke for each item
 *
 * @param {Boolean} [allOwnKeys = false]
 * @returns {void}
 */
function forEach(obj, fn) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
    _ref$allOwnKeys = _ref.allOwnKeys,
    allOwnKeys = _ref$allOwnKeys === void 0 ? false : _ref$allOwnKeys;
  // Don't bother if no value provided
  if (obj === null || typeof obj === 'undefined') {
    return;
  }
  var i;
  var l;

  // Force an array if not already something iterable
  if (_typeof(obj) !== 'object') {
    /*eslint no-param-reassign:0*/
    obj = [obj];
  }
  if (isArray(obj)) {
    // Iterate over array values
    for (i = 0, l = obj.length; i < l; i++) {
      fn.call(null, obj[i], i, obj);
    }
  } else {
    // Iterate over object keys
    var keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
    var len = keys.length;
    var key;
    for (i = 0; i < len; i++) {
      key = keys[i];
      fn.call(null, obj[key], key, obj);
    }
  }
}

/**
 * Accepts varargs expecting each argument to be an object, then
 * immutably merges the properties of each object and returns result.
 *
 * When multiple objects contain the same key the later object in
 * the arguments list will take precedence.
 *
 * Example:
 *
 * ```js
 * var result = merge({foo: 123}, {foo: 456});
 * console.log(result.foo); // outputs 456
 * ```
 *
 * @param {Object} obj1 Object to merge
 *
 * @returns {Object} Result of all merge properties
 */
function /* obj1, obj2, obj3, ... */
merge() {
  var result = {};
  var assignValue = function assignValue(val, key) {
    if (isPlainObject(result[key]) && isPlainObject(val)) {
      result[key] = merge(result[key], val);
    } else if (isPlainObject(val)) {
      result[key] = merge({}, val);
    } else if (isArray(val)) {
      result[key] = val.slice();
    } else {
      result[key] = val;
    }
  };
  for (var i = 0, l = arguments.length; i < l; i++) {
    arguments[i] && forEach(arguments[i], assignValue);
  }
  return result;
}

/**
 * Extends object a by mutably adding to it the properties of object b.
 *
 * @param {Object} a The object to be extended
 * @param {Object} b The object to copy properties from
 * @param {Object} thisArg The object to bind function to
 *
 * @param {Boolean} [allOwnKeys]
 * @returns {Object} The resulting value of object a
 */
var extend = function extend(a, b, thisArg) {
  var _ref2 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
    allOwnKeys = _ref2.allOwnKeys;
  forEach(b, function (val, key) {
    if (thisArg && isFunction(val)) {
      a[key] = (0,_helpers_bind_js__WEBPACK_IMPORTED_MODULE_0__["default"])(val, thisArg);
    } else {
      a[key] = val;
    }
  }, {
    allOwnKeys: allOwnKeys
  });
  return a;
};

/**
 * Remove byte order marker. This catches EF BB BF (the UTF-8 BOM)
 *
 * @param {string} content with BOM
 *
 * @returns {string} content value without BOM
 */
var stripBOM = function stripBOM(content) {
  if (content.charCodeAt(0) === 0xFEFF) {
    content = content.slice(1);
  }
  return content;
};

/**
 * Inherit the prototype methods from one constructor into another
 * @param {function} constructor
 * @param {function} superConstructor
 * @param {object} [props]
 * @param {object} [descriptors]
 *
 * @returns {void}
 */
var inherits = function inherits(constructor, superConstructor, props, descriptors) {
  constructor.prototype = Object.create(superConstructor.prototype, descriptors);
  constructor.prototype.constructor = constructor;
  Object.defineProperty(constructor, 'super', {
    value: superConstructor.prototype
  });
  props && Object.assign(constructor.prototype, props);
};

/**
 * Resolve object with deep prototype chain to a flat object
 * @param {Object} sourceObj source object
 * @param {Object} [destObj]
 * @param {Function|Boolean} [filter]
 * @param {Function} [propFilter]
 *
 * @returns {Object}
 */
var toFlatObject = function toFlatObject(sourceObj, destObj, filter, propFilter) {
  var props;
  var i;
  var prop;
  var merged = {};
  destObj = destObj || {};
  // eslint-disable-next-line no-eq-null,eqeqeq
  if (sourceObj == null) return destObj;
  do {
    props = Object.getOwnPropertyNames(sourceObj);
    i = props.length;
    while (i-- > 0) {
      prop = props[i];
      if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
        destObj[prop] = sourceObj[prop];
        merged[prop] = true;
      }
    }
    sourceObj = filter !== false && getPrototypeOf(sourceObj);
  } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
  return destObj;
};

/**
 * Determines whether a string ends with the characters of a specified string
 *
 * @param {String} str
 * @param {String} searchString
 * @param {Number} [position= 0]
 *
 * @returns {boolean}
 */
var endsWith = function endsWith(str, searchString, position) {
  str = String(str);
  if (position === undefined || position > str.length) {
    position = str.length;
  }
  position -= searchString.length;
  var lastIndex = str.indexOf(searchString, position);
  return lastIndex !== -1 && lastIndex === position;
};

/**
 * Returns new array from array like object or null if failed
 *
 * @param {*} [thing]
 *
 * @returns {?Array}
 */
var toArray = function toArray(thing) {
  if (!thing) return null;
  if (isArray(thing)) return thing;
  var i = thing.length;
  if (!isNumber(i)) return null;
  var arr = new Array(i);
  while (i-- > 0) {
    arr[i] = thing[i];
  }
  return arr;
};

/**
 * Checking if the Uint8Array exists and if it does, it returns a function that checks if the
 * thing passed in is an instance of Uint8Array
 *
 * @param {TypedArray}
 *
 * @returns {Array}
 */
// eslint-disable-next-line func-names
var isTypedArray = function (TypedArray) {
  // eslint-disable-next-line func-names
  return function (thing) {
    return TypedArray && thing instanceof TypedArray;
  };
}(typeof Uint8Array !== 'undefined' && getPrototypeOf(Uint8Array));

/**
 * For each entry in the object, call the function with the key and value.
 *
 * @param {Object<any, any>} obj - The object to iterate over.
 * @param {Function} fn - The function to call for each entry.
 *
 * @returns {void}
 */
var forEachEntry = function forEachEntry(obj, fn) {
  var generator = obj && obj[Symbol.iterator];
  var iterator = generator.call(obj);
  var result;
  while ((result = iterator.next()) && !result.done) {
    var pair = result.value;
    fn.call(obj, pair[0], pair[1]);
  }
};

/**
 * It takes a regular expression and a string, and returns an array of all the matches
 *
 * @param {string} regExp - The regular expression to match against.
 * @param {string} str - The string to search.
 *
 * @returns {Array<boolean>}
 */
var matchAll = function matchAll(regExp, str) {
  var matches;
  var arr = [];
  while ((matches = regExp.exec(str)) !== null) {
    arr.push(matches);
  }
  return arr;
};

/* Checking if the kindOfTest function returns true when passed an HTMLFormElement. */
var isHTMLForm = kindOfTest('HTMLFormElement');
var toCamelCase = function toCamelCase(str) {
  return str.toLowerCase().replace(/[_-\s]([a-z\d])(\w*)/g, function replacer(m, p1, p2) {
    return p1.toUpperCase() + p2;
  });
};

/* Creating a function that will check if an object has a property. */
var hasOwnProperty = function (_ref3) {
  var hasOwnProperty = _ref3.hasOwnProperty;
  return function (obj, prop) {
    return hasOwnProperty.call(obj, prop);
  };
}(Object.prototype);

/**
 * Determine if a value is a RegExp object
 *
 * @param {*} val The value to test
 *
 * @returns {boolean} True if value is a RegExp object, otherwise false
 */
var isRegExp = kindOfTest('RegExp');
var reduceDescriptors = function reduceDescriptors(obj, reducer) {
  var descriptors = Object.getOwnPropertyDescriptors(obj);
  var reducedDescriptors = {};
  forEach(descriptors, function (descriptor, name) {
    if (reducer(descriptor, name, obj) !== false) {
      reducedDescriptors[name] = descriptor;
    }
  });
  Object.defineProperties(obj, reducedDescriptors);
};

/**
 * Makes all methods read-only
 * @param {Object} obj
 */

var freezeMethods = function freezeMethods(obj) {
  reduceDescriptors(obj, function (descriptor, name) {
    var value = obj[name];
    if (!isFunction(value)) return;
    descriptor.enumerable = false;
    if ('writable' in descriptor) {
      descriptor.writable = false;
      return;
    }
    if (!descriptor.set) {
      descriptor.set = function () {
        throw Error('Can not read-only method \'' + name + '\'');
      };
    }
  });
};
var toObjectSet = function toObjectSet(arrayOrString, delimiter) {
  var obj = {};
  var define = function define(arr) {
    arr.forEach(function (value) {
      obj[value] = true;
    });
  };
  isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
  return obj;
};
var noop = function noop() {};
var toFiniteNumber = function toFiniteNumber(value, defaultValue) {
  value = +value;
  return Number.isFinite(value) ? value : defaultValue;
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  isArray: isArray,
  isArrayBuffer: isArrayBuffer,
  isBuffer: isBuffer,
  isFormData: isFormData,
  isArrayBufferView: isArrayBufferView,
  isString: isString,
  isNumber: isNumber,
  isBoolean: isBoolean,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isUndefined: isUndefined,
  isDate: isDate,
  isFile: isFile,
  isBlob: isBlob,
  isRegExp: isRegExp,
  isFunction: isFunction,
  isStream: isStream,
  isURLSearchParams: isURLSearchParams,
  isTypedArray: isTypedArray,
  isFileList: isFileList,
  forEach: forEach,
  merge: merge,
  extend: extend,
  trim: trim,
  stripBOM: stripBOM,
  inherits: inherits,
  toFlatObject: toFlatObject,
  kindOf: kindOf,
  kindOfTest: kindOfTest,
  endsWith: endsWith,
  toArray: toArray,
  forEachEntry: forEachEntry,
  matchAll: matchAll,
  isHTMLForm: isHTMLForm,
  hasOwnProperty: hasOwnProperty,
  hasOwnProp: hasOwnProperty,
  // an alias to avoid ESLint no-prototype-builtins detection
  reduceDescriptors: reduceDescriptors,
  freezeMethods: freezeMethods,
  toObjectSet: toObjectSet,
  toCamelCase: toCamelCase,
  noop: noop,
  toFiniteNumber: toFiniteNumber
});

/***/ }),

/***/ "./node_modules/crelt/index.es.js":
/*!****************************************!*\
  !*** ./node_modules/crelt/index.es.js ***!
  \****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ crelt)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function crelt() {
  var elt = arguments[0];
  if (typeof elt == "string") elt = document.createElement(elt);
  var i = 1,
    next = arguments[1];
  if (next && _typeof(next) == "object" && next.nodeType == null && !Array.isArray(next)) {
    for (var name in next) {
      if (Object.prototype.hasOwnProperty.call(next, name)) {
        var value = next[name];
        if (typeof value == "string") elt.setAttribute(name, value);else if (value != null) elt[name] = value;
      }
    }
    i++;
  }
  for (; i < arguments.length; i++) {
    add(elt, arguments[i]);
  }
  return elt;
}
function add(elt, child) {
  if (typeof child == "string") {
    elt.appendChild(document.createTextNode(child));
  } else if (child == null) {} else if (child.nodeType != null) {
    elt.appendChild(child);
  } else if (Array.isArray(child)) {
    for (var i = 0; i < child.length; i++) {
      add(elt, child[i]);
    }
  } else {
    throw new RangeError("Unsupported child node: " + child);
  }
}

/***/ }),

/***/ "./node_modules/lezer-tree/dist/tree.es.js":
/*!*************************************************!*\
  !*** ./node_modules/lezer-tree/dist/tree.es.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "DefaultBufferLength": () => (/* binding */ DefaultBufferLength),
/* harmony export */   "NodeProp": () => (/* binding */ NodeProp),
/* harmony export */   "NodeSet": () => (/* binding */ NodeSet),
/* harmony export */   "NodeType": () => (/* binding */ NodeType),
/* harmony export */   "Tree": () => (/* binding */ Tree),
/* harmony export */   "TreeBuffer": () => (/* binding */ TreeBuffer),
/* harmony export */   "TreeCursor": () => (/* binding */ TreeCursor),
/* harmony export */   "TreeFragment": () => (/* binding */ TreeFragment),
/* harmony export */   "stringInput": () => (/* binding */ stringInput)
/* harmony export */ });
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
/// The default maximum length of a `TreeBuffer` node.
var DefaultBufferLength = 1024;
var nextPropID = 0;
var CachedNode = new WeakMap();
/// Each [node type](#tree.NodeType) can have metadata associated with
/// it in props. Instances of this class represent prop names.
var NodeProp = /*#__PURE__*/function () {
  /// Create a new node prop type. You can optionally pass a
  /// `deserialize` function.
  function NodeProp() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      deserialize = _ref.deserialize;
    _classCallCheck(this, NodeProp);
    this.id = nextPropID++;
    this.deserialize = deserialize || function () {
      throw new Error("This node type doesn't define a deserialize function");
    };
  }
  /// Create a string-valued node prop whose deserialize function is
  /// the identity function.
  _createClass(NodeProp, [{
    key: "set",
    value:
    /// Store a value for this prop in the given object. This can be
    /// useful when building up a prop object to pass to the
    /// [`NodeType`](#tree.NodeType) constructor. Returns its first
    /// argument.
    function set(propObj, value) {
      propObj[this.id] = value;
      return propObj;
    }
    /// This is meant to be used with
    /// [`NodeSet.extend`](#tree.NodeSet.extend) or
    /// [`Parser.withProps`](#lezer.Parser.withProps) to compute prop
    /// values for each node type in the set. Takes a [match
    /// object](#tree.NodeType^match) or function that returns undefined
    /// if the node type doesn't get this prop, and the prop's value if
    /// it does.
  }, {
    key: "add",
    value: function add(match) {
      var _this = this;
      if (typeof match != "function") match = NodeType.match(match);
      return function (type) {
        var result = match(type);
        return result === undefined ? null : [_this, result];
      };
    }
  }], [{
    key: "string",
    value: function string() {
      return new NodeProp({
        deserialize: function deserialize(str) {
          return str;
        }
      });
    }
    /// Create a number-valued node prop whose deserialize function is
    /// just `Number`.
  }, {
    key: "number",
    value: function number() {
      return new NodeProp({
        deserialize: Number
      });
    }
    /// Creates a boolean-valued node prop whose deserialize function
    /// returns true for any input.
  }, {
    key: "flag",
    value: function flag() {
      return new NodeProp({
        deserialize: function deserialize() {
          return true;
        }
      });
    }
  }]);
  return NodeProp;
}(); /// Prop that is used to describe matching delimiters. For opening
/// delimiters, this holds an array of node names (written as a
/// space-separated string when declaring this prop in a grammar)
/// for the node types of closing delimiters that match it.
NodeProp.closedBy = new NodeProp({
  deserialize: function deserialize(str) {
    return str.split(" ");
  }
});
/// The inverse of [`openedBy`](#tree.NodeProp^closedBy). This is
/// attached to closing delimiters, holding an array of node names
/// of types of matching opening delimiters.
NodeProp.openedBy = new NodeProp({
  deserialize: function deserialize(str) {
    return str.split(" ");
  }
});
/// Used to assign node types to groups (for example, all node
/// types that represent an expression could be tagged with an
/// `"Expression"` group).
NodeProp.group = new NodeProp({
  deserialize: function deserialize(str) {
    return str.split(" ");
  }
});
var noProps = Object.create(null);
/// Each node in a syntax tree has a node type associated with it.
var NodeType = /*#__PURE__*/function () {
  /// @internal
  function NodeType(
  /// The name of the node type. Not necessarily unique, but if the
  /// grammar was written properly, different node types with the
  /// same name within a node set should play the same semantic
  /// role.
  name,
  /// @internal
  props,
  /// The id of this node in its set. Corresponds to the term ids
  /// used in the parser.
  id) {
    var flags = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
    _classCallCheck(this, NodeType);
    this.name = name;
    this.props = props;
    this.id = id;
    this.flags = flags;
  }
  _createClass(NodeType, [{
    key: "prop",
    value:
    /// Retrieves a node prop for this type. Will return `undefined` if
    /// the prop isn't present on this node.
    function prop(_prop) {
      return this.props[_prop.id];
    }
    /// True when this is the top node of a grammar.
  }, {
    key: "isTop",
    get: function get() {
      return (this.flags & 1 /* Top */) > 0;
    }
    /// True when this node is produced by a skip rule.
  }, {
    key: "isSkipped",
    get: function get() {
      return (this.flags & 2 /* Skipped */) > 0;
    }
    /// Indicates whether this is an error node.
  }, {
    key: "isError",
    get: function get() {
      return (this.flags & 4 /* Error */) > 0;
    }
    /// When true, this node type doesn't correspond to a user-declared
    /// named node, for example because it is used to cache repetition.
  }, {
    key: "isAnonymous",
    get: function get() {
      return (this.flags & 8 /* Anonymous */) > 0;
    }
    /// Returns true when this node's name or one of its
    /// [groups](#tree.NodeProp^group) matches the given string.
  }, {
    key: "is",
    value: function is(name) {
      if (typeof name == 'string') {
        if (this.name == name) return true;
        var group = this.prop(NodeProp.group);
        return group ? group.indexOf(name) > -1 : false;
      }
      return this.id == name;
    }
    /// Create a function from node types to arbitrary values by
    /// specifying an object whose property names are node or
    /// [group](#tree.NodeProp^group) names. Often useful with
    /// [`NodeProp.add`](#tree.NodeProp.add). You can put multiple
    /// names, separated by spaces, in a single property name to map
    /// multiple node names to a single value.
  }], [{
    key: "define",
    value: function define(spec) {
      var props = spec.props && spec.props.length ? Object.create(null) : noProps;
      var flags = (spec.top ? 1 /* Top */ : 0) | (spec.skipped ? 2 /* Skipped */ : 0) | (spec.error ? 4 /* Error */ : 0) | (spec.name == null ? 8 /* Anonymous */ : 0);
      var type = new NodeType(spec.name || "", props, spec.id, flags);
      if (spec.props) {
        var _iterator = _createForOfIteratorHelper(spec.props),
          _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var src = _step.value;
            if (!Array.isArray(src)) src = src(type);
            if (src) src[0].set(props, src[1]);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      return type;
    }
  }, {
    key: "match",
    value: function match(map) {
      var direct = Object.create(null);
      for (var prop in map) {
        var _iterator2 = _createForOfIteratorHelper(prop.split(" ")),
          _step2;
        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var name = _step2.value;
            direct[name] = map[prop];
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
      return function (node) {
        for (var groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {
          var found = direct[i < 0 ? node.name : groups[i]];
          if (found) return found;
        }
      };
    }
  }]);
  return NodeType;
}(); /// An empty dummy node type to use when no actual type is available.
NodeType.none = new NodeType("", Object.create(null), 0, 8 /* Anonymous */);
/// A node set holds a collection of node types. It is used to
/// compactly represent trees by storing their type ids, rather than a
/// full pointer to the type object, in a number array. Each parser
/// [has](#lezer.Parser.nodeSet) a node set, and [tree
/// buffers](#tree.TreeBuffer) can only store collections of nodes
/// from the same set. A set can have a maximum of 2**16 (65536)
/// node types in it, so that the ids fit into 16-bit typed array
/// slots.
var NodeSet = /*#__PURE__*/function () {
  /// Create a set with the given types. The `id` property of each
  /// type should correspond to its position within the array.
  function NodeSet(
  /// The node types in this set, by id.
  types) {
    _classCallCheck(this, NodeSet);
    this.types = types;
    for (var i = 0; i < types.length; i++) {
      if (types[i].id != i) throw new RangeError("Node type ids should correspond to array positions when creating a node set");
    }
  }
  /// Create a copy of this set with some node properties added. The
  /// arguments to this method should be created with
  /// [`NodeProp.add`](#tree.NodeProp.add).
  _createClass(NodeSet, [{
    key: "extend",
    value: function extend() {
      var newTypes = [];
      for (var _len = arguments.length, props = new Array(_len), _key = 0; _key < _len; _key++) {
        props[_key] = arguments[_key];
      }
      var _iterator3 = _createForOfIteratorHelper(this.types),
        _step3;
      try {
        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
          var type = _step3.value;
          var newProps = null;
          var _iterator4 = _createForOfIteratorHelper(props),
            _step4;
          try {
            for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
              var source = _step4.value;
              var add = source(type);
              if (add) {
                if (!newProps) newProps = Object.assign({}, type.props);
                add[0].set(newProps, add[1]);
              }
            }
          } catch (err) {
            _iterator4.e(err);
          } finally {
            _iterator4.f();
          }
          newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);
        }
      } catch (err) {
        _iterator3.e(err);
      } finally {
        _iterator3.f();
      }
      return new NodeSet(newTypes);
    }
  }]);
  return NodeSet;
}(); /// A piece of syntax tree. There are two ways to approach these
/// trees: the way they are actually stored in memory, and the
/// convenient way.
///
/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`
/// objects. By packing detail information into `TreeBuffer` leaf
/// nodes, the representation is made a lot more memory-efficient.
///
/// However, when you want to actually work with tree nodes, this
/// representation is very awkward, so most client code will want to
/// use the `TreeCursor` interface instead, which provides a view on
/// some part of this data structure, and can be used to move around
/// to adjacent nodes.
var Tree = /*#__PURE__*/function () {
  /// Construct a new tree. You usually want to go through
  /// [`Tree.build`](#tree.Tree^build) instead.
  function Tree(type,
  /// The tree's child nodes. Children small enough to fit in a
  /// `TreeBuffer will be represented as such, other children can be
  /// further `Tree` instances with their own internal structure.
  children,
  /// The positions (offsets relative to the start of this tree) of
  /// the children.
  positions,
  /// The total length of this tree
  length) {
    _classCallCheck(this, Tree);
    this.type = type;
    this.children = children;
    this.positions = positions;
    this.length = length;
  }
  /// @internal
  _createClass(Tree, [{
    key: "toString",
    value: function toString() {
      var children = this.children.map(function (c) {
        return c.toString();
      }).join();
      return !this.type.name ? children : (/\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) + (children.length ? "(" + children + ")" : "");
    }
    /// Get a [tree cursor](#tree.TreeCursor) rooted at this tree. When
    /// `pos` is given, the cursor is [moved](#tree.TreeCursor.moveTo)
    /// to the given position and side.
  }, {
    key: "cursor",
    value: function cursor(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var scope = pos != null && CachedNode.get(this) || this.topNode;
      var cursor = new TreeCursor(scope);
      if (pos != null) {
        cursor.moveTo(pos, side);
        CachedNode.set(this, cursor._tree);
      }
      return cursor;
    }
    /// Get a [tree cursor](#tree.TreeCursor) that, unlike regular
    /// cursors, doesn't skip [anonymous](#tree.NodeType.isAnonymous)
    /// nodes.
  }, {
    key: "fullCursor",
    value: function fullCursor() {
      return new TreeCursor(this.topNode, true);
    }
    /// Get a [syntax node](#tree.SyntaxNode) object for the top of the
    /// tree.
  }, {
    key: "topNode",
    get: function get() {
      return new TreeNode(this, 0, 0, null);
    }
    /// Get the [syntax node](#tree.SyntaxNode) at the given position.
    /// If `side` is -1, this will move into nodes that end at the
    /// position. If 1, it'll move into nodes that start at the
    /// position. With 0, it'll only enter nodes that cover the position
    /// from both sides.
  }, {
    key: "resolve",
    value: function resolve(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return this.cursor(pos, side).node;
    }
    /// Iterate over the tree and its children, calling `enter` for any
    /// node that touches the `from`/`to` region (if given) before
    /// running over such a node's children, and `leave` (if given) when
    /// leaving the node. When `enter` returns `false`, the given node
    /// will not have its children iterated over (or `leave` called).
  }, {
    key: "iterate",
    value: function iterate(spec) {
      var enter = spec.enter,
        leave = spec.leave,
        _spec$from = spec.from,
        from = _spec$from === void 0 ? 0 : _spec$from,
        _spec$to = spec.to,
        to = _spec$to === void 0 ? this.length : _spec$to;
      for (var c = this.cursor();;) {
        var mustLeave = false;
        if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c.type, c.from, c.to) !== false)) {
          if (c.firstChild()) continue;
          if (!c.type.isAnonymous) mustLeave = true;
        }
        for (;;) {
          if (mustLeave && leave) leave(c.type, c.from, c.to);
          mustLeave = c.type.isAnonymous;
          if (c.nextSibling()) break;
          if (!c.parent()) return;
          mustLeave = true;
        }
      }
    }
    /// Balance the direct children of this tree.
  }, {
    key: "balance",
    value: function balance() {
      var maxBufferLength = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : DefaultBufferLength;
      return this.children.length <= BalanceBranchFactor ? this : balanceRange(this.type, NodeType.none, this.children, this.positions, 0, this.children.length, 0, maxBufferLength, this.length, 0);
    }
    /// Build a tree from a postfix-ordered buffer of node information,
    /// or a cursor over such a buffer.
  }], [{
    key: "build",
    value: function build(data) {
      return buildTree(data);
    }
  }]);
  return Tree;
}(); /// The empty tree
Tree.empty = new Tree(NodeType.none, [], [], 0);
// For trees that need a context hash attached, we're using this
// kludge which assigns an extra property directly after
// initialization (creating a single new object shape).
function withHash(tree, hash) {
  if (hash) tree.contextHash = hash;
  return tree;
}
/// Tree buffers contain (type, start, end, endIndex) quads for each
/// node. In such a buffer, nodes are stored in prefix order (parents
/// before children, with the endIndex of the parent indicating which
/// children belong to it)
var TreeBuffer = /*#__PURE__*/function () {
  /// Create a tree buffer @internal
  function TreeBuffer(
  /// @internal
  buffer,
  // The total length of the group of nodes in the buffer.
  length,
  /// @internal
  set) {
    var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : NodeType.none;
    _classCallCheck(this, TreeBuffer);
    this.buffer = buffer;
    this.length = length;
    this.set = set;
    this.type = type;
  }
  /// @internal
  _createClass(TreeBuffer, [{
    key: "toString",
    value: function toString() {
      var result = [];
      for (var index = 0; index < this.buffer.length;) {
        result.push(this.childString(index));
        index = this.buffer[index + 3];
      }
      return result.join(",");
    }
    /// @internal
  }, {
    key: "childString",
    value: function childString(index) {
      var id = this.buffer[index],
        endIndex = this.buffer[index + 3];
      var type = this.set.types[id],
        result = type.name;
      if (/\W/.test(result) && !type.isError) result = JSON.stringify(result);
      index += 4;
      if (endIndex == index) return result;
      var children = [];
      while (index < endIndex) {
        children.push(this.childString(index));
        index = this.buffer[index + 3];
      }
      return result + "(" + children.join(",") + ")";
    }
    /// @internal
  }, {
    key: "findChild",
    value: function findChild(startIndex, endIndex, dir, after) {
      var buffer = this.buffer,
        pick = -1;
      for (var i = startIndex; i != endIndex; i = buffer[i + 3]) {
        if (after != -100000000 /* None */) {
          var start = buffer[i + 1],
            end = buffer[i + 2];
          if (dir > 0) {
            if (end > after) pick = i;
            if (end > after) break;
          } else {
            if (start < after) pick = i;
            if (end >= after) break;
          }
        } else {
          pick = i;
          if (dir > 0) break;
        }
      }
      return pick;
    }
  }]);
  return TreeBuffer;
}();
var TreeNode = /*#__PURE__*/function () {
  function TreeNode(node, from, index, _parent) {
    _classCallCheck(this, TreeNode);
    this.node = node;
    this.from = from;
    this.index = index;
    this._parent = _parent;
  }
  _createClass(TreeNode, [{
    key: "type",
    get: function get() {
      return this.node.type;
    }
  }, {
    key: "name",
    get: function get() {
      return this.node.type.name;
    }
  }, {
    key: "to",
    get: function get() {
      return this.from + this.node.length;
    }
  }, {
    key: "nextChild",
    value: function nextChild(i, dir, after) {
      var full = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      for (var parent = this;;) {
        for (var _parent$node = parent.node, children = _parent$node.children, positions = _parent$node.positions, e = dir > 0 ? children.length : -1; i != e; i += dir) {
          var next = children[i],
            start = positions[i] + parent.from;
          if (after != -100000000 /* None */ && (dir < 0 ? start >= after : start + next.length <= after)) continue;
          if (next instanceof TreeBuffer) {
            var index = next.findChild(0, next.buffer.length, dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - start);
            if (index > -1) return new BufferNode(new BufferContext(parent, next, i, start), null, index);
          } else if (full || !next.type.isAnonymous || hasChild(next)) {
            var inner = new TreeNode(next, start, i, parent);
            return full || !inner.type.isAnonymous ? inner : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, after);
          }
        }
        if (full || !parent.type.isAnonymous) return null;
        i = parent.index + dir;
        parent = parent._parent;
        if (!parent) return null;
      }
    }
  }, {
    key: "firstChild",
    get: function get() {
      return this.nextChild(0, 1, -100000000 /* None */);
    }
  }, {
    key: "lastChild",
    get: function get() {
      return this.nextChild(this.node.children.length - 1, -1, -100000000 /* None */);
    }
  }, {
    key: "childAfter",
    value: function childAfter(pos) {
      return this.nextChild(0, 1, pos);
    }
  }, {
    key: "childBefore",
    value: function childBefore(pos) {
      return this.nextChild(this.node.children.length - 1, -1, pos);
    }
  }, {
    key: "nextSignificantParent",
    value: function nextSignificantParent() {
      var val = this;
      while (val.type.isAnonymous && val._parent) {
        val = val._parent;
      }
      return val;
    }
  }, {
    key: "parent",
    get: function get() {
      return this._parent ? this._parent.nextSignificantParent() : null;
    }
  }, {
    key: "nextSibling",
    get: function get() {
      return this._parent ? this._parent.nextChild(this.index + 1, 1, -1) : null;
    }
  }, {
    key: "prevSibling",
    get: function get() {
      return this._parent ? this._parent.nextChild(this.index - 1, -1, -1) : null;
    }
  }, {
    key: "cursor",
    get: function get() {
      return new TreeCursor(this);
    }
  }, {
    key: "resolve",
    value: function resolve(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return this.cursor.moveTo(pos, side).node;
    }
  }, {
    key: "getChild",
    value: function getChild(type) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var r = _getChildren(this, type, before, after);
      return r.length ? r[0] : null;
    }
  }, {
    key: "getChildren",
    value: function getChildren(type) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return _getChildren(this, type, before, after);
    }
    /// @internal
  }, {
    key: "toString",
    value: function toString() {
      return this.node.toString();
    }
  }]);
  return TreeNode;
}();
function _getChildren(node, type, before, after) {
  var cur = node.cursor,
    result = [];
  if (!cur.firstChild()) return result;
  if (before != null) while (!cur.type.is(before)) {
    if (!cur.nextSibling()) return result;
  }
  for (;;) {
    if (after != null && cur.type.is(after)) return result;
    if (cur.type.is(type)) result.push(cur.node);
    if (!cur.nextSibling()) return after == null ? result : [];
  }
}
var BufferContext = /*#__PURE__*/_createClass(function BufferContext(parent, buffer, index, start) {
  _classCallCheck(this, BufferContext);
  this.parent = parent;
  this.buffer = buffer;
  this.index = index;
  this.start = start;
});
var BufferNode = /*#__PURE__*/function () {
  function BufferNode(context, _parent, index) {
    _classCallCheck(this, BufferNode);
    this.context = context;
    this._parent = _parent;
    this.index = index;
    this.type = context.buffer.set.types[context.buffer.buffer[index]];
  }
  _createClass(BufferNode, [{
    key: "name",
    get: function get() {
      return this.type.name;
    }
  }, {
    key: "from",
    get: function get() {
      return this.context.start + this.context.buffer.buffer[this.index + 1];
    }
  }, {
    key: "to",
    get: function get() {
      return this.context.start + this.context.buffer.buffer[this.index + 2];
    }
  }, {
    key: "child",
    value: function child(dir, after) {
      var buffer = this.context.buffer;
      var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.context.start);
      return index < 0 ? null : new BufferNode(this.context, this, index);
    }
  }, {
    key: "firstChild",
    get: function get() {
      return this.child(1, -100000000 /* None */);
    }
  }, {
    key: "lastChild",
    get: function get() {
      return this.child(-1, -100000000 /* None */);
    }
  }, {
    key: "childAfter",
    value: function childAfter(pos) {
      return this.child(1, pos);
    }
  }, {
    key: "childBefore",
    value: function childBefore(pos) {
      return this.child(-1, pos);
    }
  }, {
    key: "parent",
    get: function get() {
      return this._parent || this.context.parent.nextSignificantParent();
    }
  }, {
    key: "externalSibling",
    value: function externalSibling(dir) {
      return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, -1);
    }
  }, {
    key: "nextSibling",
    get: function get() {
      var buffer = this.context.buffer;
      var after = buffer.buffer[this.index + 3];
      if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length)) return new BufferNode(this.context, this._parent, after);
      return this.externalSibling(1);
    }
  }, {
    key: "prevSibling",
    get: function get() {
      var buffer = this.context.buffer;
      var parentStart = this._parent ? this._parent.index + 4 : 0;
      if (this.index == parentStart) return this.externalSibling(-1);
      return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));
    }
  }, {
    key: "cursor",
    get: function get() {
      return new TreeCursor(this);
    }
  }, {
    key: "resolve",
    value: function resolve(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      return this.cursor.moveTo(pos, side).node;
    }
    /// @internal
  }, {
    key: "toString",
    value: function toString() {
      return this.context.buffer.childString(this.index);
    }
  }, {
    key: "getChild",
    value: function getChild(type) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      var r = _getChildren(this, type, before, after);
      return r.length ? r[0] : null;
    }
  }, {
    key: "getChildren",
    value: function getChildren(type) {
      var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var after = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
      return _getChildren(this, type, before, after);
    }
  }]);
  return BufferNode;
}(); /// A tree cursor object focuses on a given node in a syntax tree, and
/// allows you to move to adjacent nodes.
var TreeCursor = /*#__PURE__*/function () {
  /// @internal
  function TreeCursor(node) {
    var full = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    _classCallCheck(this, TreeCursor);
    this.full = full;
    this.buffer = null;
    this.stack = [];
    this.index = 0;
    this.bufferNode = null;
    if (node instanceof TreeNode) {
      this.yieldNode(node);
    } else {
      this._tree = node.context.parent;
      this.buffer = node.context;
      for (var n = node._parent; n; n = n._parent) {
        this.stack.unshift(n.index);
      }
      this.bufferNode = node;
      this.yieldBuf(node.index);
    }
  }
  /// Shorthand for `.type.name`.
  _createClass(TreeCursor, [{
    key: "name",
    get: function get() {
      return this.type.name;
    }
  }, {
    key: "yieldNode",
    value: function yieldNode(node) {
      if (!node) return false;
      this._tree = node;
      this.type = node.type;
      this.from = node.from;
      this.to = node.to;
      return true;
    }
  }, {
    key: "yieldBuf",
    value: function yieldBuf(index, type) {
      this.index = index;
      var _this$buffer = this.buffer,
        start = _this$buffer.start,
        buffer = _this$buffer.buffer;
      this.type = type || buffer.set.types[buffer.buffer[index]];
      this.from = start + buffer.buffer[index + 1];
      this.to = start + buffer.buffer[index + 2];
      return true;
    }
  }, {
    key: "yield",
    value: function _yield(node) {
      if (!node) return false;
      if (node instanceof TreeNode) {
        this.buffer = null;
        return this.yieldNode(node);
      }
      this.buffer = node.context;
      return this.yieldBuf(node.index, node.type);
    }
    /// @internal
  }, {
    key: "toString",
    value: function toString() {
      return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();
    }
    /// @internal
  }, {
    key: "enter",
    value: function enter(dir, after) {
      if (!this.buffer) return this["yield"](this._tree.nextChild(dir < 0 ? this._tree.node.children.length - 1 : 0, dir, after, this.full));
      var buffer = this.buffer.buffer;
      var index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, after == -100000000 /* None */ ? -100000000 /* None */ : after - this.buffer.start);
      if (index < 0) return false;
      this.stack.push(this.index);
      return this.yieldBuf(index);
    }
    /// Move the cursor to this node's first child. When this returns
    /// false, the node has no child, and the cursor has not been moved.
  }, {
    key: "firstChild",
    value: function firstChild() {
      return this.enter(1, -100000000 /* None */);
    }
    /// Move the cursor to this node's last child.
  }, {
    key: "lastChild",
    value: function lastChild() {
      return this.enter(-1, -100000000 /* None */);
    }
    /// Move the cursor to the first child that starts at or after `pos`.
  }, {
    key: "childAfter",
    value: function childAfter(pos) {
      return this.enter(1, pos);
    }
    /// Move to the last child that ends at or before `pos`.
  }, {
    key: "childBefore",
    value: function childBefore(pos) {
      return this.enter(-1, pos);
    }
    /// Move the node's parent node, if this isn't the top node.
  }, {
    key: "parent",
    value: function parent() {
      if (!this.buffer) return this.yieldNode(this.full ? this._tree._parent : this._tree.parent);
      if (this.stack.length) return this.yieldBuf(this.stack.pop());
      var parent = this.full ? this.buffer.parent : this.buffer.parent.nextSignificantParent();
      this.buffer = null;
      return this.yieldNode(parent);
    }
    /// @internal
  }, {
    key: "sibling",
    value: function sibling(dir) {
      if (!this.buffer) return !this._tree._parent ? false : this["yield"](this._tree._parent.nextChild(this._tree.index + dir, dir, -100000000 /* None */, this.full));
      var buffer = this.buffer.buffer,
        d = this.stack.length - 1;
      if (dir < 0) {
        var parentStart = d < 0 ? 0 : this.stack[d] + 4;
        if (this.index != parentStart) return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, -100000000 /* None */));
      } else {
        var after = buffer.buffer[this.index + 3];
        if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3])) return this.yieldBuf(after);
      }
      return d < 0 ? this["yield"](this.buffer.parent.nextChild(this.buffer.index + dir, dir, -100000000 /* None */, this.full)) : false;
    }
    /// Move to this node's next sibling, if any.
  }, {
    key: "nextSibling",
    value: function nextSibling() {
      return this.sibling(1);
    }
    /// Move to this node's previous sibling, if any.
  }, {
    key: "prevSibling",
    value: function prevSibling() {
      return this.sibling(-1);
    }
  }, {
    key: "atLastNode",
    value: function atLastNode(dir) {
      var index,
        parent,
        buffer = this.buffer;
      if (buffer) {
        if (dir > 0) {
          if (this.index < buffer.buffer.buffer.length) return false;
        } else {
          for (var i = 0; i < this.index; i++) {
            if (buffer.buffer.buffer[i + 3] < this.index) return false;
          }
        }
        index = buffer.index;
        parent = buffer.parent;
      } else {
        var _this$_tree = this._tree;
        index = _this$_tree.index;
        parent = _this$_tree._parent;
      }
      for (; parent; _parent2 = parent, index = _parent2.index, parent = _parent2._parent, _parent2) {
        var _parent2;
        for (var _i = index + dir, e = dir < 0 ? -1 : parent.node.children.length; _i != e; _i += dir) {
          var child = parent.node.children[_i];
          if (this.full || !child.type.isAnonymous || child instanceof TreeBuffer || hasChild(child)) return false;
        }
      }
      return true;
    }
  }, {
    key: "move",
    value: function move(dir) {
      if (this.enter(dir, -100000000 /* None */)) return true;
      for (;;) {
        if (this.sibling(dir)) return true;
        if (this.atLastNode(dir) || !this.parent()) return false;
      }
    }
    /// Move to the next node in a
    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order_(NLR))
    /// traversal, going from a node to its first child or, if the
    /// current node is empty, its next sibling or the next sibling of
    /// the first parent node that has one.
  }, {
    key: "next",
    value: function next() {
      return this.move(1);
    }
    /// Move to the next node in a last-to-first pre-order traveral. A
    /// node is followed by ist last child or, if it has none, its
    /// previous sibling or the previous sibling of the first parent
    /// node that has one.
  }, {
    key: "prev",
    value: function prev() {
      return this.move(-1);
    }
    /// Move the cursor to the innermost node that covers `pos`. If
    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,
    /// it will enter nodes that start at `pos`.
  }, {
    key: "moveTo",
    value: function moveTo(pos) {
      var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      // Move up to a node that actually holds the position, if possible
      while (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) {
        if (!this.parent()) break;
      }
      // Then scan down into child nodes as far as possible
      for (;;) {
        if (side < 0 ? !this.childBefore(pos) : !this.childAfter(pos)) break;
        if (this.from == this.to || (side < 1 ? this.from >= pos : this.from > pos) || (side > -1 ? this.to <= pos : this.to < pos)) {
          this.parent();
          break;
        }
      }
      return this;
    }
    /// Get a [syntax node](#tree.SyntaxNode) at the cursor's current
    /// position.
  }, {
    key: "node",
    get: function get() {
      if (!this.buffer) return this._tree;
      var cache = this.bufferNode,
        result = null,
        depth = 0;
      if (cache && cache.context == this.buffer) {
        scan: for (var index = this.index, d = this.stack.length; d >= 0;) {
          for (var c = cache; c; c = c._parent) {
            if (c.index == index) {
              if (index == this.index) return c;
              result = c;
              depth = d + 1;
              break scan;
            }
          }
          index = this.stack[--d];
        }
      }
      for (var i = depth; i < this.stack.length; i++) {
        result = new BufferNode(this.buffer, result, this.stack[i]);
      }
      return this.bufferNode = new BufferNode(this.buffer, result, this.index);
    }
    /// Get the [tree](#tree.Tree) that represents the current node, if
    /// any. Will return null when the node is in a [tree
    /// buffer](#tree.TreeBuffer).
  }, {
    key: "tree",
    get: function get() {
      return this.buffer ? null : this._tree.node;
    }
  }]);
  return TreeCursor;
}();
function hasChild(tree) {
  return tree.children.some(function (ch) {
    return !ch.type.isAnonymous || ch instanceof TreeBuffer || hasChild(ch);
  });
}
var FlatBufferCursor = /*#__PURE__*/function () {
  function FlatBufferCursor(buffer, index) {
    _classCallCheck(this, FlatBufferCursor);
    this.buffer = buffer;
    this.index = index;
  }
  _createClass(FlatBufferCursor, [{
    key: "id",
    get: function get() {
      return this.buffer[this.index - 4];
    }
  }, {
    key: "start",
    get: function get() {
      return this.buffer[this.index - 3];
    }
  }, {
    key: "end",
    get: function get() {
      return this.buffer[this.index - 2];
    }
  }, {
    key: "size",
    get: function get() {
      return this.buffer[this.index - 1];
    }
  }, {
    key: "pos",
    get: function get() {
      return this.index;
    }
  }, {
    key: "next",
    value: function next() {
      this.index -= 4;
    }
  }, {
    key: "fork",
    value: function fork() {
      return new FlatBufferCursor(this.buffer, this.index);
    }
  }]);
  return FlatBufferCursor;
}();
var BalanceBranchFactor = 8;
function buildTree(data) {
  var _a;
  var buffer = data.buffer,
    nodeSet = data.nodeSet,
    _data$topID = data.topID,
    topID = _data$topID === void 0 ? 0 : _data$topID,
    _data$maxBufferLength = data.maxBufferLength,
    maxBufferLength = _data$maxBufferLength === void 0 ? DefaultBufferLength : _data$maxBufferLength,
    _data$reused = data.reused,
    reused = _data$reused === void 0 ? [] : _data$reused,
    _data$minRepeatType = data.minRepeatType,
    minRepeatType = _data$minRepeatType === void 0 ? nodeSet.types.length : _data$minRepeatType;
  var cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;
  var types = nodeSet.types;
  var contextHash = 0;
  function takeNode(parentStart, minPos, children, positions, inRepeat) {
    var id = cursor.id,
      start = cursor.start,
      end = cursor.end,
      size = cursor.size;
    var startPos = start - parentStart;
    if (size < 0) {
      if (size == -1) {
        // Reused node
        children.push(reused[id]);
        positions.push(startPos);
      } else {
        // Context change
        contextHash = id;
      }
      cursor.next();
      return;
    }
    var type = types[id],
      node,
      buffer;
    if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {
      // Small enough for a buffer, and no reused nodes inside
      var _data = new Uint16Array(buffer.size - buffer.skip);
      var endPos = cursor.pos - buffer.size,
        index = _data.length;
      while (cursor.pos > endPos) {
        index = copyToBuffer(buffer.start, _data, index, inRepeat);
      }
      node = new TreeBuffer(_data, end - buffer.start, nodeSet, inRepeat < 0 ? NodeType.none : types[inRepeat]);
      startPos = buffer.start - parentStart;
    } else {
      // Make it a node
      var _endPos = cursor.pos - size;
      cursor.next();
      var localChildren = [],
        localPositions = [];
      var localInRepeat = id >= minRepeatType ? id : -1;
      while (cursor.pos > _endPos) {
        if (cursor.id == localInRepeat) cursor.next();else takeNode(start, _endPos, localChildren, localPositions, localInRepeat);
      }
      localChildren.reverse();
      localPositions.reverse();
      if (localInRepeat > -1 && localChildren.length > BalanceBranchFactor) node = balanceRange(type, type, localChildren, localPositions, 0, localChildren.length, 0, maxBufferLength, end - start, contextHash);else node = withHash(new Tree(type, localChildren, localPositions, end - start), contextHash);
    }
    children.push(node);
    positions.push(startPos);
  }
  function findBufferSize(maxSize, inRepeat) {
    // Scan through the buffer to find previous siblings that fit
    // together in a TreeBuffer, and don't contain any reused nodes
    // (which can't be stored in a buffer).
    // If `inRepeat` is > -1, ignore node boundaries of that type for
    // nesting, but make sure the end falls either at the start
    // (`maxSize`) or before such a node.
    var fork = cursor.fork();
    var size = 0,
      start = 0,
      skip = 0,
      minStart = fork.end - maxBufferLength;
    var result = {
      size: 0,
      start: 0,
      skip: 0
    };
    scan: for (var minPos = fork.pos - maxSize; fork.pos > minPos;) {
      // Pretend nested repeat nodes of the same type don't exist
      if (fork.id == inRepeat) {
        // Except that we store the current state as a valid return
        // value.
        result.size = size;
        result.start = start;
        result.skip = skip;
        skip += 4;
        size += 4;
        fork.next();
        continue;
      }
      var nodeSize = fork.size,
        startPos = fork.pos - nodeSize;
      if (nodeSize < 0 || startPos < minPos || fork.start < minStart) break;
      var localSkipped = fork.id >= minRepeatType ? 4 : 0;
      var nodeStart = fork.start;
      fork.next();
      while (fork.pos > startPos) {
        if (fork.size < 0) break scan;
        if (fork.id >= minRepeatType) localSkipped += 4;
        fork.next();
      }
      start = nodeStart;
      size += nodeSize;
      skip += localSkipped;
    }
    if (inRepeat < 0 || size == maxSize) {
      result.size = size;
      result.start = start;
      result.skip = skip;
    }
    return result.size > 4 ? result : undefined;
  }
  function copyToBuffer(bufferStart, buffer, index, inRepeat) {
    var id = cursor.id,
      start = cursor.start,
      end = cursor.end,
      size = cursor.size;
    cursor.next();
    if (id == inRepeat) return index;
    var startIndex = index;
    if (size > 4) {
      var endPos = cursor.pos - (size - 4);
      while (cursor.pos > endPos) {
        index = copyToBuffer(bufferStart, buffer, index, inRepeat);
      }
    }
    if (id < minRepeatType) {
      // Don't copy repeat nodes into buffers
      buffer[--index] = startIndex;
      buffer[--index] = end - bufferStart;
      buffer[--index] = start - bufferStart;
      buffer[--index] = id;
    }
    return index;
  }
  var children = [],
    positions = [];
  while (cursor.pos > 0) {
    takeNode(data.start || 0, 0, children, positions, -1);
  }
  var length = (_a = data.length) !== null && _a !== void 0 ? _a : children.length ? positions[0] + children[0].length : 0;
  return new Tree(types[topID], children.reverse(), positions.reverse(), length);
}
function balanceRange(outerType, innerType, children, positions, from, to, start, maxBufferLength, length, contextHash) {
  var localChildren = [],
    localPositions = [];
  if (length <= maxBufferLength) {
    for (var i = from; i < to; i++) {
      localChildren.push(children[i]);
      localPositions.push(positions[i] - start);
    }
  } else {
    var maxChild = Math.max(maxBufferLength, Math.ceil(length * 1.5 / BalanceBranchFactor));
    for (var _i2 = from; _i2 < to;) {
      var groupFrom = _i2,
        groupStart = positions[_i2];
      _i2++;
      for (; _i2 < to; _i2++) {
        var nextEnd = positions[_i2] + children[_i2].length;
        if (nextEnd - groupStart > maxChild) break;
      }
      if (_i2 == groupFrom + 1) {
        var only = children[groupFrom];
        if (only instanceof Tree && only.type == innerType && only.length > maxChild << 1) {
          // Too big, collapse
          for (var j = 0; j < only.children.length; j++) {
            localChildren.push(only.children[j]);
            localPositions.push(only.positions[j] + groupStart - start);
          }
          continue;
        }
        localChildren.push(only);
      } else if (_i2 == groupFrom + 1) {
        localChildren.push(children[groupFrom]);
      } else {
        var inner = balanceRange(innerType, innerType, children, positions, groupFrom, _i2, groupStart, maxBufferLength, positions[_i2 - 1] + children[_i2 - 1].length - groupStart, contextHash);
        if (innerType != NodeType.none && !containsType(inner.children, innerType)) inner = withHash(new Tree(NodeType.none, inner.children, inner.positions, inner.length), contextHash);
        localChildren.push(inner);
      }
      localPositions.push(groupStart - start);
    }
  }
  return withHash(new Tree(outerType, localChildren, localPositions, length), contextHash);
}
function containsType(nodes, type) {
  var _iterator5 = _createForOfIteratorHelper(nodes),
    _step5;
  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var elt = _step5.value;
      if (elt.type == type) return true;
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
  return false;
}
/// Tree fragments are used during [incremental
/// parsing](#lezer.ParseOptions.fragments) to track parts of old
/// trees that can be reused in a new parse. An array of fragments is
/// used to track regions of an old tree whose nodes might be reused
/// in new parses. Use the static
/// [`applyChanges`](#tree.TreeFragment^applyChanges) method to update
/// fragments for document changes.
var TreeFragment = /*#__PURE__*/function () {
  function TreeFragment(
  /// The start of the unchanged range pointed to by this fragment.
  /// This refers to an offset in the _updated_ document (as opposed
  /// to the original tree).
  from,
  /// The end of the unchanged range.
  to,
  /// The tree that this fragment is based on.
  tree,
  /// The offset between the fragment's tree and the document that
  /// this fragment can be used against. Add this when going from
  /// document to tree positions, subtract it to go from tree to
  /// document positions.
  offset, open) {
    _classCallCheck(this, TreeFragment);
    this.from = from;
    this.to = to;
    this.tree = tree;
    this.offset = offset;
    this.open = open;
  }
  _createClass(TreeFragment, [{
    key: "openStart",
    get: function get() {
      return (this.open & 1 /* Start */) > 0;
    }
  }, {
    key: "openEnd",
    get: function get() {
      return (this.open & 2 /* End */) > 0;
    }
    /// Apply a set of edits to an array of fragments, removing or
    /// splitting fragments as necessary to remove edited ranges, and
    /// adjusting offsets for fragments that moved.
  }], [{
    key: "applyChanges",
    value: function applyChanges(fragments, changes) {
      var minGap = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 128;
      if (!changes.length) return fragments;
      var result = [];
      var fI = 1,
        nextF = fragments.length ? fragments[0] : null;
      var cI = 0,
        pos = 0,
        off = 0;
      for (;;) {
        var nextC = cI < changes.length ? changes[cI++] : null;
        var nextPos = nextC ? nextC.fromA : 1e9;
        if (nextPos - pos >= minGap) while (nextF && nextF.from < nextPos) {
          var cut = nextF;
          if (pos >= cut.from || nextPos <= cut.to || off) {
            var fFrom = Math.max(cut.from, pos) - off,
              fTo = Math.min(cut.to, nextPos) - off;
            cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, (cI > 0 ? 1 /* Start */ : 0) | (nextC ? 2 /* End */ : 0));
          }
          if (cut) result.push(cut);
          if (nextF.to > nextPos) break;
          nextF = fI < fragments.length ? fragments[fI++] : null;
        }
        if (!nextC) break;
        pos = nextC.toA;
        off = nextC.toA - nextC.toB;
      }
      return result;
    }
    /// Create a set of fragments from a freshly parsed tree, or update
    /// an existing set of fragments by replacing the ones that overlap
    /// with a tree with content from the new tree. When `partial` is
    /// true, the parse is treated as incomplete, and the token at its
    /// end is not included in [`safeTo`](#tree.TreeFragment.safeTo).
  }, {
    key: "addTree",
    value: function addTree(tree) {
      var fragments = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
      var partial = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      var result = [new TreeFragment(0, tree.length, tree, 0, partial ? 2 /* End */ : 0)];
      var _iterator6 = _createForOfIteratorHelper(fragments),
        _step6;
      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var f = _step6.value;
          if (f.to > tree.length) result.push(f);
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }
      return result;
    }
  }]);
  return TreeFragment;
}(); // Creates an `Input` that is backed by a single, flat string.
function stringInput(input) {
  return new StringInput(input);
}
var StringInput = /*#__PURE__*/function () {
  function StringInput(string) {
    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : string.length;
    _classCallCheck(this, StringInput);
    this.string = string;
    this.length = length;
  }
  _createClass(StringInput, [{
    key: "get",
    value: function get(pos) {
      return pos < 0 || pos >= this.length ? -1 : this.string.charCodeAt(pos);
    }
  }, {
    key: "lineAfter",
    value: function lineAfter(pos) {
      if (pos < 0) return "";
      var end = this.string.indexOf("\n", pos);
      return this.string.slice(pos, end < 0 ? this.length : Math.min(end, this.length));
    }
  }, {
    key: "read",
    value: function read(from, to) {
      return this.string.slice(from, Math.min(this.length, to));
    }
  }, {
    key: "clip",
    value: function clip(at) {
      return new StringInput(this.string, at);
    }
  }]);
  return StringInput;
}();


/***/ }),

/***/ "./node_modules/style-mod/src/style-mod.js":
/*!*************************************************!*\
  !*** ./node_modules/style-mod/src/style-mod.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "StyleModule": () => (/* binding */ StyleModule)
/* harmony export */ });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
var C = "\u037C";
var COUNT = typeof Symbol == "undefined" ? "__" + C : Symbol["for"](C);
var SET = typeof Symbol == "undefined" ? "__styleSet" + Math.floor(Math.random() * 1e8) : Symbol("styleSet");
var top = typeof globalThis != "undefined" ? globalThis : typeof window != "undefined" ? window : {};

// :: - Style modules encapsulate a set of CSS rules defined from
// JavaScript. Their definitions are only available in a given DOM
// root after it has been _mounted_ there with `StyleModule.mount`.
//
// Style modules should be created once and stored somewhere, as
// opposed to re-creating them every time you need them. The amount of
// CSS rules generated for a given DOM root is bounded by the amount
// of style modules that were used. So to avoid leaking rules, don't
// create these dynamically, but treat them as one-time allocations.
var StyleModule = /*#__PURE__*/function () {
  // :: (Object<Style>, ?{finish: ?(string) → string})
  // Create a style module from the given spec.
  //
  // When `finish` is given, it is called on regular (non-`@`)
  // selectors (after `&` expansion) to compute the final selector.
  function StyleModule(spec, options) {
    _classCallCheck(this, StyleModule);
    this.rules = [];
    var _ref = options || {},
      finish = _ref.finish;
    function splitSelector(selector) {
      return /^@/.test(selector) ? [selector] : selector.split(/,\s*/);
    }
    function render(selectors, spec, target, isKeyframes) {
      var local = [],
        isAt = /^@(\w+)\b/.exec(selectors[0]),
        keyframes = isAt && isAt[1] == "keyframes";
      if (isAt && spec == null) return target.push(selectors[0] + ";");
      for (var prop in spec) {
        var value = spec[prop];
        if (/&/.test(prop)) {
          render(prop.split(/,\s*/).map(function (part) {
            return selectors.map(function (sel) {
              return part.replace(/&/, sel);
            });
          }).reduce(function (a, b) {
            return a.concat(b);
          }), value, target);
        } else if (value && _typeof(value) == "object") {
          if (!isAt) throw new RangeError("The value of a property (" + prop + ") should be a primitive value.");
          render(splitSelector(prop), value, local, keyframes);
        } else if (value != null) {
          local.push(prop.replace(/_.*/, "").replace(/[A-Z]/g, function (l) {
            return "-" + l.toLowerCase();
          }) + ": " + value + ";");
        }
      }
      if (local.length || keyframes) {
        target.push((finish && !isAt && !isKeyframes ? selectors.map(finish) : selectors).join(", ") + " {" + local.join(" ") + "}");
      }
    }
    for (var prop in spec) {
      render(splitSelector(prop), spec[prop], this.rules);
    }
  }

  // :: () → string
  // Returns a string containing the module's CSS rules.
  _createClass(StyleModule, [{
    key: "getRules",
    value: function getRules() {
      return this.rules.join("\n");
    }

    // :: () → string
    // Generate a new unique CSS class name.
  }], [{
    key: "newName",
    value: function newName() {
      var id = top[COUNT] || 1;
      top[COUNT] = id + 1;
      return C + id.toString(36);
    }

    // :: (union<Document, ShadowRoot>, union<[StyleModule], StyleModule>)
    //
    // Mount the given set of modules in the given DOM root, which ensures
    // that the CSS rules defined by the module are available in that
    // context.
    //
    // Rules are only added to the document once per root.
    //
    // Rule order will follow the order of the modules, so that rules from
    // modules later in the array take precedence of those from earlier
    // modules. If you call this function multiple times for the same root
    // in a way that changes the order of already mounted modules, the old
    // order will be changed.
  }, {
    key: "mount",
    value: function mount(root, modules) {
      (root[SET] || new StyleSet(root)).mount(Array.isArray(modules) ? modules : [modules]);
    }
  }]);
  return StyleModule;
}();
var adoptedSet = null;
var StyleSet = /*#__PURE__*/function () {
  function StyleSet(root) {
    _classCallCheck(this, StyleSet);
    if (!root.head && root.adoptedStyleSheets && typeof CSSStyleSheet != "undefined") {
      if (adoptedSet) {
        root.adoptedStyleSheets = [adoptedSet.sheet].concat(root.adoptedStyleSheets);
        return root[SET] = adoptedSet;
      }
      this.sheet = new CSSStyleSheet();
      root.adoptedStyleSheets = [this.sheet].concat(root.adoptedStyleSheets);
      adoptedSet = this;
    } else {
      this.styleTag = (root.ownerDocument || root).createElement("style");
      var target = root.head || root;
      target.insertBefore(this.styleTag, target.firstChild);
    }
    this.modules = [];
    root[SET] = this;
  }
  _createClass(StyleSet, [{
    key: "mount",
    value: function mount(modules) {
      var sheet = this.sheet;
      var pos = 0 /* Current rule offset */,
        j = 0; /* Index into this.modules */
      for (var i = 0; i < modules.length; i++) {
        var mod = modules[i],
          index = this.modules.indexOf(mod);
        if (index < j && index > -1) {
          // Ordering conflict
          this.modules.splice(index, 1);
          j--;
          index = -1;
        }
        if (index == -1) {
          this.modules.splice(j++, 0, mod);
          if (sheet) for (var k = 0; k < mod.rules.length; k++) {
            sheet.insertRule(mod.rules[k], pos++);
          }
        } else {
          while (j < index) {
            pos += this.modules[j++].rules.length;
          }
          pos += mod.rules.length;
          j++;
        }
      }
      if (!sheet) {
        var text = "";
        for (var _i = 0; _i < this.modules.length; _i++) {
          text += this.modules[_i].getRules() + "\n";
        }
        this.styleTag.textContent = text;
      }
    }
  }]);
  return StyleSet;
}(); // Style::Object<union<Style,string>>
//
// A style is an object that, in the simple case, maps CSS property
// names to strings holding their values, as in `{color: "red",
// fontWeight: "bold"}`. The property names can be given in
// camel-case—the library will insert a dash before capital letters
// when converting them to CSS.
//
// If you include an underscore in a property name, it and everything
// after it will be removed from the output, which can be useful when
// providing a property multiple times, for browser compatibility
// reasons.
//
// A property in a style object can also be a sub-selector, which
// extends the current context to add a pseudo-selector or a child
// selector. Such a property should contain a `&` character, which
// will be replaced by the current selector. For example `{"&:before":
// {content: '"hi"'}}`. Sub-selectors and regular properties can
// freely be mixed in a given object. Any property containing a `&` is
// assumed to be a sub-selector.
//
// Finally, a property can specify an @-block to be wrapped around the
// styles defined inside the object that's the property's value. For
// example to create a media query you can do `{"@media screen and
// (min-width: 400px)": {...}}`.

/***/ }),

/***/ "./node_modules/w3c-keyname/index.es.js":
/*!**********************************************!*\
  !*** ./node_modules/w3c-keyname/index.es.js ***!
  \**********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "base": () => (/* binding */ base),
/* harmony export */   "keyName": () => (/* binding */ keyName),
/* harmony export */   "shift": () => (/* binding */ shift)
/* harmony export */ });
var base = {
  8: "Backspace",
  9: "Tab",
  10: "Enter",
  12: "NumLock",
  13: "Enter",
  16: "Shift",
  17: "Control",
  18: "Alt",
  20: "CapsLock",
  27: "Escape",
  32: " ",
  33: "PageUp",
  34: "PageDown",
  35: "End",
  36: "Home",
  37: "ArrowLeft",
  38: "ArrowUp",
  39: "ArrowRight",
  40: "ArrowDown",
  44: "PrintScreen",
  45: "Insert",
  46: "Delete",
  59: ";",
  61: "=",
  91: "Meta",
  92: "Meta",
  106: "*",
  107: "+",
  108: ",",
  109: "-",
  110: ".",
  111: "/",
  144: "NumLock",
  145: "ScrollLock",
  160: "Shift",
  161: "Shift",
  162: "Control",
  163: "Control",
  164: "Alt",
  165: "Alt",
  173: "-",
  186: ";",
  187: "=",
  188: ",",
  189: "-",
  190: ".",
  191: "/",
  192: "`",
  219: "[",
  220: "\\",
  221: "]",
  222: "'"
};
var shift = {
  48: ")",
  49: "!",
  50: "@",
  51: "#",
  52: "$",
  53: "%",
  54: "^",
  55: "&",
  56: "*",
  57: "(",
  59: ":",
  61: "+",
  173: "_",
  186: ":",
  187: "+",
  188: "<",
  189: "_",
  190: ">",
  191: "?",
  192: "~",
  219: "{",
  220: "|",
  221: "}",
  222: "\""
};
var chrome = typeof navigator != "undefined" && /Chrome\/(\d+)/.exec(navigator.userAgent);
var gecko = typeof navigator != "undefined" && /Gecko\/\d+/.test(navigator.userAgent);
var mac = typeof navigator != "undefined" && /Mac/.test(navigator.platform);
var ie = typeof navigator != "undefined" && /MSIE \d|Trident\/(?:[7-9]|\d{2,})\..*rv:(\d+)/.exec(navigator.userAgent);
var brokenModifierNames = mac || chrome && +chrome[1] < 57;

// Fill in the digit keys
for (var i = 0; i < 10; i++) {
  base[48 + i] = base[96 + i] = String(i);
}

// The function keys
for (var i = 1; i <= 24; i++) {
  base[i + 111] = "F" + i;
}

// And the alphabetic keys
for (var i = 65; i <= 90; i++) {
  base[i] = String.fromCharCode(i + 32);
  shift[i] = String.fromCharCode(i);
}

// For each code that doesn't have a shift-equivalent, copy the base name
for (var code in base) {
  if (!shift.hasOwnProperty(code)) shift[code] = base[code];
}
function keyName(event) {
  var ignoreKey = brokenModifierNames && (event.ctrlKey || event.altKey || event.metaKey) || ie && event.shiftKey && event.key && event.key.length == 1 || event.key == "Unidentified";
  var name = !ignoreKey && event.key || (event.shiftKey ? shift : base)[event.keyCode] || event.key || "Unidentified";
  // Edge sometimes produces wrong names (Issue #3)
  if (name == "Esc") name = "Escape";
  if (name == "Del") name = "Delete";
  // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8860571/
  if (name == "Left") name = "ArrowLeft";
  if (name == "Up") name = "ArrowUp";
  if (name == "Right") name = "ArrowRight";
  if (name == "Down") name = "ArrowDown";
  return name;
}

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/nonce */
/******/ 	(() => {
/******/ 		__webpack_require__.nc = undefined;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _css_main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./css/main.scss */ "./src/css/main.scss");
/* harmony import */ var _main_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./main.js */ "./src/main.js");
/* harmony import */ var _api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./api */ "./src/api/index.js");
/* harmony import */ var _editor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./editor */ "./src/editor/index.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == _typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }




var urlForm = document.getElementById('urlForm');
var urlInput = urlForm.querySelector('[data-url]');
var selectedMethod = urlForm.querySelector('[data-method]');
var submitButton = urlForm.querySelector('[data-submit]');

// selectedMethod.querySelectorAll('option').forEach((optTag) => {
//     optTag.addEventListener('click', (ev) => {
//         selectedMethod.querySelector('[selected]')?.removeAttribute('selected')
//         ev.originalTarget.setAttribute('selected', true)
//     })
// })
var _setupEditors = (0,_editor__WEBPACK_IMPORTED_MODULE_3__["default"])(),
  requestEditor = _setupEditors.requestEditor,
  updateResponseEditor = _setupEditors.updateResponseEditor;

// selectedMethod.querySelector('option[value=get]').setAttribute('selected', true)

var responseTab = document.querySelector('[data-response-tabs]');
urlForm.addEventListener('submit', function (ev) {
  ev.preventDefault();
  _main_js__WEBPACK_IMPORTED_MODULE_1__.data.url = urlInput.value.trim();
  _main_js__WEBPACK_IMPORTED_MODULE_1__.data.method = selectedMethod.value.trim().toLowerCase();
  _main_js__WEBPACK_IMPORTED_MODULE_1__.data.config.headers = (0,_main_js__WEBPACK_IMPORTED_MODULE_1__.getHeaders)();
  _main_js__WEBPACK_IMPORTED_MODULE_1__.data.config.queryParams = (0,_main_js__WEBPACK_IMPORTED_MODULE_1__.getQueryParams)();
  var formData = (0,_main_js__WEBPACK_IMPORTED_MODULE_1__.getFormData)(_main_js__WEBPACK_IMPORTED_MODULE_1__.data.config.headers);
  if (_main_js__WEBPACK_IMPORTED_MODULE_1__.data.method.toLowerCase() !== 'get') {
    try {
      _main_js__WEBPACK_IMPORTED_MODULE_1__.data.body = JSON.parse(requestEditor.state.doc.toString());
    } catch (_) {
      _main_js__WEBPACK_IMPORTED_MODULE_1__.data.body = {};
    }
    if (!Object.keys(_main_js__WEBPACK_IMPORTED_MODULE_1__.data.body).length) {
      _main_js__WEBPACK_IMPORTED_MODULE_1__.data.body = formData;
    }
    console.log(_main_js__WEBPACK_IMPORTED_MODULE_1__.data.body);
  }
  var startTime = new Date().getTime();
  var url = _api__WEBPACK_IMPORTED_MODULE_2__["default"].send(_main_js__WEBPACK_IMPORTED_MODULE_1__.data, /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(response) {
      var _response;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (response) {
                updateResponseEditor(response.data);
                handleResponseDetails(response, startTime);
                handleResponseEditorState(response, updateResponseEditor);
              } else {
                _response = {
                  data: 'Request timeout the remote server might be down',
                  status: 408,
                  statusText: 'Timeout'
                };
                handleResponseDetails(_response, startTime);
                updateResponseEditor(_response.data);
              }
            case 1:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));
    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
  if (url) {
    urlInput.value = url;
  }
});
function handleResponseDetails(response, startTime) {
  var _response$customData;
  if (!response) return;
  var status = document.querySelector('#resStatusCode [data-inject]');
  status.innerHTML = "".concat(response.status, " ").concat(response.statusText);
  var duration = document.querySelector('#resDuration [data-inject]');
  duration.innerHTML = "".concat(((_response$customData = response.customData) === null || _response$customData === void 0 ? void 0 : _response$customData.timeDuration) || new Date().getTime() - startTime, "ms");
}
function handleResponseEditorState(response, handler) {
  responseTab.childNodes.forEach(function (tab) {
    tab.addEventListener('click', function () {
      responseTab.querySelector('.active').classList.remove('active');
      tab.classList.add('active');
      if (tab.hasAttribute('data-body-tab')) {
        handler(response.data);
      } else if (tab.hasAttribute('data-header-tab')) {
        handler(response.headers);
      }
    });
  });
}
})();

/******/ })()
;
//# sourceMappingURL=bundle.js.map